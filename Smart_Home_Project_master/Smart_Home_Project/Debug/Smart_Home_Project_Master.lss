
Smart_Home_Project_Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001e40  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000240  00800060  00001e40  00001ed4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  008002a0  008002a0  00002114  2**0
                  ALLOC
  3 .stab         000018b4  00000000  00000000  00002114  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000051f  00000000  00000000  000039c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001e0  00000000  00000000  00003ee8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000025ff  00000000  00000000  000040c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000aee  00000000  00000000  000066c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000154a  00000000  00000000  000071b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000648  00000000  00000000  00008700  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000936  00000000  00000000  00008d48  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000028af  00000000  00000000  0000967e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  0000bf2d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 7e 07 	jmp	0xefc	; 0xefc <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 72 0d 	jmp	0x1ae4	; 0x1ae4 <__vector_13>
      38:	0c 94 99 0d 	jmp	0x1b32	; 0x1b32 <__vector_14>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e4       	ldi	r30, 0x40	; 64
      68:	fe e1       	ldi	r31, 0x1E	; 30
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a0 3a       	cpi	r26, 0xA0	; 160
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a0 ea       	ldi	r26, 0xA0	; 160
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 3a       	cpi	r26, 0xAA	; 170
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 d5 01 	call	0x3aa	; 0x3aa <main>
      8a:	0c 94 1e 0f 	jmp	0x1e3c	; 0x1e3c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ui8ComparePass>:

uint8 ui8ComparePass(const uint8* pass1,const uint8* pass2,const uint8 size)
{
	uint8 pin_counter=0;//the offset of the character of the pin
	uint8 ret_value = TRUE;
	while (pin_counter<size)//loop till the pin is fully entered
      92:	44 23       	and	r20, r20
      94:	a1 f0       	breq	.+40     	; 0xbe <ui8ComparePass+0x2c>
	{
		if (*(pass1+pin_counter)!=*(pass2+pin_counter))//if the two characters of the entered pin and the stored pin are not equal
      96:	fc 01       	movw	r30, r24
      98:	30 81       	ld	r19, Z
      9a:	fb 01       	movw	r30, r22
      9c:	20 81       	ld	r18, Z
      9e:	32 17       	cp	r19, r18
      a0:	81 f4       	brne	.+32     	; 0xc2 <ui8ComparePass+0x30>
#include "menu.h"

extern volatile uint16 session_counter;//Stores the session time
extern uint8 timeout_flag;//stores if the session is still valid or outdated

uint8 ui8ComparePass(const uint8* pass1,const uint8* pass2,const uint8 size)
      a2:	dc 01       	movw	r26, r24
      a4:	11 96       	adiw	r26, 0x01	; 1
      a6:	31 96       	adiw	r30, 0x01	; 1
{
	uint8 pin_counter=0;//the offset of the character of the pin
      a8:	80 e0       	ldi	r24, 0x00	; 0
      aa:	04 c0       	rjmp	.+8      	; 0xb4 <ui8ComparePass+0x22>
	uint8 ret_value = TRUE;
	while (pin_counter<size)//loop till the pin is fully entered
	{
		if (*(pass1+pin_counter)!=*(pass2+pin_counter))//if the two characters of the entered pin and the stored pin are not equal
      ac:	2d 91       	ld	r18, X+
      ae:	91 91       	ld	r25, Z+
      b0:	29 17       	cp	r18, r25
      b2:	49 f4       	brne	.+18     	; 0xc6 <ui8ComparePass+0x34>
		{
			ret_value= FALSE;//returns false that means the two PINs are not equal
			break;//break the loop
		}
		pin_counter++;//increase thee offset by one
      b4:	8f 5f       	subi	r24, 0xFF	; 255

uint8 ui8ComparePass(const uint8* pass1,const uint8* pass2,const uint8 size)
{
	uint8 pin_counter=0;//the offset of the character of the pin
	uint8 ret_value = TRUE;
	while (pin_counter<size)//loop till the pin is fully entered
      b6:	84 17       	cp	r24, r20
      b8:	c9 f7       	brne	.-14     	; 0xac <ui8ComparePass+0x1a>
extern uint8 timeout_flag;//stores if the session is still valid or outdated

uint8 ui8ComparePass(const uint8* pass1,const uint8* pass2,const uint8 size)
{
	uint8 pin_counter=0;//the offset of the character of the pin
	uint8 ret_value = TRUE;
      ba:	81 e0       	ldi	r24, 0x01	; 1
      bc:	08 95       	ret
      be:	81 e0       	ldi	r24, 0x01	; 1
      c0:	08 95       	ret
	while (pin_counter<size)//loop till the pin is fully entered
	{
		if (*(pass1+pin_counter)!=*(pass2+pin_counter))//if the two characters of the entered pin and the stored pin are not equal
		{
			ret_value= FALSE;//returns false that means the two PINs are not equal
      c2:	80 e0       	ldi	r24, 0x00	; 0
      c4:	08 95       	ret
      c6:	80 e0       	ldi	r24, 0x00	; 0
			break;//break the loop
		}
		pin_counter++;//increase thee offset by one
	}
	return ret_value;//returns false that means the two PINs are equal since all characters of the PINs are equal
}
      c8:	08 95       	ret

000000ca <u8GetKeyPressed>:
		}
	} while ( ( (key_pressed < '0') || (key_pressed > '2') ) && (timeout_flag == FALSE));//break the loop in case of valid key or time is out
}

uint8 u8GetKeyPressed(const uint8 u8LoginMode)
{
      ca:	cf 93       	push	r28
      cc:	c8 2f       	mov	r28, r24
	uint8 key_pressed = NOT_PRESSED;
	while (key_pressed == NOT_PRESSED)//repeat till the user press any key
	{
		if ( (session_counter >= ADMIN_TIMEOUT && u8LoginMode == ADMIN) || ( session_counter >= GUEST_TIMEOUT && u8LoginMode == GUEST ))//check for timeout
      ce:	80 91 a1 02 	lds	r24, 0x02A1
      d2:	90 91 a2 02 	lds	r25, 0x02A2
      d6:	2b e0       	ldi	r18, 0x0B	; 11
      d8:	88 3b       	cpi	r24, 0xB8	; 184
      da:	92 07       	cpc	r25, r18
      dc:	10 f0       	brcs	.+4      	; 0xe2 <u8GetKeyPressed+0x18>
      de:	c1 30       	cpi	r28, 0x01	; 1
      e0:	51 f0       	breq	.+20     	; 0xf6 <u8GetKeyPressed+0x2c>
      e2:	80 91 a1 02 	lds	r24, 0x02A1
      e6:	90 91 a2 02 	lds	r25, 0x02A2
      ea:	27 e0       	ldi	r18, 0x07	; 7
      ec:	80 3d       	cpi	r24, 0xD0	; 208
      ee:	92 07       	cpc	r25, r18
      f0:	38 f0       	brcs	.+14     	; 0x100 <u8GetKeyPressed+0x36>
      f2:	c2 30       	cpi	r28, 0x02	; 2
      f4:	29 f4       	brne	.+10     	; 0x100 <u8GetKeyPressed+0x36>
		{
			timeout_flag = TRUE;//set timeout flag to true
      f6:	81 e0       	ldi	r24, 0x01	; 1
      f8:	80 93 a0 02 	sts	0x02A0, r24
			break;//break the loop that wait for input from the user
      fc:	8f ef       	ldi	r24, 0xFF	; 255
      fe:	04 c0       	rjmp	.+8      	; 0x108 <u8GetKeyPressed+0x3e>
		}
		
		key_pressed = keypad_u8check_press();//if the user pressed any button in keypad save the value in key_pressed
     100:	0e 94 5f 08 	call	0x10be	; 0x10be <keypad_u8check_press>
}

uint8 u8GetKeyPressed(const uint8 u8LoginMode)
{
	uint8 key_pressed = NOT_PRESSED;
	while (key_pressed == NOT_PRESSED)//repeat till the user press any key
     104:	8f 3f       	cpi	r24, 0xFF	; 255
     106:	19 f3       	breq	.-58     	; 0xce <u8GetKeyPressed+0x4>
		}
		
		key_pressed = keypad_u8check_press();//if the user pressed any button in keypad save the value in key_pressed
	}
	return key_pressed;
     108:	cf 91       	pop	r28
     10a:	08 95       	ret

0000010c <vMenuOption>:
	}
	return ret_value;//returns false that means the two PINs are equal since all characters of the PINs are equal
}

void vMenuOption(const uint8 u8SelectedRoom,const uint8 u8LoginMode)
{
     10c:	2f 92       	push	r2
     10e:	3f 92       	push	r3
     110:	4f 92       	push	r4
     112:	5f 92       	push	r5
     114:	7f 92       	push	r7
     116:	8f 92       	push	r8
     118:	9f 92       	push	r9
     11a:	af 92       	push	r10
     11c:	bf 92       	push	r11
     11e:	cf 92       	push	r12
     120:	df 92       	push	r13
     122:	ef 92       	push	r14
     124:	ff 92       	push	r15
     126:	0f 93       	push	r16
     128:	1f 93       	push	r17
     12a:	cf 93       	push	r28
     12c:	df 93       	push	r29
     12e:	d8 2f       	mov	r29, r24
     130:	06 2f       	mov	r16, r22
	uint8 u8StatusCode  = 0;//demand status code
	uint8 u8TurnOnCode  = 0;//turn on the room or the device code
	uint8 u8TurnOffCode = 0;//turn off the device or room
     132:	ee 24       	eor	r14, r14
}

void vMenuOption(const uint8 u8SelectedRoom,const uint8 u8LoginMode)
{
	uint8 u8StatusCode  = 0;//demand status code
	uint8 u8TurnOnCode  = 0;//turn on the room or the device code
     134:	ff 24       	eor	r15, r15
	return ret_value;//returns false that means the two PINs are equal since all characters of the PINs are equal
}

void vMenuOption(const uint8 u8SelectedRoom,const uint8 u8LoginMode)
{
	uint8 u8StatusCode  = 0;//demand status code
     136:	10 e0       	ldi	r17, 0x00	; 0
			break;
			case TV_MENU:
			u8StatusCode = TV_STATUS;
			u8TurnOnCode = TV_TURN_ON;
			u8TurnOffCode = TV_TURN_OFF;
			LCD_vSend_string("TV S:");
     138:	0f 2e       	mov	r0, r31
     13a:	f2 e7       	ldi	r31, 0x72	; 114
     13c:	2f 2e       	mov	r2, r31
     13e:	f0 e0       	ldi	r31, 0x00	; 0
     140:	3f 2e       	mov	r3, r31
     142:	f0 2d       	mov	r31, r0
			u8TurnOnCode = ROOM2_TURN_ON;
			u8TurnOffCode = ROOM2_TURN_OFF;
			LCD_vSend_string("Room2 S:");
			break;
			case TV_MENU:
			u8StatusCode = TV_STATUS;
     144:	0f 2e       	mov	r0, r31
     146:	f3 e1       	ldi	r31, 0x13	; 19
     148:	7f 2e       	mov	r7, r31
     14a:	f0 2d       	mov	r31, r0
		{
			LCD_vSend_string("CLOSED");//print the status closed
		}
		else//if the response from the slave was off status
		{
			LCD_vSend_string("OFF");//print the status off
     14c:	0f 2e       	mov	r0, r31
     14e:	f5 ea       	ldi	r31, 0xA5	; 165
     150:	af 2e       	mov	r10, r31
     152:	f0 e0       	ldi	r31, 0x00	; 0
     154:	bf 2e       	mov	r11, r31
     156:	f0 2d       	mov	r31, r0
		{
			LCD_vSend_string("OPEN");//print the status open
		}
		else if (response == CLOSED_STATUS)
		{
			LCD_vSend_string("CLOSED");//print the status closed
     158:	0f 2e       	mov	r0, r31
     15a:	fe e9       	ldi	r31, 0x9E	; 158
     15c:	4f 2e       	mov	r4, r31
     15e:	f0 e0       	ldi	r31, 0x00	; 0
     160:	5f 2e       	mov	r5, r31
     162:	f0 2d       	mov	r31, r0
		{
			LCD_vSend_string("OFF");//print the status off
		}

		LCD_movecursor(2,1);//move the cursor to the start of the second line
		LCD_vSend_string("1-On 2-Off 0-RET");//print the sub menu
     164:	0f 2e       	mov	r0, r31
     166:	f9 ea       	ldi	r31, 0xA9	; 169
     168:	cf 2e       	mov	r12, r31
     16a:	f0 e0       	ldi	r31, 0x00	; 0
     16c:	df 2e       	mov	r13, r31
     16e:	f0 2d       	mov	r31, r0
			SPI_ui8TransmitRecive(u8TurnOffCode);//Send turn off signal from master to slave
		}
		else if( (key_pressed != NOT_PRESSED) && (key_pressed != '0') )//show wrong input message if the user entered non numeric value
		{
			LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
			LCD_vSend_string("Wrong input");//print error message
     170:	0f 2e       	mov	r0, r31
     172:	fa eb       	ldi	r31, 0xBA	; 186
     174:	8f 2e       	mov	r8, r31
     176:	f0 e0       	ldi	r31, 0x00	; 0
     178:	9f 2e       	mov	r9, r31
     17a:	f0 2d       	mov	r31, r0
	uint8 response      = DEFAULT_ACK;//the response of the slave that is sent back based on the command of the master
	uint8 key_pressed   = NOT_PRESSED;//the key that is entered by the user
	
	do
	{
		LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     17c:	0e 94 6f 09 	call	0x12de	; 0x12de <LCD_clearscreen>
		
		/*********** ****************Set the commands to be sent to the slave based on  the sent room or device ******************************/
		switch(u8SelectedRoom)
     180:	d5 30       	cpi	r29, 0x05	; 5
     182:	61 f1       	breq	.+88     	; 0x1dc <vMenuOption+0xd0>
     184:	d6 30       	cpi	r29, 0x06	; 6
     186:	30 f4       	brcc	.+12     	; 0x194 <vMenuOption+0x88>
     188:	d3 30       	cpi	r29, 0x03	; 3
     18a:	61 f0       	breq	.+24     	; 0x1a4 <vMenuOption+0x98>
     18c:	d4 30       	cpi	r29, 0x04	; 4
     18e:	09 f0       	breq	.+2      	; 0x192 <vMenuOption+0x86>
     190:	5b c0       	rjmp	.+182    	; 0x248 <vMenuOption+0x13c>
     192:	16 c0       	rjmp	.+44     	; 0x1c0 <vMenuOption+0xb4>
     194:	d7 30       	cpi	r29, 0x07	; 7
     196:	e9 f1       	breq	.+122    	; 0x212 <vMenuOption+0x106>
     198:	d7 30       	cpi	r29, 0x07	; 7
     19a:	68 f1       	brcs	.+90     	; 0x1f6 <vMenuOption+0xea>
     19c:	d9 30       	cpi	r29, 0x09	; 9
     19e:	09 f0       	breq	.+2      	; 0x1a2 <vMenuOption+0x96>
     1a0:	53 c0       	rjmp	.+166    	; 0x248 <vMenuOption+0x13c>
     1a2:	45 c0       	rjmp	.+138    	; 0x22e <vMenuOption+0x122>
		{
			case ROOM1_MENU:
			u8StatusCode = ROOM1_STATUS;
			u8TurnOnCode = ROOM1_TURN_ON;
			u8TurnOffCode = ROOM1_TURN_OFF;
			LCD_vSend_string("Room1 S:");
     1a4:	80 e6       	ldi	r24, 0x60	; 96
     1a6:	90 e0       	ldi	r25, 0x00	; 0
     1a8:	0e 94 60 09 	call	0x12c0	; 0x12c0 <LCD_vSend_string>
		switch(u8SelectedRoom)
		{
			case ROOM1_MENU:
			u8StatusCode = ROOM1_STATUS;
			u8TurnOnCode = ROOM1_TURN_ON;
			u8TurnOffCode = ROOM1_TURN_OFF;
     1ac:	0f 2e       	mov	r0, r31
     1ae:	f1 e3       	ldi	r31, 0x31	; 49
     1b0:	ef 2e       	mov	r14, r31
     1b2:	f0 2d       	mov	r31, r0
		/*********** ****************Set the commands to be sent to the slave based on  the sent room or device ******************************/
		switch(u8SelectedRoom)
		{
			case ROOM1_MENU:
			u8StatusCode = ROOM1_STATUS;
			u8TurnOnCode = ROOM1_TURN_ON;
     1b4:	0f 2e       	mov	r0, r31
     1b6:	f1 e2       	ldi	r31, 0x21	; 33
     1b8:	ff 2e       	mov	r15, r31
     1ba:	f0 2d       	mov	r31, r0
		
		/*********** ****************Set the commands to be sent to the slave based on  the sent room or device ******************************/
		switch(u8SelectedRoom)
		{
			case ROOM1_MENU:
			u8StatusCode = ROOM1_STATUS;
     1bc:	11 e1       	ldi	r17, 0x11	; 17
			u8TurnOnCode = ROOM1_TURN_ON;
			u8TurnOffCode = ROOM1_TURN_OFF;
			LCD_vSend_string("Room1 S:");
			break;
     1be:	44 c0       	rjmp	.+136    	; 0x248 <vMenuOption+0x13c>
			case ROOM2_MENU:
			u8StatusCode = ROOM2_STATUS;
			u8TurnOnCode = ROOM2_TURN_ON;
			u8TurnOffCode = ROOM2_TURN_OFF;
			LCD_vSend_string("Room2 S:");
     1c0:	89 e6       	ldi	r24, 0x69	; 105
     1c2:	90 e0       	ldi	r25, 0x00	; 0
     1c4:	0e 94 60 09 	call	0x12c0	; 0x12c0 <LCD_vSend_string>
			LCD_vSend_string("Room1 S:");
			break;
			case ROOM2_MENU:
			u8StatusCode = ROOM2_STATUS;
			u8TurnOnCode = ROOM2_TURN_ON;
			u8TurnOffCode = ROOM2_TURN_OFF;
     1c8:	0f 2e       	mov	r0, r31
     1ca:	f2 e3       	ldi	r31, 0x32	; 50
     1cc:	ef 2e       	mov	r14, r31
     1ce:	f0 2d       	mov	r31, r0
			u8TurnOffCode = ROOM1_TURN_OFF;
			LCD_vSend_string("Room1 S:");
			break;
			case ROOM2_MENU:
			u8StatusCode = ROOM2_STATUS;
			u8TurnOnCode = ROOM2_TURN_ON;
     1d0:	0f 2e       	mov	r0, r31
     1d2:	f2 e2       	ldi	r31, 0x22	; 34
     1d4:	ff 2e       	mov	r15, r31
     1d6:	f0 2d       	mov	r31, r0
			u8TurnOnCode = ROOM1_TURN_ON;
			u8TurnOffCode = ROOM1_TURN_OFF;
			LCD_vSend_string("Room1 S:");
			break;
			case ROOM2_MENU:
			u8StatusCode = ROOM2_STATUS;
     1d8:	12 e1       	ldi	r17, 0x12	; 18
			u8TurnOnCode = ROOM2_TURN_ON;
			u8TurnOffCode = ROOM2_TURN_OFF;
			LCD_vSend_string("Room2 S:");
			break;
     1da:	36 c0       	rjmp	.+108    	; 0x248 <vMenuOption+0x13c>
			case TV_MENU:
			u8StatusCode = TV_STATUS;
			u8TurnOnCode = TV_TURN_ON;
			u8TurnOffCode = TV_TURN_OFF;
			LCD_vSend_string("TV S:");
     1dc:	c1 01       	movw	r24, r2
     1de:	0e 94 60 09 	call	0x12c0	; 0x12c0 <LCD_vSend_string>
			LCD_vSend_string("Room2 S:");
			break;
			case TV_MENU:
			u8StatusCode = TV_STATUS;
			u8TurnOnCode = TV_TURN_ON;
			u8TurnOffCode = TV_TURN_OFF;
     1e2:	0f 2e       	mov	r0, r31
     1e4:	f3 e3       	ldi	r31, 0x33	; 51
     1e6:	ef 2e       	mov	r14, r31
     1e8:	f0 2d       	mov	r31, r0
			u8TurnOffCode = ROOM2_TURN_OFF;
			LCD_vSend_string("Room2 S:");
			break;
			case TV_MENU:
			u8StatusCode = TV_STATUS;
			u8TurnOnCode = TV_TURN_ON;
     1ea:	0f 2e       	mov	r0, r31
     1ec:	f3 e2       	ldi	r31, 0x23	; 35
     1ee:	ff 2e       	mov	r15, r31
     1f0:	f0 2d       	mov	r31, r0
			u8TurnOnCode = ROOM2_TURN_ON;
			u8TurnOffCode = ROOM2_TURN_OFF;
			LCD_vSend_string("Room2 S:");
			break;
			case TV_MENU:
			u8StatusCode = TV_STATUS;
     1f2:	17 2d       	mov	r17, r7
			u8TurnOnCode = TV_TURN_ON;
			u8TurnOffCode = TV_TURN_OFF;
			LCD_vSend_string("TV S:");
			break;
     1f4:	29 c0       	rjmp	.+82     	; 0x248 <vMenuOption+0x13c>
			case FAN_MENU:
			u8StatusCode = FAN_STATUS;
			u8TurnOnCode = FAN_TURN_ON;
			u8TurnOffCode = FAN_TURN_OFF;
			LCD_vSend_string("Fan S:");
     1f6:	88 e7       	ldi	r24, 0x78	; 120
     1f8:	90 e0       	ldi	r25, 0x00	; 0
     1fa:	0e 94 60 09 	call	0x12c0	; 0x12c0 <LCD_vSend_string>
			LCD_vSend_string("TV S:");
			break;
			case FAN_MENU:
			u8StatusCode = FAN_STATUS;
			u8TurnOnCode = FAN_TURN_ON;
			u8TurnOffCode = FAN_TURN_OFF;
     1fe:	0f 2e       	mov	r0, r31
     200:	f4 e3       	ldi	r31, 0x34	; 52
     202:	ef 2e       	mov	r14, r31
     204:	f0 2d       	mov	r31, r0
			u8TurnOffCode = TV_TURN_OFF;
			LCD_vSend_string("TV S:");
			break;
			case FAN_MENU:
			u8StatusCode = FAN_STATUS;
			u8TurnOnCode = FAN_TURN_ON;
     206:	0f 2e       	mov	r0, r31
     208:	f4 e2       	ldi	r31, 0x24	; 36
     20a:	ff 2e       	mov	r15, r31
     20c:	f0 2d       	mov	r31, r0
			u8TurnOnCode = TV_TURN_ON;
			u8TurnOffCode = TV_TURN_OFF;
			LCD_vSend_string("TV S:");
			break;
			case FAN_MENU:
			u8StatusCode = FAN_STATUS;
     20e:	14 e1       	ldi	r17, 0x14	; 20
			u8TurnOnCode = FAN_TURN_ON;
			u8TurnOffCode = FAN_TURN_OFF;
			LCD_vSend_string("Fan S:");
			break;
     210:	1b c0       	rjmp	.+54     	; 0x248 <vMenuOption+0x13c>
			case GARAGE_MENU:
			u8StatusCode = GARAGE_DOOR_STATUS;
			u8TurnOnCode = OPEN_GARAGE;
			u8TurnOffCode = CLOSE_GARAGE;
			LCD_vSend_string("Garage S:");
     212:	8f e7       	ldi	r24, 0x7F	; 127
     214:	90 e0       	ldi	r25, 0x00	; 0
     216:	0e 94 60 09 	call	0x12c0	; 0x12c0 <LCD_vSend_string>
			LCD_vSend_string("Fan S:");
			break;
			case GARAGE_MENU:
			u8StatusCode = GARAGE_DOOR_STATUS;
			u8TurnOnCode = OPEN_GARAGE;
			u8TurnOffCode = CLOSE_GARAGE;
     21a:	0f 2e       	mov	r0, r31
     21c:	f5 e3       	ldi	r31, 0x35	; 53
     21e:	ef 2e       	mov	r14, r31
     220:	f0 2d       	mov	r31, r0
			u8TurnOffCode = FAN_TURN_OFF;
			LCD_vSend_string("Fan S:");
			break;
			case GARAGE_MENU:
			u8StatusCode = GARAGE_DOOR_STATUS;
			u8TurnOnCode = OPEN_GARAGE;
     222:	0f 2e       	mov	r0, r31
     224:	f5 e2       	ldi	r31, 0x25	; 37
     226:	ff 2e       	mov	r15, r31
     228:	f0 2d       	mov	r31, r0
			u8TurnOnCode = FAN_TURN_ON;
			u8TurnOffCode = FAN_TURN_OFF;
			LCD_vSend_string("Fan S:");
			break;
			case GARAGE_MENU:
			u8StatusCode = GARAGE_DOOR_STATUS;
     22a:	15 e1       	ldi	r17, 0x15	; 21
			u8TurnOnCode = OPEN_GARAGE;
			u8TurnOffCode = CLOSE_GARAGE;
			LCD_vSend_string("Garage S:");
			break;
     22c:	0d c0       	rjmp	.+26     	; 0x248 <vMenuOption+0x13c>
			case AIRCOND_CTRL_MENU:
			u8StatusCode = AIR_COND_STATUS;
			u8TurnOnCode = AIR_COND_TURN_ON;
			u8TurnOffCode = AIR_COND_TURN_OFF;
			LCD_vSend_string("Air Cond. S:");
     22e:	89 e8       	ldi	r24, 0x89	; 137
     230:	90 e0       	ldi	r25, 0x00	; 0
     232:	0e 94 60 09 	call	0x12c0	; 0x12c0 <LCD_vSend_string>
			LCD_vSend_string("Garage S:");
			break;
			case AIRCOND_CTRL_MENU:
			u8StatusCode = AIR_COND_STATUS;
			u8TurnOnCode = AIR_COND_TURN_ON;
			u8TurnOffCode = AIR_COND_TURN_OFF;
     236:	0f 2e       	mov	r0, r31
     238:	f6 e3       	ldi	r31, 0x36	; 54
     23a:	ef 2e       	mov	r14, r31
     23c:	f0 2d       	mov	r31, r0
			u8TurnOffCode = CLOSE_GARAGE;
			LCD_vSend_string("Garage S:");
			break;
			case AIRCOND_CTRL_MENU:
			u8StatusCode = AIR_COND_STATUS;
			u8TurnOnCode = AIR_COND_TURN_ON;
     23e:	0f 2e       	mov	r0, r31
     240:	f6 e2       	ldi	r31, 0x26	; 38
     242:	ff 2e       	mov	r15, r31
     244:	f0 2d       	mov	r31, r0
			u8TurnOnCode = OPEN_GARAGE;
			u8TurnOffCode = CLOSE_GARAGE;
			LCD_vSend_string("Garage S:");
			break;
			case AIRCOND_CTRL_MENU:
			u8StatusCode = AIR_COND_STATUS;
     246:	16 e1       	ldi	r17, 0x16	; 22
			LCD_vSend_string("Air Cond. S:");
			break;
		}
		/****************************************************************************************************/
		
		SPI_ui8TransmitRecive(u8StatusCode);//demand the status from the slave
     248:	81 2f       	mov	r24, r17
     24a:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <SPI_ui8TransmitRecive>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     24e:	8f ef       	ldi	r24, 0xFF	; 255
     250:	90 e7       	ldi	r25, 0x70	; 112
     252:	a2 e0       	ldi	r26, 0x02	; 2
     254:	81 50       	subi	r24, 0x01	; 1
     256:	90 40       	sbci	r25, 0x00	; 0
     258:	a0 40       	sbci	r26, 0x00	; 0
     25a:	e1 f7       	brne	.-8      	; 0x254 <vMenuOption+0x148>
     25c:	00 c0       	rjmp	.+0      	; 0x25e <vMenuOption+0x152>
     25e:	00 00       	nop
		_delay_ms(100);//Halt the system for the given time in (ms)
		response = SPI_ui8TransmitRecive(DEMAND_RESPONSE);//the master micro controller asks for the status
     260:	8f ef       	ldi	r24, 0xFF	; 255
     262:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <SPI_ui8TransmitRecive>
		if(response == ON_STATUS)//if the response from the slave was on status
     266:	81 30       	cpi	r24, 0x01	; 1
     268:	29 f4       	brne	.+10     	; 0x274 <vMenuOption+0x168>
		{
			LCD_vSend_string("ON");//print the status on
     26a:	86 e9       	ldi	r24, 0x96	; 150
     26c:	90 e0       	ldi	r25, 0x00	; 0
     26e:	0e 94 60 09 	call	0x12c0	; 0x12c0 <LCD_vSend_string>
     272:	10 c0       	rjmp	.+32     	; 0x294 <vMenuOption+0x188>
		}
		else if (response == OPEN_STATUS)
     274:	85 35       	cpi	r24, 0x55	; 85
     276:	29 f4       	brne	.+10     	; 0x282 <vMenuOption+0x176>
		{
			LCD_vSend_string("OPEN");//print the status open
     278:	89 e9       	ldi	r24, 0x99	; 153
     27a:	90 e0       	ldi	r25, 0x00	; 0
     27c:	0e 94 60 09 	call	0x12c0	; 0x12c0 <LCD_vSend_string>
     280:	09 c0       	rjmp	.+18     	; 0x294 <vMenuOption+0x188>
		}
		else if (response == CLOSED_STATUS)
     282:	86 35       	cpi	r24, 0x56	; 86
     284:	21 f4       	brne	.+8      	; 0x28e <vMenuOption+0x182>
		{
			LCD_vSend_string("CLOSED");//print the status closed
     286:	c2 01       	movw	r24, r4
     288:	0e 94 60 09 	call	0x12c0	; 0x12c0 <LCD_vSend_string>
     28c:	03 c0       	rjmp	.+6      	; 0x294 <vMenuOption+0x188>
		}
		else//if the response from the slave was off status
		{
			LCD_vSend_string("OFF");//print the status off
     28e:	c5 01       	movw	r24, r10
     290:	0e 94 60 09 	call	0x12c0	; 0x12c0 <LCD_vSend_string>
		}

		LCD_movecursor(2,1);//move the cursor to the start of the second line
     294:	82 e0       	ldi	r24, 0x02	; 2
     296:	61 e0       	ldi	r22, 0x01	; 1
     298:	0e 94 73 09 	call	0x12e6	; 0x12e6 <LCD_movecursor>
		LCD_vSend_string("1-On 2-Off 0-RET");//print the sub menu
     29c:	c6 01       	movw	r24, r12
     29e:	0e 94 60 09 	call	0x12c0	; 0x12c0 <LCD_vSend_string>
		
		/*******************************************************************************/
		
		key_pressed = u8GetKeyPressed(u8LoginMode);//wait for the user till key is pressed or the time is out
     2a2:	80 2f       	mov	r24, r16
     2a4:	0e 94 65 00 	call	0xca	; 0xca <u8GetKeyPressed>
     2a8:	c8 2f       	mov	r28, r24
     2aa:	8f ef       	ldi	r24, 0xFF	; 255
     2ac:	90 e7       	ldi	r25, 0x70	; 112
     2ae:	a2 e0       	ldi	r26, 0x02	; 2
     2b0:	81 50       	subi	r24, 0x01	; 1
     2b2:	90 40       	sbci	r25, 0x00	; 0
     2b4:	a0 40       	sbci	r26, 0x00	; 0
     2b6:	e1 f7       	brne	.-8      	; 0x2b0 <vMenuOption+0x1a4>
     2b8:	00 c0       	rjmp	.+0      	; 0x2ba <vMenuOption+0x1ae>
     2ba:	00 00       	nop
		_delay_ms(100);//to avoid the duplication of the pressed key
		
		/*there is no need to take any action in case of the user pressed 0(RET) key
		breaking the loop will be enough since it will be handled in the main*/
		
		if (key_pressed == '1')
     2bc:	c1 33       	cpi	r28, 0x31	; 49
     2be:	21 f4       	brne	.+8      	; 0x2c8 <vMenuOption+0x1bc>
		{
			SPI_ui8TransmitRecive(u8TurnOnCode);//Send turn on signal from master to slave
     2c0:	8f 2d       	mov	r24, r15
     2c2:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <SPI_ui8TransmitRecive>
     2c6:	20 c0       	rjmp	.+64     	; 0x308 <vMenuOption+0x1fc>
		}
		else if (key_pressed == '2')
     2c8:	c2 33       	cpi	r28, 0x32	; 50
     2ca:	21 f4       	brne	.+8      	; 0x2d4 <vMenuOption+0x1c8>
		{
			SPI_ui8TransmitRecive(u8TurnOffCode);//Send turn off signal from master to slave
     2cc:	8e 2d       	mov	r24, r14
     2ce:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <SPI_ui8TransmitRecive>
     2d2:	1a c0       	rjmp	.+52     	; 0x308 <vMenuOption+0x1fc>
		}
		else if( (key_pressed != NOT_PRESSED) && (key_pressed != '0') )//show wrong input message if the user entered non numeric value
     2d4:	cf 3f       	cpi	r28, 0xFF	; 255
     2d6:	99 f0       	breq	.+38     	; 0x2fe <vMenuOption+0x1f2>
     2d8:	c0 33       	cpi	r28, 0x30	; 48
     2da:	b1 f0       	breq	.+44     	; 0x308 <vMenuOption+0x1fc>
		{
			LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     2dc:	0e 94 6f 09 	call	0x12de	; 0x12de <LCD_clearscreen>
			LCD_vSend_string("Wrong input");//print error message
     2e0:	c4 01       	movw	r24, r8
     2e2:	0e 94 60 09 	call	0x12c0	; 0x12c0 <LCD_vSend_string>
     2e6:	8f ef       	ldi	r24, 0xFF	; 255
     2e8:	94 e3       	ldi	r25, 0x34	; 52
     2ea:	ac e0       	ldi	r26, 0x0C	; 12
     2ec:	81 50       	subi	r24, 0x01	; 1
     2ee:	90 40       	sbci	r25, 0x00	; 0
     2f0:	a0 40       	sbci	r26, 0x00	; 0
     2f2:	e1 f7       	brne	.-8      	; 0x2ec <vMenuOption+0x1e0>
     2f4:	00 c0       	rjmp	.+0      	; 0x2f6 <vMenuOption+0x1ea>
     2f6:	00 00       	nop
			_delay_ms(500);//Halt the system for the given time in (ms)
		}
	} while ( ( (key_pressed < '0') || (key_pressed > '2') ) && (timeout_flag == FALSE));//break the loop in case of valid key or time is out
     2f8:	c0 53       	subi	r28, 0x30	; 48
     2fa:	c3 30       	cpi	r28, 0x03	; 3
     2fc:	28 f0       	brcs	.+10     	; 0x308 <vMenuOption+0x1fc>
     2fe:	80 91 a0 02 	lds	r24, 0x02A0
     302:	88 23       	and	r24, r24
     304:	09 f4       	brne	.+2      	; 0x308 <vMenuOption+0x1fc>
     306:	3a cf       	rjmp	.-396    	; 0x17c <vMenuOption+0x70>
}
     308:	df 91       	pop	r29
     30a:	cf 91       	pop	r28
     30c:	1f 91       	pop	r17
     30e:	0f 91       	pop	r16
     310:	ff 90       	pop	r15
     312:	ef 90       	pop	r14
     314:	df 90       	pop	r13
     316:	cf 90       	pop	r12
     318:	bf 90       	pop	r11
     31a:	af 90       	pop	r10
     31c:	9f 90       	pop	r9
     31e:	8f 90       	pop	r8
     320:	7f 90       	pop	r7
     322:	5f 90       	pop	r5
     324:	4f 90       	pop	r4
     326:	3f 90       	pop	r3
     328:	2f 90       	pop	r2
     32a:	08 95       	ret

0000032c <USART_ISR>:
uint8 UART_DATA = 0 ;
void USART_ISR(void);
void USART_ISR(void)                                           // UART ISR that resets in passwords for th MC
{
	//u8FlagGlb = 1;
	UART_DATA=UART_U8ReceiveData();
     32c:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <UART_U8ReceiveData>
     330:	80 93 a3 02 	sts	0x02A3, r24
	if (UART_DATA==RESET_VALUE)
     334:	81 34       	cpi	r24, 0x41	; 65
     336:	c1 f5       	brne	.+112    	; 0x3a8 <USART_ISR+0x7c>
	{
		UART_DATA = 0;
     338:	10 92 a3 02 	sts	0x02A3, r1
		EEPROM_vWrite(ADMIN_PASS_STATUS_ADDRESS,PASS_NOT_SET);
     33c:	80 ee       	ldi	r24, 0xE0	; 224
     33e:	6f ef       	ldi	r22, 0xFF	; 255
     340:	0e 94 b0 07 	call	0xf60	; 0xf60 <EEPROM_vWrite>
     344:	8f ef       	ldi	r24, 0xFF	; 255
     346:	90 e7       	ldi	r25, 0x70	; 112
     348:	a2 e0       	ldi	r26, 0x02	; 2
     34a:	81 50       	subi	r24, 0x01	; 1
     34c:	90 40       	sbci	r25, 0x00	; 0
     34e:	a0 40       	sbci	r26, 0x00	; 0
     350:	e1 f7       	brne	.-8      	; 0x34a <USART_ISR+0x1e>
     352:	00 c0       	rjmp	.+0      	; 0x354 <USART_ISR+0x28>
     354:	00 00       	nop
		_delay_ms(100);
		EEPROM_vWrite(GUEST_PASS_STATUS_ADDRESS,PASS_NOT_SET);
     356:	81 ee       	ldi	r24, 0xE1	; 225
     358:	6f ef       	ldi	r22, 0xFF	; 255
     35a:	0e 94 b0 07 	call	0xf60	; 0xf60 <EEPROM_vWrite>
     35e:	8f ef       	ldi	r24, 0xFF	; 255
     360:	90 e7       	ldi	r25, 0x70	; 112
     362:	a2 e0       	ldi	r26, 0x02	; 2
     364:	81 50       	subi	r24, 0x01	; 1
     366:	90 40       	sbci	r25, 0x00	; 0
     368:	a0 40       	sbci	r26, 0x00	; 0
     36a:	e1 f7       	brne	.-8      	; 0x364 <USART_ISR+0x38>
     36c:	00 c0       	rjmp	.+0      	; 0x36e <USART_ISR+0x42>
     36e:	00 00       	nop
		_delay_ms(100);
		LCD_clearscreen();
     370:	0e 94 6f 09 	call	0x12de	; 0x12de <LCD_clearscreen>
		LCD_movecursor(0,1);
     374:	80 e0       	ldi	r24, 0x00	; 0
     376:	61 e0       	ldi	r22, 0x01	; 1
     378:	0e 94 73 09 	call	0x12e6	; 0x12e6 <LCD_movecursor>
		LCD_vSend_string("PLEASE RESET ");
     37c:	86 ec       	ldi	r24, 0xC6	; 198
     37e:	90 e0       	ldi	r25, 0x00	; 0
     380:	0e 94 60 09 	call	0x12c0	; 0x12c0 <LCD_vSend_string>
		LCD_movecursor(2,1);
     384:	82 e0       	ldi	r24, 0x02	; 2
     386:	61 e0       	ldi	r22, 0x01	; 1
     388:	0e 94 73 09 	call	0x12e6	; 0x12e6 <LCD_movecursor>
		LCD_vSend_string("THE POWER");
     38c:	84 ed       	ldi	r24, 0xD4	; 212
     38e:	90 e0       	ldi	r25, 0x00	; 0
     390:	0e 94 60 09 	call	0x12c0	; 0x12c0 <LCD_vSend_string>
     394:	8f ef       	ldi	r24, 0xFF	; 255
     396:	99 e6       	ldi	r25, 0x69	; 105
     398:	a8 e1       	ldi	r26, 0x18	; 24
     39a:	81 50       	subi	r24, 0x01	; 1
     39c:	90 40       	sbci	r25, 0x00	; 0
     39e:	a0 40       	sbci	r26, 0x00	; 0
     3a0:	e1 f7       	brne	.-8      	; 0x39a <USART_ISR+0x6e>
     3a2:	00 c0       	rjmp	.+0      	; 0x3a4 <USART_ISR+0x78>
     3a4:	00 00       	nop
     3a6:	ff cf       	rjmp	.-2      	; 0x3a6 <USART_ISR+0x7a>
     3a8:	08 95       	ret

000003aa <main>:




int main(void)
{
     3aa:	cf 93       	push	r28
     3ac:	df 93       	push	r29
     3ae:	cd b7       	in	r28, 0x3d	; 61
     3b0:	de b7       	in	r29, 0x3e	; 62
     3b2:	2d 97       	sbiw	r28, 0x0d	; 13
     3b4:	0f b6       	in	r0, 0x3f	; 63
     3b6:	f8 94       	cli
     3b8:	de bf       	out	0x3e, r29	; 62
     3ba:	0f be       	out	0x3f, r0	; 63
     3bc:	cd bf       	out	0x3d, r28	; 61
	// variables initialization
	uint8 temperature = 0;                                              //The average temperature of the room
	uint8 temp_ones = NOT_SELECTED;                                    //The entered right number of the temperature
	uint8 temp_tens = NOT_SELECTED;                                   //The entered left number of the temperature
	uint8 login_mode = NO_MODE;                                      //Store the current user mode admin or guest or not logged in
	uint8 block_mode_flag = FALSE;                                  //is true if the login is blocked or false if not blocked
     3be:	19 82       	std	Y+1, r1	; 0x01
	uint8 key_pressed = NOT_PRESSED;                               //set the first value of the key to 0xFF
	
	//  INITIALIZE 
	LED_vInit(SCL_PIN,SCL_PIN_NUMBER);                        // initializes the TWI PIN
     3c0:	83 e4       	ldi	r24, 0x43	; 67
     3c2:	60 e0       	ldi	r22, 0x00	; 0
     3c4:	0e 94 ce 09 	call	0x139c	; 0x139c <LED_vInit>
	LED_vInit(SDA_PIN,SDA_PIN_NUMBER);                       // initializes the TWI PIN
     3c8:	83 e4       	ldi	r24, 0x43	; 67
     3ca:	61 e0       	ldi	r22, 0x01	; 1
     3cc:	0e 94 ce 09 	call	0x139c	; 0x139c <LED_vInit>
	LCD_vInit();                                            //initializes the LCD screen
     3d0:	0e 94 02 09 	call	0x1204	; 0x1204 <LCD_vInit>
	keypad_vInit();                                        //initializes the keypad
     3d4:	0e 94 22 08 	call	0x1044	; 0x1044 <keypad_vInit>
	SPI_vInitMaster();                                    //initializes the communication protocol of SPI
     3d8:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <SPI_vInitMaster>
	TWI_vMasterInit();                                   //initializes the communication protocol of TWI
     3dc:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <TWI_vMasterInit>
	UART_VoidInit();                                    // initialize the UART
     3e0:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <UART_VoidInit>
	ReceiveCallBack(USART_ISR);
     3e4:	86 e9       	ldi	r24, 0x96	; 150
     3e6:	91 e0       	ldi	r25, 0x01	; 1
     3e8:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <ReceiveCallBack>
	UART_vDisableEmptyInterrupt();
     3ec:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <UART_vDisableEmptyInterrupt>
	sei();
     3f0:	78 94       	sei
	DIO_vsetPINDir('D',0,0);
     3f2:	84 e4       	ldi	r24, 0x44	; 68
     3f4:	60 e0       	ldi	r22, 0x00	; 0
     3f6:	40 e0       	ldi	r20, 0x00	; 0
     3f8:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <DIO_vsetPINDir>
	DIO_vsetPINDir('D',1,1);
     3fc:	84 e4       	ldi	r24, 0x44	; 68
     3fe:	61 e0       	ldi	r22, 0x01	; 1
     400:	41 e0       	ldi	r20, 0x01	; 1
     402:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <DIO_vsetPINDir>
	
	
	// Printing Welcome screen 
	LCD_vSend_string("Welcome Home ");
     406:	8e ed       	ldi	r24, 0xDE	; 222
     408:	90 e0       	ldi	r25, 0x00	; 0
     40a:	0e 94 60 09 	call	0x12c0	; 0x12c0 <LCD_vSend_string>
     40e:	2f ef       	ldi	r18, 0xFF	; 255
     410:	39 e6       	ldi	r19, 0x69	; 105
     412:	48 e1       	ldi	r20, 0x18	; 24
     414:	21 50       	subi	r18, 0x01	; 1
     416:	30 40       	sbci	r19, 0x00	; 0
     418:	40 40       	sbci	r20, 0x00	; 0
     41a:	e1 f7       	brne	.-8      	; 0x414 <main+0x6a>
     41c:	00 c0       	rjmp	.+0      	; 0x41e <main+0x74>
     41e:	00 00       	nop
	_delay_ms(1000);                               //Halt the system for the given time in (ms)
	LCD_clearscreen();                            //remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     420:	0e 94 6f 09 	call	0x12de	; 0x12de <LCD_clearscreen>
	
	 // Setting Admin and Guest passwords if not set 
	//read the state of the the passwords of the admin and guest if both are set or not set
	uint8 STATUS_1;
	uint8 STATUS_2;
	EEPROM_vRead(ADMIN_PASS_STATUS_ADDRESS,&STATUS_1);
     424:	80 ee       	ldi	r24, 0xE0	; 224
     426:	be 01       	movw	r22, r28
     428:	6e 5f       	subi	r22, 0xFE	; 254
     42a:	7f 4f       	sbci	r23, 0xFF	; 255
     42c:	0e 94 95 07 	call	0xf2a	; 0xf2a <EEPROM_vRead>
	EEPROM_vRead(GUEST_PASS_STATUS_ADDRESS,&STATUS_2);
     430:	81 ee       	ldi	r24, 0xE1	; 225
     432:	be 01       	movw	r22, r28
     434:	6d 5f       	subi	r22, 0xFD	; 253
     436:	7f 4f       	sbci	r23, 0xFF	; 255
     438:	0e 94 95 07 	call	0xf2a	; 0xf2a <EEPROM_vRead>
	if ( ( STATUS_1 != PASS_SET) || ( STATUS_2 != PASS_SET) )
     43c:	8a 81       	ldd	r24, Y+2	; 0x02
     43e:	80 35       	cpi	r24, 0x50	; 80
     440:	21 f4       	brne	.+8      	; 0x44a <main+0xa0>
     442:	8b 81       	ldd	r24, Y+3	; 0x03
     444:	80 35       	cpi	r24, 0x50	; 80
     446:	09 f4       	brne	.+2      	; 0x44a <main+0xa0>
     448:	35 c1       	rjmp	.+618    	; 0x6b4 <main+0x30a>
	{
		LCD_vSend_string("Login for");                                          //printing login menu
     44a:	8c ee       	ldi	r24, 0xEC	; 236
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	0e 94 60 09 	call	0x12c0	; 0x12c0 <LCD_vSend_string>
		LCD_movecursor(2,1);                                                   //move the cursor to the second line
     452:	82 e0       	ldi	r24, 0x02	; 2
     454:	61 e0       	ldi	r22, 0x01	; 1
     456:	0e 94 73 09 	call	0x12e6	; 0x12e6 <LCD_movecursor>
		LCD_vSend_string("first time");
     45a:	86 ef       	ldi	r24, 0xF6	; 246
     45c:	90 e0       	ldi	r25, 0x00	; 0
     45e:	0e 94 60 09 	call	0x12c0	; 0x12c0 <LCD_vSend_string>
     462:	8f ef       	ldi	r24, 0xFF	; 255
     464:	99 e6       	ldi	r25, 0x69	; 105
     466:	a8 e1       	ldi	r26, 0x18	; 24
     468:	81 50       	subi	r24, 0x01	; 1
     46a:	90 40       	sbci	r25, 0x00	; 0
     46c:	a0 40       	sbci	r26, 0x00	; 0
     46e:	e1 f7       	brne	.-8      	; 0x468 <main+0xbe>
     470:	00 c0       	rjmp	.+0      	; 0x472 <main+0xc8>
     472:	00 00       	nop
		_delay_ms(1000);                                                     //Halt the system for the given time in (ms)
		LCD_clearscreen();                                                  //remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     474:	0e 94 6f 09 	call	0x12de	; 0x12de <LCD_clearscreen>
		LCD_vSend_string("Set Family pass");                                //printing the set admin password menu
     478:	81 e0       	ldi	r24, 0x01	; 1
     47a:	91 e0       	ldi	r25, 0x01	; 1
     47c:	0e 94 60 09 	call	0x12c0	; 0x12c0 <LCD_vSend_string>
		LCD_movecursor(2,1);
     480:	82 e0       	ldi	r24, 0x02	; 2
     482:	61 e0       	ldi	r22, 0x01	; 1
     484:	0e 94 73 09 	call	0x12e6	; 0x12e6 <LCD_movecursor>
		LCD_vSend_string("Family pass:");
     488:	81 e1       	ldi	r24, 0x11	; 17
     48a:	91 e0       	ldi	r25, 0x01	; 1
     48c:	0e 94 60 09 	call	0x12c0	; 0x12c0 <LCD_vSend_string>

		// setting Admin password 
		uint8 pass_counter=0;                                                         //the counter of the characters of the password
		uint8 pass[PASS_SIZE]={NOT_STORED,NOT_STORED,NOT_STORED,NOT_STORED};         //the array where it stored the password
     490:	8f ef       	ldi	r24, 0xFF	; 255
     492:	88 87       	std	Y+8, r24	; 0x08
     494:	89 87       	std	Y+9, r24	; 0x09
     496:	8a 87       	std	Y+10, r24	; 0x0a
     498:	8b 87       	std	Y+11, r24	; 0x0b
     49a:	8e 01       	movw	r16, r28
     49c:	08 5f       	subi	r16, 0xF8	; 248
     49e:	1f 4f       	sbci	r17, 0xFF	; 255
     4a0:	78 01       	movw	r14, r16
     4a2:	0f 2e       	mov	r0, r31
     4a4:	fc e0       	ldi	r31, 0x0C	; 12
     4a6:	df 2e       	mov	r13, r31
     4a8:	f0 2d       	mov	r31, r0
		while (pass_counter<PASS_SIZE)                                              //loop till the user finish inserting the pass
		{
			key_pressed = NOT_PRESSED;                                            //return the variable that holds the pressed key from keypad to its initial value
			while (key_pressed == NOT_PRESSED)                                   //repeat till the user press any key
			{
				key_pressed = keypad_u8check_press();                          //if the user pressed any button in keypad save the value in key_pressed
     4aa:	0e 94 5f 08 	call	0x10be	; 0x10be <keypad_u8check_press>
		uint8 pass_counter=0;                                                         //the counter of the characters of the password
		uint8 pass[PASS_SIZE]={NOT_STORED,NOT_STORED,NOT_STORED,NOT_STORED};         //the array where it stored the password
		while (pass_counter<PASS_SIZE)                                              //loop till the user finish inserting the pass
		{
			key_pressed = NOT_PRESSED;                                            //return the variable that holds the pressed key from keypad to its initial value
			while (key_pressed == NOT_PRESSED)                                   //repeat till the user press any key
     4ae:	8f 3f       	cpi	r24, 0xFF	; 255
     4b0:	e1 f3       	breq	.-8      	; 0x4aa <main+0x100>
			{
				key_pressed = keypad_u8check_press();                          //if the user pressed any button in keypad save the value in key_pressed
			}

			pass[pass_counter]=key_pressed;                                 //add the entered character to the pass array
     4b2:	d7 01       	movw	r26, r14
     4b4:	8d 93       	st	X+, r24
     4b6:	7d 01       	movw	r14, r26
			LCD_vSend_char(key_pressed);                                   //print the entered character
     4b8:	0e 94 3d 09 	call	0x127a	; 0x127a <LCD_vSend_char>
     4bc:	2f ef       	ldi	r18, 0xFF	; 255
     4be:	32 e5       	ldi	r19, 0x52	; 82
     4c0:	47 e0       	ldi	r20, 0x07	; 7
     4c2:	21 50       	subi	r18, 0x01	; 1
     4c4:	30 40       	sbci	r19, 0x00	; 0
     4c6:	40 40       	sbci	r20, 0x00	; 0
     4c8:	e1 f7       	brne	.-8      	; 0x4c2 <main+0x118>
     4ca:	00 c0       	rjmp	.+0      	; 0x4cc <main+0x122>
     4cc:	00 00       	nop
			_delay_ms(CHARACTER_PREVIEW_TIME);                            //Halt the system for the given time in (ms)
			LCD_movecursor(2,12+pass_counter);                           //move the lcd cursor to the previous location to write the password symbol over the character
     4ce:	82 e0       	ldi	r24, 0x02	; 2
     4d0:	6d 2d       	mov	r22, r13
     4d2:	0e 94 73 09 	call	0x12e6	; 0x12e6 <LCD_movecursor>
			LCD_vSend_char(PASSWORD_SYMBOL);                            // to display (Password sign *)
     4d6:	8a e2       	ldi	r24, 0x2A	; 42
     4d8:	0e 94 3d 09 	call	0x127a	; 0x127a <LCD_vSend_char>
     4dc:	8f ef       	ldi	r24, 0xFF	; 255
     4de:	90 e7       	ldi	r25, 0x70	; 112
     4e0:	a2 e0       	ldi	r26, 0x02	; 2
     4e2:	81 50       	subi	r24, 0x01	; 1
     4e4:	90 40       	sbci	r25, 0x00	; 0
     4e6:	a0 40       	sbci	r26, 0x00	; 0
     4e8:	e1 f7       	brne	.-8      	; 0x4e2 <main+0x138>
     4ea:	00 c0       	rjmp	.+0      	; 0x4ec <main+0x142>
     4ec:	00 00       	nop
     4ee:	d3 94       	inc	r13
		LCD_vSend_string("Family pass:");

		// setting Admin password 
		uint8 pass_counter=0;                                                         //the counter of the characters of the password
		uint8 pass[PASS_SIZE]={NOT_STORED,NOT_STORED,NOT_STORED,NOT_STORED};         //the array where it stored the password
		while (pass_counter<PASS_SIZE)                                              //loop till the user finish inserting the pass
     4f0:	90 e1       	ldi	r25, 0x10	; 16
     4f2:	d9 16       	cp	r13, r25
     4f4:	d1 f6       	brne	.-76     	; 0x4aa <main+0x100>
			LCD_movecursor(2,12+pass_counter);                           //move the lcd cursor to the previous location to write the password symbol over the character
			LCD_vSend_char(PASSWORD_SYMBOL);                            // to display (Password sign *)
			_delay_ms(100);                                            //Halt the system for the given time in (ms)
			pass_counter++;                                           //increase the characters count
		}
		EEPROM_vWrite(EEPROM_ADMIN_ADDRESS_one,pass[0]);                     // saving first number in the first place in EEPROM
     4f6:	82 ee       	ldi	r24, 0xE2	; 226
     4f8:	68 85       	ldd	r22, Y+8	; 0x08
     4fa:	0e 94 b0 07 	call	0xf60	; 0xf60 <EEPROM_vWrite>
     4fe:	2f ef       	ldi	r18, 0xFF	; 255
     500:	30 e7       	ldi	r19, 0x70	; 112
     502:	42 e0       	ldi	r20, 0x02	; 2
     504:	21 50       	subi	r18, 0x01	; 1
     506:	30 40       	sbci	r19, 0x00	; 0
     508:	40 40       	sbci	r20, 0x00	; 0
     50a:	e1 f7       	brne	.-8      	; 0x504 <main+0x15a>
     50c:	00 c0       	rjmp	.+0      	; 0x50e <main+0x164>
     50e:	00 00       	nop
		_delay_ms(100);
		EEPROM_vWrite(EEPROM_ADMIN_ADDRESS_two,pass[1]);                    // saving second number in the second place in EEPROM
     510:	83 ee       	ldi	r24, 0xE3	; 227
     512:	69 85       	ldd	r22, Y+9	; 0x09
     514:	0e 94 b0 07 	call	0xf60	; 0xf60 <EEPROM_vWrite>
     518:	8f ef       	ldi	r24, 0xFF	; 255
     51a:	90 e7       	ldi	r25, 0x70	; 112
     51c:	a2 e0       	ldi	r26, 0x02	; 2
     51e:	81 50       	subi	r24, 0x01	; 1
     520:	90 40       	sbci	r25, 0x00	; 0
     522:	a0 40       	sbci	r26, 0x00	; 0
     524:	e1 f7       	brne	.-8      	; 0x51e <main+0x174>
     526:	00 c0       	rjmp	.+0      	; 0x528 <main+0x17e>
     528:	00 00       	nop
		_delay_ms(100);
		EEPROM_vWrite(EEPROM_ADMIN_ADDRESS_three,pass[2]);				   // saving third number in the third place in EEPROM
     52a:	84 ee       	ldi	r24, 0xE4	; 228
     52c:	6a 85       	ldd	r22, Y+10	; 0x0a
     52e:	0e 94 b0 07 	call	0xf60	; 0xf60 <EEPROM_vWrite>
     532:	2f ef       	ldi	r18, 0xFF	; 255
     534:	30 e7       	ldi	r19, 0x70	; 112
     536:	42 e0       	ldi	r20, 0x02	; 2
     538:	21 50       	subi	r18, 0x01	; 1
     53a:	30 40       	sbci	r19, 0x00	; 0
     53c:	40 40       	sbci	r20, 0x00	; 0
     53e:	e1 f7       	brne	.-8      	; 0x538 <main+0x18e>
     540:	00 c0       	rjmp	.+0      	; 0x542 <main+0x198>
     542:	00 00       	nop
		_delay_ms(100);
		EEPROM_vWrite(EEPROM_ADMIN_ADDRESS_four,pass[3]);                 //save the entire password as a block to the EEPROM
     544:	85 ee       	ldi	r24, 0xE5	; 229
     546:	6b 85       	ldd	r22, Y+11	; 0x0b
     548:	0e 94 b0 07 	call	0xf60	; 0xf60 <EEPROM_vWrite>
     54c:	8f ef       	ldi	r24, 0xFF	; 255
     54e:	90 e7       	ldi	r25, 0x70	; 112
     550:	a2 e0       	ldi	r26, 0x02	; 2
     552:	81 50       	subi	r24, 0x01	; 1
     554:	90 40       	sbci	r25, 0x00	; 0
     556:	a0 40       	sbci	r26, 0x00	; 0
     558:	e1 f7       	brne	.-8      	; 0x552 <main+0x1a8>
     55a:	00 c0       	rjmp	.+0      	; 0x55c <main+0x1b2>
     55c:	00 00       	nop
		_delay_ms(100);
		EEPROM_vWrite(ADMIN_PASS_STATUS_ADDRESS,PASS_SET);              //write the status of pass as it is set
     55e:	80 ee       	ldi	r24, 0xE0	; 224
     560:	60 e5       	ldi	r22, 0x50	; 80
     562:	0e 94 b0 07 	call	0xf60	; 0xf60 <EEPROM_vWrite>
     566:	2f ef       	ldi	r18, 0xFF	; 255
     568:	30 e7       	ldi	r19, 0x70	; 112
     56a:	42 e0       	ldi	r20, 0x02	; 2
     56c:	21 50       	subi	r18, 0x01	; 1
     56e:	30 40       	sbci	r19, 0x00	; 0
     570:	40 40       	sbci	r20, 0x00	; 0
     572:	e1 f7       	brne	.-8      	; 0x56c <main+0x1c2>
     574:	00 c0       	rjmp	.+0      	; 0x576 <main+0x1cc>
     576:	00 00       	nop
		_delay_ms(100);
		LCD_clearscreen();                                            //remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     578:	0e 94 6f 09 	call	0x12de	; 0x12de <LCD_clearscreen>
		LCD_vSend_string("Pass Saved");                              // show pass saved message
     57c:	8e e1       	ldi	r24, 0x1E	; 30
     57e:	91 e0       	ldi	r25, 0x01	; 1
     580:	0e 94 60 09 	call	0x12c0	; 0x12c0 <LCD_vSend_string>
     584:	8f ef       	ldi	r24, 0xFF	; 255
     586:	94 e3       	ldi	r25, 0x34	; 52
     588:	ac e0       	ldi	r26, 0x0C	; 12
     58a:	81 50       	subi	r24, 0x01	; 1
     58c:	90 40       	sbci	r25, 0x00	; 0
     58e:	a0 40       	sbci	r26, 0x00	; 0
     590:	e1 f7       	brne	.-8      	; 0x58a <main+0x1e0>
     592:	00 c0       	rjmp	.+0      	; 0x594 <main+0x1ea>
     594:	00 00       	nop
		_delay_ms(500);                                             //Halt the system for the given time in (ms)
		LCD_clearscreen();                                         //remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     596:	0e 94 6f 09 	call	0x12de	; 0x12de <LCD_clearscreen>

		// setting guest password 
		pass_counter=0;                                                          //reset password counter which count the characters of the pass
		LCD_vSend_string("Set Guest Pass");                                     //printing the set admin password menu
     59a:	89 e2       	ldi	r24, 0x29	; 41
     59c:	91 e0       	ldi	r25, 0x01	; 1
     59e:	0e 94 60 09 	call	0x12c0	; 0x12c0 <LCD_vSend_string>
		LCD_movecursor(2,1);
     5a2:	82 e0       	ldi	r24, 0x02	; 2
     5a4:	61 e0       	ldi	r22, 0x01	; 1
     5a6:	0e 94 73 09 	call	0x12e6	; 0x12e6 <LCD_movecursor>
		LCD_vSend_string("Guest Pass:");
     5aa:	88 e3       	ldi	r24, 0x38	; 56
     5ac:	91 e0       	ldi	r25, 0x01	; 1
     5ae:	0e 94 60 09 	call	0x12c0	; 0x12c0 <LCD_vSend_string>
     5b2:	0f 2e       	mov	r0, r31
     5b4:	fc e0       	ldi	r31, 0x0C	; 12
     5b6:	ef 2e       	mov	r14, r31
     5b8:	f0 2d       	mov	r31, r0
		while (pass_counter<PASS_SIZE)                                        //loop till the user finish inserting the pass
		{
			key_pressed = NOT_PRESSED;                                       //return the variable that holds the pressed key from keypad to its initial value
			while (key_pressed == NOT_PRESSED)                              //repeat till the user press any key
			{
				key_pressed = keypad_u8check_press();                     //if the user pressed any button in keypad save the value in key_pressed
     5ba:	0e 94 5f 08 	call	0x10be	; 0x10be <keypad_u8check_press>
		LCD_movecursor(2,1);
		LCD_vSend_string("Guest Pass:");
		while (pass_counter<PASS_SIZE)                                        //loop till the user finish inserting the pass
		{
			key_pressed = NOT_PRESSED;                                       //return the variable that holds the pressed key from keypad to its initial value
			while (key_pressed == NOT_PRESSED)                              //repeat till the user press any key
     5be:	8f 3f       	cpi	r24, 0xFF	; 255
     5c0:	e1 f3       	breq	.-8      	; 0x5ba <main+0x210>
			{
				key_pressed = keypad_u8check_press();                     //if the user pressed any button in keypad save the value in key_pressed
			}

			pass[pass_counter]=key_pressed;                             //add the entered character to the pass array
     5c2:	d8 01       	movw	r26, r16
     5c4:	8d 93       	st	X+, r24
     5c6:	8d 01       	movw	r16, r26
			LCD_vSend_char(key_pressed);                               //print the entered character
     5c8:	0e 94 3d 09 	call	0x127a	; 0x127a <LCD_vSend_char>
     5cc:	2f ef       	ldi	r18, 0xFF	; 255
     5ce:	32 e5       	ldi	r19, 0x52	; 82
     5d0:	47 e0       	ldi	r20, 0x07	; 7
     5d2:	21 50       	subi	r18, 0x01	; 1
     5d4:	30 40       	sbci	r19, 0x00	; 0
     5d6:	40 40       	sbci	r20, 0x00	; 0
     5d8:	e1 f7       	brne	.-8      	; 0x5d2 <main+0x228>
     5da:	00 c0       	rjmp	.+0      	; 0x5dc <main+0x232>
     5dc:	00 00       	nop
			_delay_ms(CHARACTER_PREVIEW_TIME);                        //Halt the system for the given time in (ms)
			LCD_movecursor(2,12+pass_counter);                       //move the lcd cursor to the previous location to write the password symbol over the character
     5de:	82 e0       	ldi	r24, 0x02	; 2
     5e0:	6e 2d       	mov	r22, r14
     5e2:	0e 94 73 09 	call	0x12e6	; 0x12e6 <LCD_movecursor>
			LCD_vSend_char(PASSWORD_SYMBOL);                        // to display (Password sign *)
     5e6:	8a e2       	ldi	r24, 0x2A	; 42
     5e8:	0e 94 3d 09 	call	0x127a	; 0x127a <LCD_vSend_char>
     5ec:	8f ef       	ldi	r24, 0xFF	; 255
     5ee:	90 e7       	ldi	r25, 0x70	; 112
     5f0:	a2 e0       	ldi	r26, 0x02	; 2
     5f2:	81 50       	subi	r24, 0x01	; 1
     5f4:	90 40       	sbci	r25, 0x00	; 0
     5f6:	a0 40       	sbci	r26, 0x00	; 0
     5f8:	e1 f7       	brne	.-8      	; 0x5f2 <main+0x248>
     5fa:	00 c0       	rjmp	.+0      	; 0x5fc <main+0x252>
     5fc:	00 00       	nop
     5fe:	e3 94       	inc	r14
		// setting guest password 
		pass_counter=0;                                                          //reset password counter which count the characters of the pass
		LCD_vSend_string("Set Guest Pass");                                     //printing the set admin password menu
		LCD_movecursor(2,1);
		LCD_vSend_string("Guest Pass:");
		while (pass_counter<PASS_SIZE)                                        //loop till the user finish inserting the pass
     600:	90 e1       	ldi	r25, 0x10	; 16
     602:	e9 16       	cp	r14, r25
     604:	d1 f6       	brne	.-76     	; 0x5ba <main+0x210>
			LCD_movecursor(2,12+pass_counter);                       //move the lcd cursor to the previous location to write the password symbol over the character
			LCD_vSend_char(PASSWORD_SYMBOL);                        // to display (Password sign *)
			_delay_ms(100);                                        //Halt the system for the given time in (ms)
			pass_counter++;                                       //increase the characters count
		}
		EEPROM_vWrite(EEPROM_GUEST_ADDRESS_one,pass[0]);                     // saving first number in the first place in EEPROM
     606:	86 ee       	ldi	r24, 0xE6	; 230
     608:	68 85       	ldd	r22, Y+8	; 0x08
     60a:	0e 94 b0 07 	call	0xf60	; 0xf60 <EEPROM_vWrite>
     60e:	2f ef       	ldi	r18, 0xFF	; 255
     610:	30 e7       	ldi	r19, 0x70	; 112
     612:	42 e0       	ldi	r20, 0x02	; 2
     614:	21 50       	subi	r18, 0x01	; 1
     616:	30 40       	sbci	r19, 0x00	; 0
     618:	40 40       	sbci	r20, 0x00	; 0
     61a:	e1 f7       	brne	.-8      	; 0x614 <main+0x26a>
     61c:	00 c0       	rjmp	.+0      	; 0x61e <main+0x274>
     61e:	00 00       	nop
		_delay_ms(100);
		EEPROM_vWrite(EEPROM_GUEST_ADDRESS_two,pass[1]);	                // saving second number in the second place in EEPROM
     620:	87 ee       	ldi	r24, 0xE7	; 231
     622:	69 85       	ldd	r22, Y+9	; 0x09
     624:	0e 94 b0 07 	call	0xf60	; 0xf60 <EEPROM_vWrite>
     628:	8f ef       	ldi	r24, 0xFF	; 255
     62a:	90 e7       	ldi	r25, 0x70	; 112
     62c:	a2 e0       	ldi	r26, 0x02	; 2
     62e:	81 50       	subi	r24, 0x01	; 1
     630:	90 40       	sbci	r25, 0x00	; 0
     632:	a0 40       	sbci	r26, 0x00	; 0
     634:	e1 f7       	brne	.-8      	; 0x62e <main+0x284>
     636:	00 c0       	rjmp	.+0      	; 0x638 <main+0x28e>
     638:	00 00       	nop
		_delay_ms(100);
		EEPROM_vWrite(EEPROM_GUEST_ADDRESS_three,pass[2]);                 // saving third number in the third place in EEPROM
     63a:	88 ee       	ldi	r24, 0xE8	; 232
     63c:	6a 85       	ldd	r22, Y+10	; 0x0a
     63e:	0e 94 b0 07 	call	0xf60	; 0xf60 <EEPROM_vWrite>
     642:	2f ef       	ldi	r18, 0xFF	; 255
     644:	30 e7       	ldi	r19, 0x70	; 112
     646:	42 e0       	ldi	r20, 0x02	; 2
     648:	21 50       	subi	r18, 0x01	; 1
     64a:	30 40       	sbci	r19, 0x00	; 0
     64c:	40 40       	sbci	r20, 0x00	; 0
     64e:	e1 f7       	brne	.-8      	; 0x648 <main+0x29e>
     650:	00 c0       	rjmp	.+0      	; 0x652 <main+0x2a8>
     652:	00 00       	nop
		_delay_ms(100);
		EEPROM_vWrite(EEPROM_GUEST_ADDRESS_four,pass[3]);                 //save the entire password as a block to the EEPROM
     654:	89 ee       	ldi	r24, 0xE9	; 233
     656:	6b 85       	ldd	r22, Y+11	; 0x0b
     658:	0e 94 b0 07 	call	0xf60	; 0xf60 <EEPROM_vWrite>
     65c:	8f ef       	ldi	r24, 0xFF	; 255
     65e:	90 e7       	ldi	r25, 0x70	; 112
     660:	a2 e0       	ldi	r26, 0x02	; 2
     662:	81 50       	subi	r24, 0x01	; 1
     664:	90 40       	sbci	r25, 0x00	; 0
     666:	a0 40       	sbci	r26, 0x00	; 0
     668:	e1 f7       	brne	.-8      	; 0x662 <main+0x2b8>
     66a:	00 c0       	rjmp	.+0      	; 0x66c <main+0x2c2>
     66c:	00 00       	nop
		_delay_ms(100);
		EEPROM_vWrite(GUEST_PASS_STATUS_ADDRESS,PASS_SET);               //write the status of pass as it is set
     66e:	81 ee       	ldi	r24, 0xE1	; 225
     670:	60 e5       	ldi	r22, 0x50	; 80
     672:	0e 94 b0 07 	call	0xf60	; 0xf60 <EEPROM_vWrite>
     676:	2f ef       	ldi	r18, 0xFF	; 255
     678:	30 e7       	ldi	r19, 0x70	; 112
     67a:	42 e0       	ldi	r20, 0x02	; 2
     67c:	21 50       	subi	r18, 0x01	; 1
     67e:	30 40       	sbci	r19, 0x00	; 0
     680:	40 40       	sbci	r20, 0x00	; 0
     682:	e1 f7       	brne	.-8      	; 0x67c <main+0x2d2>
     684:	00 c0       	rjmp	.+0      	; 0x686 <main+0x2dc>
     686:	00 00       	nop
		_delay_ms(100);
		LCD_clearscreen();                                              //remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     688:	0e 94 6f 09 	call	0x12de	; 0x12de <LCD_clearscreen>
		LCD_vSend_string("Pass Saved");                                //move the lcd cursor to the previous location
     68c:	8e e1       	ldi	r24, 0x1E	; 30
     68e:	91 e0       	ldi	r25, 0x01	; 1
     690:	0e 94 60 09 	call	0x12c0	; 0x12c0 <LCD_vSend_string>
     694:	8f ef       	ldi	r24, 0xFF	; 255
     696:	94 e3       	ldi	r25, 0x34	; 52
     698:	ac e0       	ldi	r26, 0x0C	; 12
     69a:	81 50       	subi	r24, 0x01	; 1
     69c:	90 40       	sbci	r25, 0x00	; 0
     69e:	a0 40       	sbci	r26, 0x00	; 0
     6a0:	e1 f7       	brne	.-8      	; 0x69a <main+0x2f0>
     6a2:	00 c0       	rjmp	.+0      	; 0x6a4 <main+0x2fa>
     6a4:	00 00       	nop
		_delay_ms(500);                                               //Halt the system for the given time in (ms)
		LCD_clearscreen();                                           //remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     6a6:	0e 94 6f 09 	call	0x12de	; 0x12de <LCD_clearscreen>
		EEPROM_vWrite(LOGIN_BLOCKED_ADDRESS,FALSE);
     6aa:	8a ee       	ldi	r24, 0xEA	; 234
     6ac:	60 e0       	ldi	r22, 0x00	; 0
     6ae:	0e 94 b0 07 	call	0xf60	; 0xf60 <EEPROM_vWrite>
	uint8 STATUS_1;
	uint8 STATUS_2;
	EEPROM_vRead(ADMIN_PASS_STATUS_ADDRESS,&STATUS_1);
	EEPROM_vRead(GUEST_PASS_STATUS_ADDRESS,&STATUS_2);
	if ( ( STATUS_1 != PASS_SET) || ( STATUS_2 != PASS_SET) )
	{
     6b2:	06 c0       	rjmp	.+12     	; 0x6c0 <main+0x316>
	}// ------------------------------------------------> The end of if admin and guest password is set
	
	
	else              //this code of else run only if the system is not running for the first time (ADMIN and GUEST passwords are set)
	{
		 EEPROM_vRead(LOGIN_BLOCKED_ADDRESS,&block_mode_flag);                 //read the blocked location from EEPROM
     6b4:	8a ee       	ldi	r24, 0xEA	; 234
     6b6:	be 01       	movw	r22, r28
     6b8:	6f 5f       	subi	r22, 0xFF	; 255
     6ba:	7f 4f       	sbci	r23, 0xFF	; 255
     6bc:	0e 94 95 07 	call	0xf2a	; 0xf2a <EEPROM_vRead>

		// setting guest password 
		pass_counter=0;                                                          //reset password counter which count the characters of the pass
		LCD_vSend_string("Set Guest Pass");                                     //printing the set admin password menu
		LCD_movecursor(2,1);
		LCD_vSend_string("Guest Pass:");
     6c0:	dd 24       	eor	r13, r13
				case CHECK_ADMIN_MODE:
				while(login_mode!=ADMIN)                                               //this loop is to repeat the login for admin in case of wrong password
				{
					key_pressed = NOT_PRESSED;                                       //return the variable that holds the pressed key from keypad to its initial value
					LCD_clearscreen();                                              //remove all previously printed characters on the LCD and move the cursor to the first column of the first row
					LCD_vSend_string("Family mode");
     6c2:	ab e9       	ldi	r26, 0x9B	; 155
     6c4:	b1 e0       	ldi	r27, 0x01	; 1
     6c6:	ac 87       	std	Y+12, r26	; 0x0c
     6c8:	bd 87       	std	Y+13, r27	; 0x0d
					LCD_movecursor(2,1);
					LCD_vSend_string("Enter Pass:");
     6ca:	0f 2e       	mov	r0, r31
     6cc:	f7 ea       	ldi	r31, 0xA7	; 167
     6ce:	2f 2e       	mov	r2, r31
     6d0:	f1 e0       	ldi	r31, 0x01	; 1
     6d2:	3f 2e       	mov	r3, r31
     6d4:	f0 2d       	mov	r31, r0
				sint8 Block_Counter;
				for (Block_Counter=BLOCK_MODE_TIME;Block_Counter>0;Block_Counter--)  // printing the remaining time for the user to return to enter password
				{
					LCD_clearscreen();
					LCD_movecursor(0,0);
					LCD_vSend_string("Login blocked");
     6d6:	0f 2e       	mov	r0, r31
     6d8:	f4 e5       	ldi	r31, 0x54	; 84
     6da:	8f 2e       	mov	r8, r31
     6dc:	f1 e0       	ldi	r31, 0x01	; 1
     6de:	9f 2e       	mov	r9, r31
     6e0:	f0 2d       	mov	r31, r0
	while (1)//------------------------------------------> The start of the periodic code
	{
		key_pressed = NOT_PRESSED;                            //return the variable that holds the pressed key from keypad to its initial value
		uint8 pass_tries_count=0;                            //stores how many times the user tried to log in to the system and failed
		
		if ( timeout_flag==TRUE )                           //check for timeout
     6e2:	80 91 a0 02 	lds	r24, 0x02A0
     6e6:	81 30       	cpi	r24, 0x01	; 1
     6e8:	29 f5       	brne	.+74     	; 0x734 <main+0x38a>
		{//if timeout flag was raised
			timer0_stop();                                                 //stop the timer that increase the session counter
     6ea:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <timer0_stop>
			session_counter = 0;                                          //clear session counter
     6ee:	10 92 a2 02 	sts	0x02A2, r1
     6f2:	10 92 a1 02 	sts	0x02A1, r1
			timeout_flag=FALSE;                                          //clear time out flag
     6f6:	10 92 a0 02 	sts	0x02A0, r1
			login_mode=NO_MODE;                                         //log the user out
			key_pressed = NOT_PRESSED;                                 //clear the key_pressed to avoid unwanted selection in the menu switch
			LCD_clearscreen();                                      //remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     6fa:	0e 94 6f 09 	call	0x12de	; 0x12de <LCD_clearscreen>
			LCD_vSend_string("Session Timeout");                   //print session timeout message
     6fe:	84 e4       	ldi	r24, 0x44	; 68
     700:	91 e0       	ldi	r25, 0x01	; 1
     702:	0e 94 60 09 	call	0x12c0	; 0x12c0 <LCD_vSend_string>
     706:	2f ef       	ldi	r18, 0xFF	; 255
     708:	39 e6       	ldi	r19, 0x69	; 105
     70a:	48 e1       	ldi	r20, 0x18	; 24
     70c:	21 50       	subi	r18, 0x01	; 1
     70e:	30 40       	sbci	r19, 0x00	; 0
     710:	40 40       	sbci	r20, 0x00	; 0
     712:	e1 f7       	brne	.-8      	; 0x70c <main+0x362>
     714:	00 c0       	rjmp	.+0      	; 0x716 <main+0x36c>
     716:	00 00       	nop
		if ( timeout_flag==TRUE )                           //check for timeout
		{//if timeout flag was raised
			timer0_stop();                                                 //stop the timer that increase the session counter
			session_counter = 0;                                          //clear session counter
			timeout_flag=FALSE;                                          //clear time out flag
			login_mode=NO_MODE;                                         //log the user out
     718:	dd 24       	eor	r13, r13
     71a:	00 e0       	ldi	r16, 0x00	; 0
     71c:	1f ef       	ldi	r17, 0xFF	; 255
				{
					LCD_clearscreen();
					LCD_movecursor(0,0);
					LCD_vSend_string("Login blocked");
					LCD_movecursor(2,1);
					LCD_vSend_string("wait");
     71e:	42 e6       	ldi	r20, 0x62	; 98
     720:	51 e0       	ldi	r21, 0x01	; 1
					LCD_movecursor(2,6);
					LCD_PrintNumber(Block_Counter);
					LCD_movecursor(2,9);
					LCD_vSend_string("seconds");
     722:	0f 2e       	mov	r0, r31
     724:	f7 e6       	ldi	r31, 0x67	; 103
     726:	4f 2e       	mov	r4, r31
     728:	f1 e0       	ldi	r31, 0x01	; 1
     72a:	5f 2e       	mov	r5, r31
     72c:	f0 2d       	mov	r31, r0
     72e:	64 2e       	mov	r6, r20
     730:	c5 2e       	mov	r12, r21
     732:	04 c0       	rjmp	.+8      	; 0x73c <main+0x392>
			key_pressed = NOT_PRESSED;                                 //clear the key_pressed to avoid unwanted selection in the menu switch
			LCD_clearscreen();                                      //remove all previously printed characters on the LCD and move the cursor to the first column of the first row
			LCD_vSend_string("Session Timeout");                   //print session timeout message
			_delay_ms(1000);                                      //Halt the system for the given time in (ms)
		}
		while (login_mode==NO_MODE)                                      //The user can only leave the loop only in case of he was logged in as guest or admin
     734:	dd 20       	and	r13, r13
     736:	89 f3       	breq	.-30     	; 0x71a <main+0x370>
     738:	e7 c1       	rjmp	.+974    	; 0xb08 <__stack+0x2a9>
     73a:	dd 24       	eor	r13, r13
		{
			if(block_mode_flag==TRUE)                                   //if the login process was blocked wait till the end of the block period
     73c:	89 81       	ldd	r24, Y+1	; 0x01
     73e:	81 30       	cpi	r24, 0x01	; 1
     740:	91 f5       	brne	.+100    	; 0x7a6 <main+0x3fc>
			{
				LCD_clearscreen();                                     //remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     742:	0e 94 6f 09 	call	0x12de	; 0x12de <LCD_clearscreen>
				sint8 Block_Counter;
				for (Block_Counter=BLOCK_MODE_TIME;Block_Counter>0;Block_Counter--)  // printing the remaining time for the user to return to enter password
     746:	04 e1       	ldi	r16, 0x14	; 20
				{
					LCD_clearscreen();
     748:	0e 94 6f 09 	call	0x12de	; 0x12de <LCD_clearscreen>
					LCD_movecursor(0,0);
     74c:	80 e0       	ldi	r24, 0x00	; 0
     74e:	60 e0       	ldi	r22, 0x00	; 0
     750:	0e 94 73 09 	call	0x12e6	; 0x12e6 <LCD_movecursor>
					LCD_vSend_string("Login blocked");
     754:	c4 01       	movw	r24, r8
     756:	0e 94 60 09 	call	0x12c0	; 0x12c0 <LCD_vSend_string>
					LCD_movecursor(2,1);
     75a:	82 e0       	ldi	r24, 0x02	; 2
     75c:	61 e0       	ldi	r22, 0x01	; 1
     75e:	0e 94 73 09 	call	0x12e6	; 0x12e6 <LCD_movecursor>
					LCD_vSend_string("wait");
     762:	86 2d       	mov	r24, r6
     764:	9c 2d       	mov	r25, r12
     766:	0e 94 60 09 	call	0x12c0	; 0x12c0 <LCD_vSend_string>
					LCD_movecursor(2,6);
     76a:	82 e0       	ldi	r24, 0x02	; 2
     76c:	66 e0       	ldi	r22, 0x06	; 6
     76e:	0e 94 73 09 	call	0x12e6	; 0x12e6 <LCD_movecursor>
					LCD_PrintNumber(Block_Counter);
     772:	80 2f       	mov	r24, r16
     774:	0e 94 81 09 	call	0x1302	; 0x1302 <LCD_PrintNumber>
					LCD_movecursor(2,9);
     778:	82 e0       	ldi	r24, 0x02	; 2
     77a:	69 e0       	ldi	r22, 0x09	; 9
     77c:	0e 94 73 09 	call	0x12e6	; 0x12e6 <LCD_movecursor>
					LCD_vSend_string("seconds");
     780:	c2 01       	movw	r24, r4
     782:	0e 94 60 09 	call	0x12c0	; 0x12c0 <LCD_vSend_string>
     786:	8f ef       	ldi	r24, 0xFF	; 255
     788:	99 e6       	ldi	r25, 0x69	; 105
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	81 50       	subi	r24, 0x01	; 1
     78e:	90 40       	sbci	r25, 0x00	; 0
     790:	a0 40       	sbci	r26, 0x00	; 0
     792:	e1 f7       	brne	.-8      	; 0x78c <main+0x3e2>
     794:	00 c0       	rjmp	.+0      	; 0x796 <main+0x3ec>
     796:	00 00       	nop
		{
			if(block_mode_flag==TRUE)                                   //if the login process was blocked wait till the end of the block period
			{
				LCD_clearscreen();                                     //remove all previously printed characters on the LCD and move the cursor to the first column of the first row
				sint8 Block_Counter;
				for (Block_Counter=BLOCK_MODE_TIME;Block_Counter>0;Block_Counter--)  // printing the remaining time for the user to return to enter password
     798:	01 50       	subi	r16, 0x01	; 1
     79a:	b1 f6       	brne	.-84     	; 0x748 <main+0x39e>
					LCD_movecursor(2,9);
					LCD_vSend_string("seconds");
					_delay_ms(1000);
				}	                                                          //Halt the system for the given time in (ms)
				pass_tries_count = 0;                                        //Clear the count on number of wrong tries
				block_mode_flag = FALSE;                                    //Disable block of runtime
     79c:	19 82       	std	Y+1, r1	; 0x01
				EEPROM_vWrite(LOGIN_BLOCKED_ADDRESS,FALSE);               //write false at blocked location in EEPROM
     79e:	8a ee       	ldi	r24, 0xEA	; 234
     7a0:	60 e0       	ldi	r22, 0x00	; 0
     7a2:	0e 94 b0 07 	call	0xf60	; 0xf60 <EEPROM_vWrite>
								UART_DATA = 0;
							}
							*/
							//u8FlagGlb=0;
						//}
			LCD_clearscreen();                                                     //remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     7a6:	0e 94 6f 09 	call	0x12de	; 0x12de <LCD_clearscreen>
			LCD_vSend_string("Select mode :");
     7aa:	8f e6       	ldi	r24, 0x6F	; 111
     7ac:	91 e0       	ldi	r25, 0x01	; 1
     7ae:	0e 94 60 09 	call	0x12c0	; 0x12c0 <LCD_vSend_string>
			LCD_movecursor(2,1);
     7b2:	82 e0       	ldi	r24, 0x02	; 2
     7b4:	61 e0       	ldi	r22, 0x01	; 1
     7b6:	0e 94 73 09 	call	0x12e6	; 0x12e6 <LCD_movecursor>
			LCD_vSend_string("0:Family 1:Guest");
     7ba:	8d e7       	ldi	r24, 0x7D	; 125
     7bc:	91 e0       	ldi	r25, 0x01	; 1
     7be:	0e 94 60 09 	call	0x12c0	; 0x12c0 <LCD_vSend_string>
			while(key_pressed==NOT_PRESSED)                                      //wait for the selection of the mode
     7c2:	1f 3f       	cpi	r17, 0xFF	; 255
     7c4:	29 f4       	brne	.+10     	; 0x7d0 <main+0x426>
			{
				
				key_pressed = keypad_u8check_press();                          //if the user pressed any button in keypad save the value in key_pressed
     7c6:	0e 94 5f 08 	call	0x10be	; 0x10be <keypad_u8check_press>
						//}
			LCD_clearscreen();                                                     //remove all previously printed characters on the LCD and move the cursor to the first column of the first row
			LCD_vSend_string("Select mode :");
			LCD_movecursor(2,1);
			LCD_vSend_string("0:Family 1:Guest");
			while(key_pressed==NOT_PRESSED)                                      //wait for the selection of the mode
     7ca:	8f 3f       	cpi	r24, 0xFF	; 255
     7cc:	e1 f3       	breq	.-8      	; 0x7c6 <main+0x41c>
     7ce:	18 2f       	mov	r17, r24
			{
				
				key_pressed = keypad_u8check_press();                          //if the user pressed any button in keypad save the value in key_pressed
			}
			if ( key_pressed!=CHECK_ADMIN_MODE && key_pressed!=CHECK_GUEST_MODE )
     7d0:	81 2f       	mov	r24, r17
     7d2:	80 53       	subi	r24, 0x30	; 48
     7d4:	82 30       	cpi	r24, 0x02	; 2
     7d6:	88 f0       	brcs	.+34     	; 0x7fa <main+0x450>
			{
				LCD_clearscreen();                                          //remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     7d8:	0e 94 6f 09 	call	0x12de	; 0x12de <LCD_clearscreen>
				LCD_vSend_string("Wrong input.");                          //Prints error message on the LCD
     7dc:	8e e8       	ldi	r24, 0x8E	; 142
     7de:	91 e0       	ldi	r25, 0x01	; 1
     7e0:	0e 94 60 09 	call	0x12c0	; 0x12c0 <LCD_vSend_string>
     7e4:	2f ef       	ldi	r18, 0xFF	; 255
     7e6:	39 e6       	ldi	r19, 0x69	; 105
     7e8:	48 e1       	ldi	r20, 0x18	; 24
     7ea:	21 50       	subi	r18, 0x01	; 1
     7ec:	30 40       	sbci	r19, 0x00	; 0
     7ee:	40 40       	sbci	r20, 0x00	; 0
     7f0:	e1 f7       	brne	.-8      	; 0x7ea <main+0x440>
     7f2:	00 c0       	rjmp	.+0      	; 0x7f4 <main+0x44a>
     7f4:	00 00       	nop
				key_pressed = NOT_PRESSED;                                //return the variable that holds the pressed key from keypad to its initial value
     7f6:	1f ef       	ldi	r17, 0xFF	; 255
				_delay_ms(1000);                                         //Halt the system for the given time in (ms)
				continue;                                               //return to the loop of login #while (login_mode==NO_MODE)# line 128
     7f8:	84 c1       	rjmp	.+776    	; 0xb02 <__stack+0x2a3>
			}

			uint8 pass_counter=0;                                                            //counts the entered key of the password from the keypad
			uint8 pass[PASS_SIZE]={NOT_STORED,NOT_STORED,NOT_STORED,NOT_STORED};            //temporarily hold the entire password that will be entered by the user to be check
     7fa:	8f ef       	ldi	r24, 0xFF	; 255
     7fc:	88 87       	std	Y+8, r24	; 0x08
     7fe:	89 87       	std	Y+9, r24	; 0x09
     800:	8a 87       	std	Y+10, r24	; 0x0a
     802:	8b 87       	std	Y+11, r24	; 0x0b
			uint8 stored_pass[PASS_SIZE]={NOT_STORED,NOT_STORED,NOT_STORED,NOT_STORED};    //temporarily hold the entire stored password that is written by the user for the first time
     804:	8c 83       	std	Y+4, r24	; 0x04
     806:	8d 83       	std	Y+5, r24	; 0x05
     808:	8e 83       	std	Y+6, r24	; 0x06
     80a:	8f 83       	std	Y+7, r24	; 0x07
			
			switch(key_pressed)
     80c:	10 33       	cpi	r17, 0x30	; 48
     80e:	41 f0       	breq	.+16     	; 0x820 <main+0x476>
     810:	11 33       	cpi	r17, 0x31	; 49
     812:	09 f0       	breq	.+2      	; 0x816 <main+0x46c>
     814:	76 c1       	rjmp	.+748    	; 0xb02 <__stack+0x2a3>
					}
				}
				break;                                                   //bREAK SWITCH case
				//---------------------------------------------------->  Guest login
				case  CHECK_GUEST_MODE:
				while(login_mode != GUEST)
     816:	32 e0       	ldi	r19, 0x02	; 2
     818:	d3 16       	cp	r13, r19
     81a:	09 f0       	breq	.+2      	; 0x81e <main+0x474>
     81c:	ba c0       	rjmp	.+372    	; 0x992 <__stack+0x133>
     81e:	74 c1       	rjmp	.+744    	; 0xb08 <__stack+0x2a9>
			{
				// -----------------------------------------------> Admin login 
				
				
				case CHECK_ADMIN_MODE:
				while(login_mode!=ADMIN)                                               //this loop is to repeat the login for admin in case of wrong password
     820:	41 e0       	ldi	r20, 0x01	; 1
     822:	d4 16       	cp	r13, r20
     824:	09 f4       	brne	.+2      	; 0x828 <main+0x47e>
     826:	70 c1       	rjmp	.+736    	; 0xb08 <__stack+0x2a9>
     828:	82 e3       	ldi	r24, 0x32	; 50
     82a:	d8 2e       	mov	r13, r24
     82c:	d0 1a       	sub	r13, r16
     82e:	0f 2e       	mov	r0, r31
     830:	fc e0       	ldi	r31, 0x0C	; 12
     832:	bf 2e       	mov	r11, r31
     834:	f0 2d       	mov	r31, r0
						pass_tries_count++;                                      //increase the number of wrong tries to block login if it exceeds the allowed tries
						login_mode = NO_MODE;                                   //set the mode as not logged in
						LCD_clearscreen();                                     //remove all previously printed characters on the LCD and move the cursor to the first column of the first row
						LCD_vSend_string("Wrong Pass");
						LCD_movecursor(2,1);
						LCD_vSend_string("Tries left:");
     836:	7c 2c       	mov	r7, r12
     838:	ac 84       	ldd	r10, Y+12	; 0x0c
     83a:	cd 84       	ldd	r12, Y+13	; 0x0d
				
				case CHECK_ADMIN_MODE:
				while(login_mode!=ADMIN)                                               //this loop is to repeat the login for admin in case of wrong password
				{
					key_pressed = NOT_PRESSED;                                       //return the variable that holds the pressed key from keypad to its initial value
					LCD_clearscreen();                                              //remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     83c:	0e 94 6f 09 	call	0x12de	; 0x12de <LCD_clearscreen>
					LCD_vSend_string("Family mode");
     840:	8a 2d       	mov	r24, r10
     842:	9c 2d       	mov	r25, r12
     844:	0e 94 60 09 	call	0x12c0	; 0x12c0 <LCD_vSend_string>
					LCD_movecursor(2,1);
     848:	82 e0       	ldi	r24, 0x02	; 2
     84a:	61 e0       	ldi	r22, 0x01	; 1
     84c:	0e 94 73 09 	call	0x12e6	; 0x12e6 <LCD_movecursor>
					LCD_vSend_string("Enter Pass:");
     850:	c1 01       	movw	r24, r2
     852:	0e 94 60 09 	call	0x12c0	; 0x12c0 <LCD_vSend_string>
     856:	8f ef       	ldi	r24, 0xFF	; 255
     858:	91 ee       	ldi	r25, 0xE1	; 225
     85a:	a4 e0       	ldi	r26, 0x04	; 4
     85c:	81 50       	subi	r24, 0x01	; 1
     85e:	90 40       	sbci	r25, 0x00	; 0
     860:	a0 40       	sbci	r26, 0x00	; 0
     862:	e1 f7       	brne	.-8      	; 0x85c <main+0x4b2>
     864:	00 c0       	rjmp	.+0      	; 0x866 <__stack+0x7>
     866:	00 00       	nop
     868:	ee 24       	eor	r14, r14
     86a:	ff 24       	eor	r15, r15
     86c:	68 94       	set
     86e:	e3 f8       	bld	r14, 3
     870:	ec 0e       	add	r14, r28
     872:	fd 1e       	adc	r15, r29
     874:	1b 2d       	mov	r17, r11
					pass_counter=0;                                             //counts the number of entered characters
					while(pass_counter<PASS_SIZE)
					{
						while (key_pressed == NOT_PRESSED)                    //repeat till the user press any key
						{
							key_pressed = keypad_u8check_press();           //if the user pressed any button in keypad save the value in key_pressed
     876:	0e 94 5f 08 	call	0x10be	; 0x10be <keypad_u8check_press>
					LCD_vSend_string("Enter Pass:");
					_delay_ms(200);                                              //Halt the system for the given time in (ms)
					pass_counter=0;                                             //counts the number of entered characters
					while(pass_counter<PASS_SIZE)
					{
						while (key_pressed == NOT_PRESSED)                    //repeat till the user press any key
     87a:	8f 3f       	cpi	r24, 0xFF	; 255
     87c:	e1 f3       	breq	.-8      	; 0x876 <__stack+0x17>
						{
							key_pressed = keypad_u8check_press();           //if the user pressed any button in keypad save the value in key_pressed
						}
						pass[pass_counter]=key_pressed;                   //add the entered character to the pass array
     87e:	d7 01       	movw	r26, r14
     880:	8d 93       	st	X+, r24
     882:	7d 01       	movw	r14, r26
						LCD_vSend_char(key_pressed);                     //print the entered character
     884:	0e 94 3d 09 	call	0x127a	; 0x127a <LCD_vSend_char>
     888:	2f ef       	ldi	r18, 0xFF	; 255
     88a:	32 e5       	ldi	r19, 0x52	; 82
     88c:	47 e0       	ldi	r20, 0x07	; 7
     88e:	21 50       	subi	r18, 0x01	; 1
     890:	30 40       	sbci	r19, 0x00	; 0
     892:	40 40       	sbci	r20, 0x00	; 0
     894:	e1 f7       	brne	.-8      	; 0x88e <__stack+0x2f>
     896:	00 c0       	rjmp	.+0      	; 0x898 <__stack+0x39>
     898:	00 00       	nop
						_delay_ms(CHARACTER_PREVIEW_TIME);              //Halt the system for the given time in (ms)
						LCD_movecursor(2,12+pass_counter);             //move the cursor of the lcd screen to the previous location
     89a:	82 e0       	ldi	r24, 0x02	; 2
     89c:	61 2f       	mov	r22, r17
     89e:	0e 94 73 09 	call	0x12e6	; 0x12e6 <LCD_movecursor>
						LCD_vSend_char(PASSWORD_SYMBOL);              // to display (Password sign *)
     8a2:	8a e2       	ldi	r24, 0x2A	; 42
     8a4:	0e 94 3d 09 	call	0x127a	; 0x127a <LCD_vSend_char>
     8a8:	8f ef       	ldi	r24, 0xFF	; 255
     8aa:	90 e7       	ldi	r25, 0x70	; 112
     8ac:	a2 e0       	ldi	r26, 0x02	; 2
     8ae:	81 50       	subi	r24, 0x01	; 1
     8b0:	90 40       	sbci	r25, 0x00	; 0
     8b2:	a0 40       	sbci	r26, 0x00	; 0
     8b4:	e1 f7       	brne	.-8      	; 0x8ae <__stack+0x4f>
     8b6:	00 c0       	rjmp	.+0      	; 0x8b8 <__stack+0x59>
     8b8:	00 00       	nop
     8ba:	1f 5f       	subi	r17, 0xFF	; 255
					LCD_vSend_string("Family mode");
					LCD_movecursor(2,1);
					LCD_vSend_string("Enter Pass:");
					_delay_ms(200);                                              //Halt the system for the given time in (ms)
					pass_counter=0;                                             //counts the number of entered characters
					while(pass_counter<PASS_SIZE)
     8bc:	10 31       	cpi	r17, 0x10	; 16
     8be:	d9 f6       	brne	.-74     	; 0x876 <__stack+0x17>
						LCD_vSend_char(PASSWORD_SYMBOL);              // to display (Password sign *)
						_delay_ms(100);                              //Halt the system for the given time in (ms)
						pass_counter++;                             //increase the password counter that count the characters of the pass
						key_pressed = NOT_PRESSED;                 //return the variable that holds the pressed key from keypad to its initial value
					}
					EEPROM_vRead(EEPROM_ADMIN_ADDRESS_one,&stored_pass[0]);            //read the stored pass from the EEPROM
     8c0:	82 ee       	ldi	r24, 0xE2	; 226
     8c2:	be 01       	movw	r22, r28
     8c4:	6c 5f       	subi	r22, 0xFC	; 252
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 95 07 	call	0xf2a	; 0xf2a <EEPROM_vRead>
					EEPROM_vRead(EEPROM_ADMIN_ADDRESS_two,&stored_pass[1]);           //read the stored pass from the EEPROM
     8cc:	83 ee       	ldi	r24, 0xE3	; 227
     8ce:	be 01       	movw	r22, r28
     8d0:	6b 5f       	subi	r22, 0xFB	; 251
     8d2:	7f 4f       	sbci	r23, 0xFF	; 255
     8d4:	0e 94 95 07 	call	0xf2a	; 0xf2a <EEPROM_vRead>
					EEPROM_vRead(EEPROM_ADMIN_ADDRESS_three,&stored_pass[2]);        //read the stored pass from the EEPROM
     8d8:	84 ee       	ldi	r24, 0xE4	; 228
     8da:	be 01       	movw	r22, r28
     8dc:	6a 5f       	subi	r22, 0xFA	; 250
     8de:	7f 4f       	sbci	r23, 0xFF	; 255
     8e0:	0e 94 95 07 	call	0xf2a	; 0xf2a <EEPROM_vRead>
					EEPROM_vRead(EEPROM_ADMIN_ADDRESS_four,&stored_pass[3]);        //read the stored pass from the EEPROM
     8e4:	85 ee       	ldi	r24, 0xE5	; 229
     8e6:	be 01       	movw	r22, r28
     8e8:	69 5f       	subi	r22, 0xF9	; 249
     8ea:	7f 4f       	sbci	r23, 0xFF	; 255
     8ec:	0e 94 95 07 	call	0xf2a	; 0xf2a <EEPROM_vRead>

					//------------------------------------------------> compare passwords
					if ((ui8ComparePass(pass,stored_pass,PASS_SIZE)) == TRUE)   //in case of right password
     8f0:	ce 01       	movw	r24, r28
     8f2:	08 96       	adiw	r24, 0x08	; 8
     8f4:	be 01       	movw	r22, r28
     8f6:	6c 5f       	subi	r22, 0xFC	; 252
     8f8:	7f 4f       	sbci	r23, 0xFF	; 255
     8fa:	44 e0       	ldi	r20, 0x04	; 4
     8fc:	0e 94 49 00 	call	0x92	; 0x92 <ui8ComparePass>
     900:	81 30       	cpi	r24, 0x01	; 1
     902:	f1 f4       	brne	.+60     	; 0x940 <__stack+0xe1>
					{
						login_mode = ADMIN;                                               //set the login mode to admin mode
						pass_tries_count=0;                                              //clear the counter of wrong tries
						LCD_clearscreen();                                              //remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     904:	0e 94 6f 09 	call	0x12de	; 0x12de <LCD_clearscreen>
						LCD_vSend_string("Right pass");
     908:	83 eb       	ldi	r24, 0xB3	; 179
     90a:	91 e0       	ldi	r25, 0x01	; 1
     90c:	0e 94 60 09 	call	0x12c0	; 0x12c0 <LCD_vSend_string>
						LCD_movecursor(2,1);
     910:	82 e0       	ldi	r24, 0x02	; 2
     912:	61 e0       	ldi	r22, 0x01	; 1
     914:	0e 94 73 09 	call	0x12e6	; 0x12e6 <LCD_movecursor>
						LCD_vSend_string("Family mode");
     918:	8b e9       	ldi	r24, 0x9B	; 155
     91a:	91 e0       	ldi	r25, 0x01	; 1
     91c:	0e 94 60 09 	call	0x12c0	; 0x12c0 <LCD_vSend_string>
     920:	2f ef       	ldi	r18, 0xFF	; 255
     922:	34 e3       	ldi	r19, 0x34	; 52
     924:	4c e0       	ldi	r20, 0x0C	; 12
     926:	21 50       	subi	r18, 0x01	; 1
     928:	30 40       	sbci	r19, 0x00	; 0
     92a:	40 40       	sbci	r20, 0x00	; 0
     92c:	e1 f7       	brne	.-8      	; 0x926 <__stack+0xc7>
     92e:	00 c0       	rjmp	.+0      	; 0x930 <__stack+0xd1>
     930:	00 00       	nop
						_delay_ms(500);                                              //Halt the system for the given time in (ms)
						timer0_initializeCTC();                                    //start the timer that counts the session time
     932:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <timer0_initializeCTC>
						LCD_clearscreen();                                        //remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     936:	0e 94 6f 09 	call	0x12de	; 0x12de <LCD_clearscreen>
					EEPROM_vRead(EEPROM_ADMIN_ADDRESS_four,&stored_pass[3]);        //read the stored pass from the EEPROM

					//------------------------------------------------> compare passwords
					if ((ui8ComparePass(pass,stored_pass,PASS_SIZE)) == TRUE)   //in case of right password
					{
						login_mode = ADMIN;                                               //set the login mode to admin mode
     93a:	dd 24       	eor	r13, r13
     93c:	d3 94       	inc	r13
     93e:	e4 c0       	rjmp	.+456    	; 0xb08 <__stack+0x2a9>
						timer0_initializeCTC();                                    //start the timer that counts the session time
						LCD_clearscreen();                                        //remove all previously printed characters on the LCD and move the cursor to the first column of the first row
					}
					else                                                        //in case of wrong password
					{
						pass_tries_count++;                                      //increase the number of wrong tries to block login if it exceeds the allowed tries
     940:	0f 5f       	subi	r16, 0xFF	; 255
						login_mode = NO_MODE;                                   //set the mode as not logged in
						LCD_clearscreen();                                     //remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     942:	0e 94 6f 09 	call	0x12de	; 0x12de <LCD_clearscreen>
						LCD_vSend_string("Wrong Pass");
     946:	8e eb       	ldi	r24, 0xBE	; 190
     948:	91 e0       	ldi	r25, 0x01	; 1
     94a:	0e 94 60 09 	call	0x12c0	; 0x12c0 <LCD_vSend_string>
						LCD_movecursor(2,1);
     94e:	82 e0       	ldi	r24, 0x02	; 2
     950:	61 e0       	ldi	r22, 0x01	; 1
     952:	0e 94 73 09 	call	0x12e6	; 0x12e6 <LCD_movecursor>
						LCD_vSend_string("Tries left:");
     956:	89 ec       	ldi	r24, 0xC9	; 201
     958:	91 e0       	ldi	r25, 0x01	; 1
     95a:	0e 94 60 09 	call	0x12c0	; 0x12c0 <LCD_vSend_string>
						LCD_vSend_char(TRIES_ALLOWED-pass_tries_count+ASCII_ZERO);//print the number of tries left before block mode to be activated
     95e:	8d 2d       	mov	r24, r13
     960:	0e 94 3d 09 	call	0x127a	; 0x127a <LCD_vSend_char>
     964:	8f ef       	ldi	r24, 0xFF	; 255
     966:	99 e6       	ldi	r25, 0x69	; 105
     968:	a8 e1       	ldi	r26, 0x18	; 24
     96a:	81 50       	subi	r24, 0x01	; 1
     96c:	90 40       	sbci	r25, 0x00	; 0
     96e:	a0 40       	sbci	r26, 0x00	; 0
     970:	e1 f7       	brne	.-8      	; 0x96a <__stack+0x10b>
     972:	00 c0       	rjmp	.+0      	; 0x974 <__stack+0x115>
     974:	00 00       	nop
						_delay_ms(1000);                                         //Halt the system for the given time in (ms)
						LCD_clearscreen();                                      //remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     976:	0e 94 6f 09 	call	0x12de	; 0x12de <LCD_clearscreen>
     97a:	da 94       	dec	r13
						if (pass_tries_count>=TRIES_ALLOWED)                   //if the condition of the block mode is true
     97c:	03 30       	cpi	r16, 0x03	; 3
     97e:	08 f4       	brcc	.+2      	; 0x982 <__stack+0x123>
     980:	5d cf       	rjmp	.-326    	; 0x83c <main+0x492>
     982:	c7 2c       	mov	r12, r7
						{
							EEPROM_vWrite(LOGIN_BLOCKED_ADDRESS,TRUE);       //write to the EEPROM TRUE to the the block mode address
     984:	8a ee       	ldi	r24, 0xEA	; 234
     986:	61 e0       	ldi	r22, 0x01	; 1
     988:	0e 94 b0 07 	call	0xf60	; 0xf60 <EEPROM_vWrite>
							block_mode_flag = TRUE;                         //turn on block mode
     98c:	81 e0       	ldi	r24, 0x01	; 1
     98e:	89 83       	std	Y+1, r24	; 0x01
							break;                                         //break the loop of admin login #while(login_mode!=ADMIN)# at line 169
     990:	99 c2       	rjmp	.+1330   	; 0xec4 <__stack+0x665>
     992:	82 e3       	ldi	r24, 0x32	; 50
     994:	d8 2e       	mov	r13, r24
     996:	d0 1a       	sub	r13, r16
				case  CHECK_GUEST_MODE:
				while(login_mode != GUEST)
				{
					key_pressed = NOT_PRESSED;                                        //return the variable that holds the pressed key from keypad to its initial value
					LCD_clearscreen();                                               //remove all previously printed characters on the LCD and move the cursor to the first column of the first row
					LCD_vSend_string("Guest mode");
     998:	0f 2e       	mov	r0, r31
     99a:	f5 ed       	ldi	r31, 0xD5	; 213
     99c:	af 2e       	mov	r10, r31
     99e:	f1 e0       	ldi	r31, 0x01	; 1
     9a0:	bf 2e       	mov	r11, r31
     9a2:	f0 2d       	mov	r31, r0
     9a4:	0f 2e       	mov	r0, r31
     9a6:	fc e0       	ldi	r31, 0x0C	; 12
     9a8:	7f 2e       	mov	r7, r31
     9aa:	f0 2d       	mov	r31, r0
				//---------------------------------------------------->  Guest login
				case  CHECK_GUEST_MODE:
				while(login_mode != GUEST)
				{
					key_pressed = NOT_PRESSED;                                        //return the variable that holds the pressed key from keypad to its initial value
					LCD_clearscreen();                                               //remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     9ac:	0e 94 6f 09 	call	0x12de	; 0x12de <LCD_clearscreen>
					LCD_vSend_string("Guest mode");
     9b0:	c5 01       	movw	r24, r10
     9b2:	0e 94 60 09 	call	0x12c0	; 0x12c0 <LCD_vSend_string>
					LCD_movecursor(2,1);
     9b6:	82 e0       	ldi	r24, 0x02	; 2
     9b8:	61 e0       	ldi	r22, 0x01	; 1
     9ba:	0e 94 73 09 	call	0x12e6	; 0x12e6 <LCD_movecursor>
					LCD_vSend_string("Enter pass:");
     9be:	80 ee       	ldi	r24, 0xE0	; 224
     9c0:	91 e0       	ldi	r25, 0x01	; 1
     9c2:	0e 94 60 09 	call	0x12c0	; 0x12c0 <LCD_vSend_string>
     9c6:	2f ef       	ldi	r18, 0xFF	; 255
     9c8:	31 ee       	ldi	r19, 0xE1	; 225
     9ca:	44 e0       	ldi	r20, 0x04	; 4
     9cc:	21 50       	subi	r18, 0x01	; 1
     9ce:	30 40       	sbci	r19, 0x00	; 0
     9d0:	40 40       	sbci	r20, 0x00	; 0
     9d2:	e1 f7       	brne	.-8      	; 0x9cc <__stack+0x16d>
     9d4:	00 c0       	rjmp	.+0      	; 0x9d6 <__stack+0x177>
     9d6:	00 00       	nop
     9d8:	ee 24       	eor	r14, r14
     9da:	ff 24       	eor	r15, r15
     9dc:	68 94       	set
     9de:	e3 f8       	bld	r14, 3
     9e0:	ec 0e       	add	r14, r28
     9e2:	fd 1e       	adc	r15, r29
     9e4:	17 2d       	mov	r17, r7
					pass_counter=0;                                              //counts the number of entered characters
					while(pass_counter<PASS_SIZE)
					{
						while (key_pressed == NOT_PRESSED)                      //repeat till the user press any key
						{
							key_pressed = keypad_u8check_press();              //if the user pressed any button in keypad save the value in key_pressed
     9e6:	0e 94 5f 08 	call	0x10be	; 0x10be <keypad_u8check_press>
					LCD_vSend_string("Enter pass:");
					_delay_ms(200);                                               //Halt the system for the given time in (ms)
					pass_counter=0;                                              //counts the number of entered characters
					while(pass_counter<PASS_SIZE)
					{
						while (key_pressed == NOT_PRESSED)                      //repeat till the user press any key
     9ea:	8f 3f       	cpi	r24, 0xFF	; 255
     9ec:	e1 f3       	breq	.-8      	; 0x9e6 <__stack+0x187>
						{
							key_pressed = keypad_u8check_press();              //if the user pressed any button in keypad save the value in key_pressed
						}
						pass[pass_counter]=key_pressed;                       //add the pressed key to the password string
     9ee:	d7 01       	movw	r26, r14
     9f0:	8d 93       	st	X+, r24
     9f2:	7d 01       	movw	r14, r26
						LCD_vSend_char(key_pressed);                         //print the entered character
     9f4:	0e 94 3d 09 	call	0x127a	; 0x127a <LCD_vSend_char>
     9f8:	2f ef       	ldi	r18, 0xFF	; 255
     9fa:	32 e5       	ldi	r19, 0x52	; 82
     9fc:	47 e0       	ldi	r20, 0x07	; 7
     9fe:	21 50       	subi	r18, 0x01	; 1
     a00:	30 40       	sbci	r19, 0x00	; 0
     a02:	40 40       	sbci	r20, 0x00	; 0
     a04:	e1 f7       	brne	.-8      	; 0x9fe <__stack+0x19f>
     a06:	00 c0       	rjmp	.+0      	; 0xa08 <__stack+0x1a9>
     a08:	00 00       	nop
						_delay_ms(CHARACTER_PREVIEW_TIME);                  //Halt the system for the given time in (ms)
						LCD_movecursor(2,12+pass_counter);                 //return the cursor to the location of the previous character to replace it with the password sign
     a0a:	82 e0       	ldi	r24, 0x02	; 2
     a0c:	61 2f       	mov	r22, r17
     a0e:	0e 94 73 09 	call	0x12e6	; 0x12e6 <LCD_movecursor>
						LCD_vSend_char(PASSWORD_SYMBOL);                  // to display (Password sign *)
     a12:	8a e2       	ldi	r24, 0x2A	; 42
     a14:	0e 94 3d 09 	call	0x127a	; 0x127a <LCD_vSend_char>
     a18:	8f ef       	ldi	r24, 0xFF	; 255
     a1a:	90 e7       	ldi	r25, 0x70	; 112
     a1c:	a2 e0       	ldi	r26, 0x02	; 2
     a1e:	81 50       	subi	r24, 0x01	; 1
     a20:	90 40       	sbci	r25, 0x00	; 0
     a22:	a0 40       	sbci	r26, 0x00	; 0
     a24:	e1 f7       	brne	.-8      	; 0xa1e <__stack+0x1bf>
     a26:	00 c0       	rjmp	.+0      	; 0xa28 <__stack+0x1c9>
     a28:	00 00       	nop
     a2a:	1f 5f       	subi	r17, 0xFF	; 255
					LCD_vSend_string("Guest mode");
					LCD_movecursor(2,1);
					LCD_vSend_string("Enter pass:");
					_delay_ms(200);                                               //Halt the system for the given time in (ms)
					pass_counter=0;                                              //counts the number of entered characters
					while(pass_counter<PASS_SIZE)
     a2c:	10 31       	cpi	r17, 0x10	; 16
     a2e:	d9 f6       	brne	.-74     	; 0x9e6 <__stack+0x187>
						LCD_vSend_char(PASSWORD_SYMBOL);                  // to display (Password sign *)
						_delay_ms(100);                                  //Halt the system for the given time in (ms)
						pass_counter++;                                 //increase the password counter that count the characters of the pass
						key_pressed = NOT_PRESSED;                     //return the variable that holds the pressed key from keypad to its initial value
					}
					EEPROM_vRead(EEPROM_GUEST_ADDRESS_one,&stored_pass[0]);					//read the stored pass from the EEPROM
     a30:	86 ee       	ldi	r24, 0xE6	; 230
     a32:	be 01       	movw	r22, r28
     a34:	6c 5f       	subi	r22, 0xFC	; 252
     a36:	7f 4f       	sbci	r23, 0xFF	; 255
     a38:	0e 94 95 07 	call	0xf2a	; 0xf2a <EEPROM_vRead>
					EEPROM_vRead(EEPROM_GUEST_ADDRESS_two,&stored_pass[1]);                //read the stored pass from the EEPROM
     a3c:	87 ee       	ldi	r24, 0xE7	; 231
     a3e:	be 01       	movw	r22, r28
     a40:	6b 5f       	subi	r22, 0xFB	; 251
     a42:	7f 4f       	sbci	r23, 0xFF	; 255
     a44:	0e 94 95 07 	call	0xf2a	; 0xf2a <EEPROM_vRead>
					EEPROM_vRead(EEPROM_GUEST_ADDRESS_three,&stored_pass[2]);             //read the stored pass from the EEPROM
     a48:	88 ee       	ldi	r24, 0xE8	; 232
     a4a:	be 01       	movw	r22, r28
     a4c:	6a 5f       	subi	r22, 0xFA	; 250
     a4e:	7f 4f       	sbci	r23, 0xFF	; 255
     a50:	0e 94 95 07 	call	0xf2a	; 0xf2a <EEPROM_vRead>
					EEPROM_vRead(EEPROM_GUEST_ADDRESS_four,&stored_pass[3]);             //read the stored pass from the EEPROM
     a54:	89 ee       	ldi	r24, 0xE9	; 233
     a56:	be 01       	movw	r22, r28
     a58:	69 5f       	subi	r22, 0xF9	; 249
     a5a:	7f 4f       	sbci	r23, 0xFF	; 255
     a5c:	0e 94 95 07 	call	0xf2a	; 0xf2a <EEPROM_vRead>

					//------------------------------------------->      compare passwords
					if (ui8ComparePass(pass,stored_pass,PASS_SIZE)==TRUE)             //in case of right password
     a60:	ce 01       	movw	r24, r28
     a62:	08 96       	adiw	r24, 0x08	; 8
     a64:	be 01       	movw	r22, r28
     a66:	6c 5f       	subi	r22, 0xFC	; 252
     a68:	7f 4f       	sbci	r23, 0xFF	; 255
     a6a:	44 e0       	ldi	r20, 0x04	; 4
     a6c:	0e 94 49 00 	call	0x92	; 0x92 <ui8ComparePass>
     a70:	81 30       	cpi	r24, 0x01	; 1
     a72:	f9 f4       	brne	.+62     	; 0xab2 <__stack+0x253>
					{
						login_mode = GUEST;
						pass_tries_count=0;                                         //clear the counter of wrong tries
						LCD_clearscreen();                                         //remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     a74:	0e 94 6f 09 	call	0x12de	; 0x12de <LCD_clearscreen>
						LCD_vSend_string("Right pass");
     a78:	83 eb       	ldi	r24, 0xB3	; 179
     a7a:	91 e0       	ldi	r25, 0x01	; 1
     a7c:	0e 94 60 09 	call	0x12c0	; 0x12c0 <LCD_vSend_string>
						LCD_movecursor(2,1);
     a80:	82 e0       	ldi	r24, 0x02	; 2
     a82:	61 e0       	ldi	r22, 0x01	; 1
     a84:	0e 94 73 09 	call	0x12e6	; 0x12e6 <LCD_movecursor>
						LCD_vSend_string("Guest mode");
     a88:	85 ed       	ldi	r24, 0xD5	; 213
     a8a:	91 e0       	ldi	r25, 0x01	; 1
     a8c:	0e 94 60 09 	call	0x12c0	; 0x12c0 <LCD_vSend_string>
     a90:	2f ef       	ldi	r18, 0xFF	; 255
     a92:	34 e3       	ldi	r19, 0x34	; 52
     a94:	4c e0       	ldi	r20, 0x0C	; 12
     a96:	21 50       	subi	r18, 0x01	; 1
     a98:	30 40       	sbci	r19, 0x00	; 0
     a9a:	40 40       	sbci	r20, 0x00	; 0
     a9c:	e1 f7       	brne	.-8      	; 0xa96 <__stack+0x237>
     a9e:	00 c0       	rjmp	.+0      	; 0xaa0 <__stack+0x241>
     aa0:	00 00       	nop
						_delay_ms(500);                                          //Halt the system for the given time in (ms)
						timer0_initializeCTC();                                //start the counter of the session
     aa2:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <timer0_initializeCTC>
						LCD_clearscreen();                                    //remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     aa6:	0e 94 6f 09 	call	0x12de	; 0x12de <LCD_clearscreen>
					EEPROM_vRead(EEPROM_GUEST_ADDRESS_four,&stored_pass[3]);             //read the stored pass from the EEPROM

					//------------------------------------------->      compare passwords
					if (ui8ComparePass(pass,stored_pass,PASS_SIZE)==TRUE)             //in case of right password
					{
						login_mode = GUEST;
     aaa:	dd 24       	eor	r13, r13
     aac:	68 94       	set
     aae:	d1 f8       	bld	r13, 1
     ab0:	2b c0       	rjmp	.+86     	; 0xb08 <__stack+0x2a9>
						timer0_initializeCTC();                                //start the counter of the session
						LCD_clearscreen();                                    //remove all previously printed characters on the LCD and move the cursor to the first column of the first row
					}
					else                                                            //in case of wrong password
					{
						pass_tries_count++;                                         //increase the number of wrong tries to block login if it exceeds the allowed tries
     ab2:	0f 5f       	subi	r16, 0xFF	; 255
						login_mode = NO_MODE;                                      //set the mode as not logged in
						LCD_clearscreen();                                        //remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     ab4:	0e 94 6f 09 	call	0x12de	; 0x12de <LCD_clearscreen>
						LCD_vSend_string("Wrong pass");
     ab8:	8c ee       	ldi	r24, 0xEC	; 236
     aba:	91 e0       	ldi	r25, 0x01	; 1
     abc:	0e 94 60 09 	call	0x12c0	; 0x12c0 <LCD_vSend_string>
						LCD_movecursor(2,1);
     ac0:	82 e0       	ldi	r24, 0x02	; 2
     ac2:	61 e0       	ldi	r22, 0x01	; 1
     ac4:	0e 94 73 09 	call	0x12e6	; 0x12e6 <LCD_movecursor>
						LCD_vSend_string("Tries left:");
     ac8:	89 ec       	ldi	r24, 0xC9	; 201
     aca:	91 e0       	ldi	r25, 0x01	; 1
     acc:	0e 94 60 09 	call	0x12c0	; 0x12c0 <LCD_vSend_string>
						LCD_vSend_char(TRIES_ALLOWED-pass_tries_count+ASCII_ZERO);               //print the number of tries left before block mode to be activated
     ad0:	8d 2d       	mov	r24, r13
     ad2:	0e 94 3d 09 	call	0x127a	; 0x127a <LCD_vSend_char>
     ad6:	8f ef       	ldi	r24, 0xFF	; 255
     ad8:	99 e6       	ldi	r25, 0x69	; 105
     ada:	a8 e1       	ldi	r26, 0x18	; 24
     adc:	81 50       	subi	r24, 0x01	; 1
     ade:	90 40       	sbci	r25, 0x00	; 0
     ae0:	a0 40       	sbci	r26, 0x00	; 0
     ae2:	e1 f7       	brne	.-8      	; 0xadc <__stack+0x27d>
     ae4:	00 c0       	rjmp	.+0      	; 0xae6 <__stack+0x287>
     ae6:	00 00       	nop
						_delay_ms(1000);                                                        //Halt the system for the given time in (ms)
						LCD_clearscreen();                                                     //remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     ae8:	0e 94 6f 09 	call	0x12de	; 0x12de <LCD_clearscreen>
     aec:	da 94       	dec	r13
						if (pass_tries_count>=TRIES_ALLOWED)                                  //if the condition of the block mode is true
     aee:	03 30       	cpi	r16, 0x03	; 3
     af0:	08 f4       	brcc	.+2      	; 0xaf4 <__stack+0x295>
     af2:	5c cf       	rjmp	.-328    	; 0x9ac <__stack+0x14d>
						{
							EEPROM_vWrite(LOGIN_BLOCKED_ADDRESS,TRUE);                      //write to the EEPROM TRUE to the the block mode address
     af4:	8a ee       	ldi	r24, 0xEA	; 234
     af6:	61 e0       	ldi	r22, 0x01	; 1
     af8:	0e 94 b0 07 	call	0xf60	; 0xf60 <EEPROM_vWrite>
							block_mode_flag = TRUE;                                        //turn on block mode
     afc:	81 e0       	ldi	r24, 0x01	; 1
     afe:	89 83       	std	Y+1, r24	; 0x01
							break;                                                        //breaks the loop of insert guest password #while(login_mode != GUEST)# line 228
     b00:	e1 c1       	rjmp	.+962    	; 0xec4 <__stack+0x665>
			key_pressed = NOT_PRESSED;                                 //clear the key_pressed to avoid unwanted selection in the menu switch
			LCD_clearscreen();                                      //remove all previously printed characters on the LCD and move the cursor to the first column of the first row
			LCD_vSend_string("Session Timeout");                   //print session timeout message
			_delay_ms(1000);                                      //Halt the system for the given time in (ms)
		}
		while (login_mode==NO_MODE)                                      //The user can only leave the loop only in case of he was logged in as guest or admin
     b02:	dd 20       	and	r13, r13
     b04:	09 f4       	brne	.+2      	; 0xb08 <__stack+0x2a9>
     b06:	19 ce       	rjmp	.-974    	; 0x73a <main+0x390>
					SPI_ui8TransmitRecive(temperature);                          //send the entered temperature
					LCD_clearscreen();                                          //remove all previously printed characters on the LCD and move the cursor to the first column of the first row
					LCD_vSend_string("Temperature Sent");                      //show the message
					_delay_ms(500);                                           //Halt the system for the given time in (ms)
				}
				show_menu = AIRCONDITIONING_MENU;                           //Set the next menu to be shown to air conditioning menu
     b08:	01 e0       	ldi	r16, 0x01	; 1
						show_menu = MORE_MENU;                                        //Set the next menu to be shown to more menu
					}
					else if(key_pressed != NOT_PRESSED)                             //show wrong input message if the user pressed wrong key
					{
						LCD_clearscreen();                                        //remove all previously printed characters on the LCD and move the cursor to the first column of the first row
						LCD_vSend_string("Wrong input");                         //print error message
     b0a:	0f 2e       	mov	r0, r31
     b0c:	ff e1       	ldi	r31, 0x1F	; 31
     b0e:	ef 2e       	mov	r14, r31
     b10:	f2 e0       	ldi	r31, 0x02	; 2
     b12:	ff 2e       	mov	r15, r31
     b14:	f0 2d       	mov	r31, r0
     b16:	d0 c1       	rjmp	.+928    	; 0xeb8 <__stack+0x659>
		
		
		while(timeout_flag!=TRUE)                                            //Show the menu in case of the time is not out
		{
			key_pressed = NOT_PRESSED;                                     //Set the key pressed by the user to its default value
			switch (show_menu)
     b18:	05 30       	cpi	r16, 0x05	; 5
     b1a:	09 f4       	brne	.+2      	; 0xb1e <__stack+0x2bf>
     b1c:	14 c1       	rjmp	.+552    	; 0xd46 <__stack+0x4e7>
     b1e:	06 30       	cpi	r16, 0x06	; 6
     b20:	70 f4       	brcc	.+28     	; 0xb3e <__stack+0x2df>
     b22:	02 30       	cpi	r16, 0x02	; 2
     b24:	09 f4       	brne	.+2      	; 0xb28 <__stack+0x2c9>
     b26:	86 c0       	rjmp	.+268    	; 0xc34 <__stack+0x3d5>
     b28:	03 30       	cpi	r16, 0x03	; 3
     b2a:	18 f4       	brcc	.+6      	; 0xb32 <__stack+0x2d3>
     b2c:	01 30       	cpi	r16, 0x01	; 1
     b2e:	a1 f7       	brne	.-24     	; 0xb18 <__stack+0x2b9>
     b30:	1b c0       	rjmp	.+54     	; 0xb68 <__stack+0x309>
     b32:	03 30       	cpi	r16, 0x03	; 3
     b34:	09 f4       	brne	.+2      	; 0xb38 <__stack+0x2d9>
     b36:	fb c0       	rjmp	.+502    	; 0xd2e <__stack+0x4cf>
     b38:	04 30       	cpi	r16, 0x04	; 4
     b3a:	71 f7       	brne	.-36     	; 0xb18 <__stack+0x2b9>
     b3c:	fe c0       	rjmp	.+508    	; 0xd3a <__stack+0x4db>
     b3e:	08 30       	cpi	r16, 0x08	; 8
     b40:	09 f4       	brne	.+2      	; 0xb44 <__stack+0x2e5>
     b42:	b8 c0       	rjmp	.+368    	; 0xcb4 <__stack+0x455>
     b44:	09 30       	cpi	r16, 0x09	; 9
     b46:	30 f4       	brcc	.+12     	; 0xb54 <__stack+0x2f5>
     b48:	06 30       	cpi	r16, 0x06	; 6
     b4a:	09 f4       	brne	.+2      	; 0xb4e <__stack+0x2ef>
     b4c:	02 c1       	rjmp	.+516    	; 0xd52 <__stack+0x4f3>
     b4e:	07 30       	cpi	r16, 0x07	; 7
     b50:	19 f7       	brne	.-58     	; 0xb18 <__stack+0x2b9>
     b52:	09 c1       	rjmp	.+530    	; 0xd66 <__stack+0x507>
     b54:	09 30       	cpi	r16, 0x09	; 9
     b56:	09 f4       	brne	.+2      	; 0xb5a <__stack+0x2fb>
     b58:	0c c1       	rjmp	.+536    	; 0xd72 <__stack+0x513>
     b5a:	0a 30       	cpi	r16, 0x0A	; 10
     b5c:	e9 f6       	brne	.-70     	; 0xb18 <__stack+0x2b9>
				show_menu = AIRCONDITIONING_MENU;                           //Set the next menu to be shown to air conditioning menu
				break;                                                     //End of air conditioning control menu case
				
				case TEMPERATURE_MENU:
				temperature = 0;                                           //clear the value of temperature
				while (temperature==0 && timeout_flag == FALSE)           //start the loop that asks for the temperature from the user in case of the time is not out
     b5e:	88 23       	and	r24, r24
     b60:	09 f4       	brne	.+2      	; 0xb64 <__stack+0x305>
     b62:	0d c1       	rjmp	.+538    	; 0xd7e <__stack+0x51f>
					SPI_ui8TransmitRecive(temperature);                          //send the entered temperature
					LCD_clearscreen();                                          //remove all previously printed characters on the LCD and move the cursor to the first column of the first row
					LCD_vSend_string("Temperature Sent");                      //show the message
					_delay_ms(500);                                           //Halt the system for the given time in (ms)
				}
				show_menu = AIRCONDITIONING_MENU;                           //Set the next menu to be shown to air conditioning menu
     b64:	08 e0       	ldi	r16, 0x08	; 8
     b66:	a8 c1       	rjmp	.+848    	; 0xeb8 <__stack+0x659>
				case MAIN_MENU:
				do
				{
					//  print main Menu 
					LCD_clearscreen();
					LCD_vSend_string("1:Room1 2:Room2");
     b68:	0f 2e       	mov	r0, r31
     b6a:	f7 ef       	ldi	r31, 0xF7	; 247
     b6c:	af 2e       	mov	r10, r31
     b6e:	f1 e0       	ldi	r31, 0x01	; 1
     b70:	bf 2e       	mov	r11, r31
     b72:	f0 2d       	mov	r31, r0
					LCD_movecursor(2,1);
					if(login_mode==ADMIN)                                //check login mode
					{
						LCD_vSend_string("3:TV 4:More ");            //this menu options only printed if the logged in user is an admin
     b74:	0f 2e       	mov	r0, r31
     b76:	f7 e0       	ldi	r31, 0x07	; 7
     b78:	6f 2e       	mov	r6, r31
     b7a:	f2 e0       	ldi	r31, 0x02	; 2
     b7c:	7f 2e       	mov	r7, r31
     b7e:	f0 2d       	mov	r31, r0
					}
					else if(login_mode==GUEST)                         //check login mode
					{
						LCD_vSend_string("3:TV 4:Fan");            //this menu options only printed if the logged in user is a guest
     b80:	0f 2e       	mov	r0, r31
     b82:	f4 e1       	ldi	r31, 0x14	; 20
     b84:	4f 2e       	mov	r4, r31
     b86:	f2 e0       	ldi	r31, 0x02	; 2
     b88:	5f 2e       	mov	r5, r31
     b8a:	f0 2d       	mov	r31, r0
     b8c:	8d 2d       	mov	r24, r13
     b8e:	d0 2e       	mov	r13, r16
     b90:	08 2f       	mov	r16, r24
			{
				case MAIN_MENU:
				do
				{
					//  print main Menu 
					LCD_clearscreen();
     b92:	0e 94 6f 09 	call	0x12de	; 0x12de <LCD_clearscreen>
					LCD_vSend_string("1:Room1 2:Room2");
     b96:	c5 01       	movw	r24, r10
     b98:	0e 94 60 09 	call	0x12c0	; 0x12c0 <LCD_vSend_string>
					LCD_movecursor(2,1);
     b9c:	82 e0       	ldi	r24, 0x02	; 2
     b9e:	61 e0       	ldi	r22, 0x01	; 1
     ba0:	0e 94 73 09 	call	0x12e6	; 0x12e6 <LCD_movecursor>
					if(login_mode==ADMIN)                                //check login mode
     ba4:	01 30       	cpi	r16, 0x01	; 1
     ba6:	21 f4       	brne	.+8      	; 0xbb0 <__stack+0x351>
					{
						LCD_vSend_string("3:TV 4:More ");            //this menu options only printed if the logged in user is an admin
     ba8:	c3 01       	movw	r24, r6
     baa:	0e 94 60 09 	call	0x12c0	; 0x12c0 <LCD_vSend_string>
     bae:	05 c0       	rjmp	.+10     	; 0xbba <__stack+0x35b>
					}
					else if(login_mode==GUEST)                         //check login mode
     bb0:	02 30       	cpi	r16, 0x02	; 2
     bb2:	19 f4       	brne	.+6      	; 0xbba <__stack+0x35b>
					{
						LCD_vSend_string("3:TV 4:Fan");            //this menu options only printed if the logged in user is a guest
     bb4:	c2 01       	movw	r24, r4
     bb6:	0e 94 60 09 	call	0x12c0	; 0x12c0 <LCD_vSend_string>
					}
					
					
					
					key_pressed = u8GetKeyPressed(login_mode);                           //wait for the user till key is pressed or the time is out
     bba:	80 2f       	mov	r24, r16
     bbc:	0e 94 65 00 	call	0xca	; 0xca <u8GetKeyPressed>
     bc0:	18 2f       	mov	r17, r24
     bc2:	2f ef       	ldi	r18, 0xFF	; 255
     bc4:	30 e7       	ldi	r19, 0x70	; 112
     bc6:	42 e0       	ldi	r20, 0x02	; 2
     bc8:	21 50       	subi	r18, 0x01	; 1
     bca:	30 40       	sbci	r19, 0x00	; 0
     bcc:	40 40       	sbci	r20, 0x00	; 0
     bce:	e1 f7       	brne	.-8      	; 0xbc8 <__stack+0x369>
     bd0:	00 c0       	rjmp	.+0      	; 0xbd2 <__stack+0x373>
     bd2:	00 00       	nop
					_delay_ms(100);                                                     //to avoid the duplication of the pressed key
					
					if (key_pressed == SELECT_ROOM1 )                                  //If key pressed is 1
     bd4:	81 33       	cpi	r24, 0x31	; 49
     bd6:	09 f4       	brne	.+2      	; 0xbda <__stack+0x37b>
     bd8:	77 c1       	rjmp	.+750    	; 0xec8 <__stack+0x669>
					{
						show_menu = ROOM1_MENU;                                       //Set the next menu to be shown to room1 menu
					}
					else if (key_pressed == SELECT_ROOM2)                            //If key pressed is 2
     bda:	82 33       	cpi	r24, 0x32	; 50
     bdc:	09 f4       	brne	.+2      	; 0xbe0 <__stack+0x381>
     bde:	77 c1       	rjmp	.+750    	; 0xece <__stack+0x66f>
					{
						show_menu = ROOM2_MENU;                                     //Set the next menu to be shown to room2 menu
					}
					else if (key_pressed == SELECT_TV)                          //If key pressed is 3
     be0:	83 33       	cpi	r24, 0x33	; 51
     be2:	09 f4       	brne	.+2      	; 0xbe6 <__stack+0x387>
     be4:	77 c1       	rjmp	.+750    	; 0xed4 <__stack+0x675>
					{
						show_menu = TV_MENU;                                   //Set the next menu to be shown to room3 menu
					}
					else if (key_pressed == SELECT_FAN && login_mode == GUEST) //If key pressed is 4 and the logged in user is guest
     be6:	84 33       	cpi	r24, 0x34	; 52
     be8:	41 f4       	brne	.+16     	; 0xbfa <__stack+0x39b>
     bea:	02 30       	cpi	r16, 0x02	; 2
     bec:	09 f4       	brne	.+2      	; 0xbf0 <__stack+0x391>
     bee:	75 c1       	rjmp	.+746    	; 0xeda <__stack+0x67b>
					{
						show_menu = FAN_MENU;                                 //Set the next menu to be shown to room4 menu
					}
					else if (key_pressed == ADMIN_MORE_OPTION && login_mode == ADMIN)//If key pressed is 4 and the logged in user is admin
     bf0:	01 30       	cpi	r16, 0x01	; 1
     bf2:	29 f4       	brne	.+10     	; 0xbfe <__stack+0x39f>
     bf4:	d0 2e       	mov	r13, r16
					{
						show_menu = MORE_MENU;                                      //Set the next menu to be shown to more menu
     bf6:	02 e0       	ldi	r16, 0x02	; 2
     bf8:	5f c1       	rjmp	.+702    	; 0xeb8 <__stack+0x659>
					}
					else if(key_pressed != NOT_PRESSED)                            //show wrong input message if the user pressed wrong key
     bfa:	8f 3f       	cpi	r24, 0xFF	; 255
     bfc:	91 f0       	breq	.+36     	; 0xc22 <__stack+0x3c3>
					{
						LCD_clearscreen();                                        //remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     bfe:	0e 94 6f 09 	call	0x12de	; 0x12de <LCD_clearscreen>
						LCD_vSend_string("Wrong input");                         //print error message
     c02:	c7 01       	movw	r24, r14
     c04:	0e 94 60 09 	call	0x12c0	; 0x12c0 <LCD_vSend_string>
     c08:	8f ef       	ldi	r24, 0xFF	; 255
     c0a:	94 e3       	ldi	r25, 0x34	; 52
     c0c:	ac e0       	ldi	r26, 0x0C	; 12
     c0e:	81 50       	subi	r24, 0x01	; 1
     c10:	90 40       	sbci	r25, 0x00	; 0
     c12:	a0 40       	sbci	r26, 0x00	; 0
     c14:	e1 f7       	brne	.-8      	; 0xc0e <__stack+0x3af>
     c16:	00 c0       	rjmp	.+0      	; 0xc18 <__stack+0x3b9>
     c18:	00 00       	nop
						_delay_ms(500);                                         //Halt the system for the given time in (ms)
					}
				} while ( ((key_pressed < '1') || (key_pressed > '4') ) && (timeout_flag == FALSE) );
     c1a:	11 53       	subi	r17, 0x31	; 49
     c1c:	14 30       	cpi	r17, 0x04	; 4
     c1e:	08 f4       	brcc	.+2      	; 0xc22 <__stack+0x3c3>
     c20:	48 c1       	rjmp	.+656    	; 0xeb2 <__stack+0x653>
     c22:	80 91 a0 02 	lds	r24, 0x02A0
     c26:	88 23       	and	r24, r24
     c28:	09 f4       	brne	.+2      	; 0xc2c <__stack+0x3cd>
     c2a:	b3 cf       	rjmp	.-154    	; 0xb92 <__stack+0x333>
     c2c:	80 2f       	mov	r24, r16
     c2e:	0d 2d       	mov	r16, r13
     c30:	d8 2e       	mov	r13, r24
     c32:	42 c1       	rjmp	.+644    	; 0xeb8 <__stack+0x659>
				
				case MORE_MENU:
				do
				{
					// print more Menu 
					LCD_clearscreen();                //remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     c34:	0e 94 6f 09 	call	0x12de	; 0x12de <LCD_clearscreen>
					LCD_vSend_string("1:Fan   2:Garage");
     c38:	8b e2       	ldi	r24, 0x2B	; 43
     c3a:	92 e0       	ldi	r25, 0x02	; 2
     c3c:	0e 94 60 09 	call	0x12c0	; 0x12c0 <LCD_vSend_string>
					LCD_movecursor(2,1);
     c40:	82 e0       	ldi	r24, 0x02	; 2
     c42:	61 e0       	ldi	r22, 0x01	; 1
     c44:	0e 94 73 09 	call	0x12e6	; 0x12e6 <LCD_movecursor>
					LCD_vSend_string("3:Air Cond.4:RET");
     c48:	8c e3       	ldi	r24, 0x3C	; 60
     c4a:	92 e0       	ldi	r25, 0x02	; 2
     c4c:	0e 94 60 09 	call	0x12c0	; 0x12c0 <LCD_vSend_string>
					
					
					key_pressed = u8GetKeyPressed(login_mode);                      //wait for the user till key is pressed or the time is out
     c50:	8d 2d       	mov	r24, r13
     c52:	0e 94 65 00 	call	0xca	; 0xca <u8GetKeyPressed>
     c56:	18 2f       	mov	r17, r24
     c58:	2f ef       	ldi	r18, 0xFF	; 255
     c5a:	30 e7       	ldi	r19, 0x70	; 112
     c5c:	42 e0       	ldi	r20, 0x02	; 2
     c5e:	21 50       	subi	r18, 0x01	; 1
     c60:	30 40       	sbci	r19, 0x00	; 0
     c62:	40 40       	sbci	r20, 0x00	; 0
     c64:	e1 f7       	brne	.-8      	; 0xc5e <__stack+0x3ff>
     c66:	00 c0       	rjmp	.+0      	; 0xc68 <__stack+0x409>
     c68:	00 00       	nop
					_delay_ms(100);                                                //to avoid the duplication of the pressed key
					
					if (key_pressed == SELECT_FAN_ADMIN)                       //If key pressed is 1
     c6a:	81 33       	cpi	r24, 0x31	; 49
     c6c:	09 f4       	brne	.+2      	; 0xc70 <__stack+0x411>
     c6e:	38 c1       	rjmp	.+624    	; 0xee0 <__stack+0x681>
					{
						show_menu = FAN_MENU;                                //Set the next menu to be shown to room4 menu
					}
					else if (key_pressed == SELECT_GARAGE)                       //If key pressed is 2
     c70:	82 33       	cpi	r24, 0x32	; 50
     c72:	09 f4       	brne	.+2      	; 0xc76 <__stack+0x417>
     c74:	37 c1       	rjmp	.+622    	; 0xee4 <__stack+0x685>
					{
						show_menu = GARAGE_MENU;                               //Set the next menu to be shown to TV menu
					}
					else if (key_pressed == SELECT_AIR_CONDITIONING)      //If key pressed is 3
     c76:	83 33       	cpi	r24, 0x33	; 51
     c78:	09 f4       	brne	.+2      	; 0xc7c <__stack+0x41d>
     c7a:	36 c1       	rjmp	.+620    	; 0xee8 <__stack+0x689>
					{ 
						show_menu = AIRCONDITIONING_MENU;               //Set the next menu to be shown to Air conditioning menu
					}
					else if (key_pressed == ADMIN_RET_OPTION)          //If key pressed is 4 (RET)
     c7c:	84 33       	cpi	r24, 0x34	; 52
     c7e:	09 f4       	brne	.+2      	; 0xc82 <__stack+0x423>
     c80:	35 c1       	rjmp	.+618    	; 0xeec <__stack+0x68d>
					{
						show_menu = MAIN_MENU;                       //Set the next menu to be shown to main menu
					}
					else if(key_pressed != NOT_PRESSED)            //show wrong input message if the user pressed wrong key
     c82:	8f 3f       	cpi	r24, 0xFF	; 255
     c84:	91 f0       	breq	.+36     	; 0xcaa <__stack+0x44b>
					{
						LCD_clearscreen();                       //remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     c86:	0e 94 6f 09 	call	0x12de	; 0x12de <LCD_clearscreen>
						LCD_vSend_string("Wrong input");        //print error message
     c8a:	c7 01       	movw	r24, r14
     c8c:	0e 94 60 09 	call	0x12c0	; 0x12c0 <LCD_vSend_string>
     c90:	8f ef       	ldi	r24, 0xFF	; 255
     c92:	94 e3       	ldi	r25, 0x34	; 52
     c94:	ac e0       	ldi	r26, 0x0C	; 12
     c96:	81 50       	subi	r24, 0x01	; 1
     c98:	90 40       	sbci	r25, 0x00	; 0
     c9a:	a0 40       	sbci	r26, 0x00	; 0
     c9c:	e1 f7       	brne	.-8      	; 0xc96 <__stack+0x437>
     c9e:	00 c0       	rjmp	.+0      	; 0xca0 <__stack+0x441>
     ca0:	00 00       	nop
						_delay_ms(500);                        //Halt the system for the given time in (ms)
					}
				} while (( (key_pressed < '1') || (key_pressed > '4') ) && (timeout_flag == FALSE));           
     ca2:	11 53       	subi	r17, 0x31	; 49
     ca4:	14 30       	cpi	r17, 0x04	; 4
     ca6:	08 f4       	brcc	.+2      	; 0xcaa <__stack+0x44b>
     ca8:	07 c1       	rjmp	.+526    	; 0xeb8 <__stack+0x659>
     caa:	80 91 a0 02 	lds	r24, 0x02A0
     cae:	88 23       	and	r24, r24
     cb0:	09 f2       	breq	.-126    	; 0xc34 <__stack+0x3d5>
     cb2:	02 c1       	rjmp	.+516    	; 0xeb8 <__stack+0x659>
				
				case AIRCONDITIONING_MENU:
				do
				{
					// print more Menu 
					LCD_clearscreen();                      //remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     cb4:	0e 94 6f 09 	call	0x12de	; 0x12de <LCD_clearscreen>
					LCD_vSend_string("1:Set temperature ");
     cb8:	8d e4       	ldi	r24, 0x4D	; 77
     cba:	92 e0       	ldi	r25, 0x02	; 2
     cbc:	0e 94 60 09 	call	0x12c0	; 0x12c0 <LCD_vSend_string>
					LCD_movecursor(2,1);
     cc0:	82 e0       	ldi	r24, 0x02	; 2
     cc2:	61 e0       	ldi	r22, 0x01	; 1
     cc4:	0e 94 73 09 	call	0x12e6	; 0x12e6 <LCD_movecursor>
					LCD_vSend_string("2:Control  0:RET");
     cc8:	80 e6       	ldi	r24, 0x60	; 96
     cca:	92 e0       	ldi	r25, 0x02	; 2
     ccc:	0e 94 60 09 	call	0x12c0	; 0x12c0 <LCD_vSend_string>
					
					
					key_pressed = u8GetKeyPressed(login_mode);                                     //wait for the user till key is pressed or the time is out
     cd0:	8d 2d       	mov	r24, r13
     cd2:	0e 94 65 00 	call	0xca	; 0xca <u8GetKeyPressed>
     cd6:	18 2f       	mov	r17, r24
     cd8:	2f ef       	ldi	r18, 0xFF	; 255
     cda:	30 e7       	ldi	r19, 0x70	; 112
     cdc:	42 e0       	ldi	r20, 0x02	; 2
     cde:	21 50       	subi	r18, 0x01	; 1
     ce0:	30 40       	sbci	r19, 0x00	; 0
     ce2:	40 40       	sbci	r20, 0x00	; 0
     ce4:	e1 f7       	brne	.-8      	; 0xcde <__stack+0x47f>
     ce6:	00 c0       	rjmp	.+0      	; 0xce8 <__stack+0x489>
     ce8:	00 00       	nop
					_delay_ms(100);                                                               //to avoid the duplication of the pressed key
					
					if (key_pressed == SELECT_SET_TEMPERATURE)                                  //If key pressed is 1
     cea:	81 33       	cpi	r24, 0x31	; 49
     cec:	09 f4       	brne	.+2      	; 0xcf0 <__stack+0x491>
     cee:	00 c1       	rjmp	.+512    	; 0xef0 <__stack+0x691>
					{
						show_menu = TEMPERATURE_MENU;                                         //Set the next menu to be shown to set temperature menu
					}
					else if (key_pressed == SELECT_AIR_COND_CTRL)                           //If key pressed is 2
     cf0:	82 33       	cpi	r24, 0x32	; 50
     cf2:	09 f4       	brne	.+2      	; 0xcf6 <__stack+0x497>
     cf4:	ff c0       	rjmp	.+510    	; 0xef4 <__stack+0x695>
					{
						show_menu = AIRCOND_CTRL_MENU;                                    //Set the next menu to be shown to air conditioning control menu
					} 
					else if (key_pressed == SELECT_AIR_COND_RET)                        //If key pressed is 0
     cf6:	80 33       	cpi	r24, 0x30	; 48
     cf8:	09 f4       	brne	.+2      	; 0xcfc <__stack+0x49d>
     cfa:	fe c0       	rjmp	.+508    	; 0xef8 <__stack+0x699>
					{
						show_menu = MORE_MENU;                                        //Set the next menu to be shown to more menu
					}
					else if(key_pressed != NOT_PRESSED)                             //show wrong input message if the user pressed wrong key
     cfc:	8f 3f       	cpi	r24, 0xFF	; 255
     cfe:	91 f0       	breq	.+36     	; 0xd24 <__stack+0x4c5>
					{
						LCD_clearscreen();                                        //remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     d00:	0e 94 6f 09 	call	0x12de	; 0x12de <LCD_clearscreen>
						LCD_vSend_string("Wrong input");                         //print error message
     d04:	c7 01       	movw	r24, r14
     d06:	0e 94 60 09 	call	0x12c0	; 0x12c0 <LCD_vSend_string>
     d0a:	8f ef       	ldi	r24, 0xFF	; 255
     d0c:	94 e3       	ldi	r25, 0x34	; 52
     d0e:	ac e0       	ldi	r26, 0x0C	; 12
     d10:	81 50       	subi	r24, 0x01	; 1
     d12:	90 40       	sbci	r25, 0x00	; 0
     d14:	a0 40       	sbci	r26, 0x00	; 0
     d16:	e1 f7       	brne	.-8      	; 0xd10 <__stack+0x4b1>
     d18:	00 c0       	rjmp	.+0      	; 0xd1a <__stack+0x4bb>
     d1a:	00 00       	nop
						_delay_ms(500);                                         //Halt the system for the given time in (ms)
					}
				} while (( (key_pressed < '0') || (key_pressed > '2') ) && (timeout_flag == FALSE));
     d1c:	10 53       	subi	r17, 0x30	; 48
     d1e:	13 30       	cpi	r17, 0x03	; 3
     d20:	08 f4       	brcc	.+2      	; 0xd24 <__stack+0x4c5>
     d22:	ca c0       	rjmp	.+404    	; 0xeb8 <__stack+0x659>
     d24:	80 91 a0 02 	lds	r24, 0x02A0
     d28:	88 23       	and	r24, r24
     d2a:	21 f2       	breq	.-120    	; 0xcb4 <__stack+0x455>
     d2c:	c5 c0       	rjmp	.+394    	; 0xeb8 <__stack+0x659>
				break;
				
				case ROOM1_MENU:
				vMenuOption(ROOM1_MENU,login_mode);													//call the function that show the menu of room 1
     d2e:	83 e0       	ldi	r24, 0x03	; 3
     d30:	6d 2d       	mov	r22, r13
     d32:	0e 94 86 00 	call	0x10c	; 0x10c <vMenuOption>
				show_menu = MAIN_MENU;                                                             //Set the next menu to be shown to main menu
     d36:	01 e0       	ldi	r16, 0x01	; 1
				break;                                                                            //End of room1 menu case
     d38:	bf c0       	rjmp	.+382    	; 0xeb8 <__stack+0x659>
				
				case ROOM2_MENU:
				vMenuOption(ROOM2_MENU,login_mode);                                             //call the function that show the menu of room 2
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	6d 2d       	mov	r22, r13
     d3e:	0e 94 86 00 	call	0x10c	; 0x10c <vMenuOption>
				show_menu = MAIN_MENU;                                                         //Set the next menu to be shown to main menu
     d42:	01 e0       	ldi	r16, 0x01	; 1
				break;                                                                        //End of room2 menu case
     d44:	b9 c0       	rjmp	.+370    	; 0xeb8 <__stack+0x659>
				
				case TV_MENU:
				vMenuOption(TV_MENU,login_mode);                                         //call the function that show the menu of tv
     d46:	85 e0       	ldi	r24, 0x05	; 5
     d48:	6d 2d       	mov	r22, r13
     d4a:	0e 94 86 00 	call	0x10c	; 0x10c <vMenuOption>
				show_menu = MAIN_MENU;                                                     //Set the next menu to be shown to main menu
     d4e:	01 e0       	ldi	r16, 0x01	; 1
				break;                                                                    //End of room3 menu case
     d50:	b3 c0       	rjmp	.+358    	; 0xeb8 <__stack+0x659>
				
				case FAN_MENU:
				vMenuOption(FAN_MENU,login_mode);                                     //call the function that show the menu of fan
     d52:	86 e0       	ldi	r24, 0x06	; 6
     d54:	6d 2d       	mov	r22, r13
     d56:	0e 94 86 00 	call	0x10c	; 0x10c <vMenuOption>
				if (login_mode == GUEST)                                               //in case of guest is logged in
     d5a:	92 e0       	ldi	r25, 0x02	; 2
     d5c:	d9 16       	cp	r13, r25
     d5e:	09 f0       	breq	.+2      	; 0xd62 <__stack+0x503>
     d60:	a0 c0       	rjmp	.+320    	; 0xea2 <__stack+0x643>
				{
					show_menu = MAIN_MENU;                                            //Set the next menu to be shown to main menu
     d62:	01 e0       	ldi	r16, 0x01	; 1
     d64:	a9 c0       	rjmp	.+338    	; 0xeb8 <__stack+0x659>
					show_menu = MORE_MENU;                                          //Set the next menu to be shown to more menu
				}
				break;                                                             //End of FAN menu case
				
				case GARAGE_MENU:
				vMenuOption(GARAGE_MENU,login_mode);                                 //call the function that show the menu of garage
     d66:	87 e0       	ldi	r24, 0x07	; 7
     d68:	6d 2d       	mov	r22, r13
     d6a:	0e 94 86 00 	call	0x10c	; 0x10c <vMenuOption>
				show_menu = MORE_MENU;                                          //Set the next menu to be shown to more menu
     d6e:	02 e0       	ldi	r16, 0x02	; 2
				break;                                                         //End of garage menu case
     d70:	a3 c0       	rjmp	.+326    	; 0xeb8 <__stack+0x659>
				
				case AIRCOND_CTRL_MENU:
				vMenuOption(AIRCOND_CTRL_MENU,login_mode);                   //call the function that show the menu of Air conditioning control
     d72:	89 e0       	ldi	r24, 0x09	; 9
     d74:	6d 2d       	mov	r22, r13
     d76:	0e 94 86 00 	call	0x10c	; 0x10c <vMenuOption>
				show_menu = AIRCONDITIONING_MENU;                           //Set the next menu to be shown to air conditioning menu
     d7a:	08 e0       	ldi	r16, 0x08	; 8
				break;                                                     //End of air conditioning control menu case
     d7c:	9d c0       	rjmp	.+314    	; 0xeb8 <__stack+0x659>
				case TEMPERATURE_MENU:
				temperature = 0;                                           //clear the value of temperature
				while (temperature==0 && timeout_flag == FALSE)           //start the loop that asks for the temperature from the user in case of the time is not out
				{
					key_pressed = NOT_PRESSED;                          //set the key pressed to the default value
					LCD_clearscreen();                                 //remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     d7e:	0e 94 6f 09 	call	0x12de	; 0x12de <LCD_clearscreen>
					LCD_vSend_string("Set temp.:__ ");                //print the format of inserting temperature
     d82:	81 e7       	ldi	r24, 0x71	; 113
     d84:	92 e0       	ldi	r25, 0x02	; 2
     d86:	0e 94 60 09 	call	0x12c0	; 0x12c0 <LCD_vSend_string>
					LCD_vSend_char(DEGREES_SYMBOL);                  // print the symbol of degree
     d8a:	8f ed       	ldi	r24, 0xDF	; 223
     d8c:	0e 94 3d 09 	call	0x127a	; 0x127a <LCD_vSend_char>
					LCD_vSend_char('C');                            // print the C character
     d90:	83 e4       	ldi	r24, 0x43	; 67
     d92:	0e 94 3d 09 	call	0x127a	; 0x127a <LCD_vSend_char>
					LCD_movecursor(1,11);                          //move the cursor to the place to write the entered temperature
     d96:	81 e0       	ldi	r24, 0x01	; 1
     d98:	6b e0       	ldi	r22, 0x0B	; 11
     d9a:	0e 94 73 09 	call	0x12e6	; 0x12e6 <LCD_movecursor>
     d9e:	2f ef       	ldi	r18, 0xFF	; 255
     da0:	31 ee       	ldi	r19, 0xE1	; 225
     da2:	44 e0       	ldi	r20, 0x04	; 4
     da4:	21 50       	subi	r18, 0x01	; 1
     da6:	30 40       	sbci	r19, 0x00	; 0
     da8:	40 40       	sbci	r20, 0x00	; 0
     daa:	e1 f7       	brne	.-8      	; 0xda4 <__stack+0x545>
     dac:	00 c0       	rjmp	.+0      	; 0xdae <__stack+0x54f>
     dae:	00 00       	nop
					_delay_ms(200);                               //Halt the system for the given time in (ms)
		
		
					key_pressed = u8GetKeyPressed(login_mode);                        //wait for the user till key is pressed or the time is out
     db0:	8d 2d       	mov	r24, r13
     db2:	0e 94 65 00 	call	0xca	; 0xca <u8GetKeyPressed>
     db6:	2f e7       	ldi	r18, 0x7F	; 127
     db8:	3a e1       	ldi	r19, 0x1A	; 26
     dba:	46 e0       	ldi	r20, 0x06	; 6
     dbc:	21 50       	subi	r18, 0x01	; 1
     dbe:	30 40       	sbci	r19, 0x00	; 0
     dc0:	40 40       	sbci	r20, 0x00	; 0
     dc2:	e1 f7       	brne	.-8      	; 0xdbc <__stack+0x55d>
     dc4:	00 c0       	rjmp	.+0      	; 0xdc6 <__stack+0x567>
     dc6:	00 00       	nop
					_delay_ms(250);                                                  //to avoid the duplication of the pressed key

					if (timeout_flag == TRUE)                                      //in case of the time is out before the user press a key
     dc8:	90 91 a0 02 	lds	r25, 0x02A0
     dcc:	91 30       	cpi	r25, 0x01	; 1
     dce:	09 f4       	brne	.+2      	; 0xdd2 <__stack+0x573>
     dd0:	6a c0       	rjmp	.+212    	; 0xea6 <__stack+0x647>
					{
						break;                                                    //break the loop that ask for temperature
					}
					if (key_pressed <'0' || key_pressed >'9')                   //show wrong input message if the user entered non numeric value
     dd2:	18 2f       	mov	r17, r24
     dd4:	10 53       	subi	r17, 0x30	; 48
     dd6:	1a 30       	cpi	r17, 0x0A	; 10
     dd8:	78 f0       	brcs	.+30     	; 0xdf8 <__stack+0x599>
					{
						LCD_clearscreen();                                    //remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     dda:	0e 94 6f 09 	call	0x12de	; 0x12de <LCD_clearscreen>
						LCD_vSend_string("Wrong input");                     //print error message
     dde:	c7 01       	movw	r24, r14
     de0:	0e 94 60 09 	call	0x12c0	; 0x12c0 <LCD_vSend_string>
     de4:	8f ef       	ldi	r24, 0xFF	; 255
     de6:	94 e3       	ldi	r25, 0x34	; 52
     de8:	ac e0       	ldi	r26, 0x0C	; 12
     dea:	81 50       	subi	r24, 0x01	; 1
     dec:	90 40       	sbci	r25, 0x00	; 0
     dee:	a0 40       	sbci	r26, 0x00	; 0
     df0:	e1 f7       	brne	.-8      	; 0xdea <__stack+0x58b>
     df2:	00 c0       	rjmp	.+0      	; 0xdf4 <__stack+0x595>
     df4:	00 00       	nop
						_delay_ms(500);                                     //Halt the system for the given time in (ms)
						continue;                                          //return to #while (temperature==0)# line 672
     df6:	4e c0       	rjmp	.+156    	; 0xe94 <__stack+0x635>
					}
					else                                                 //if the value is valid
					{
						LCD_vSend_char(key_pressed);                            //print the value on the lcd
     df8:	0e 94 3d 09 	call	0x127a	; 0x127a <LCD_vSend_char>
						temp_tens = key_pressed-ASCII_ZERO;                    //save the entered value
						key_pressed = NOT_PRESSED;                            //set the key pressed to the default value
					}
		
		
					key_pressed = u8GetKeyPressed(login_mode);               //wait for the user till key is pressed or the time is out
     dfc:	8d 2d       	mov	r24, r13
     dfe:	0e 94 65 00 	call	0xca	; 0xca <u8GetKeyPressed>
     e02:	2f e7       	ldi	r18, 0x7F	; 127
     e04:	3a e1       	ldi	r19, 0x1A	; 26
     e06:	46 e0       	ldi	r20, 0x06	; 6
     e08:	21 50       	subi	r18, 0x01	; 1
     e0a:	30 40       	sbci	r19, 0x00	; 0
     e0c:	40 40       	sbci	r20, 0x00	; 0
     e0e:	e1 f7       	brne	.-8      	; 0xe08 <__stack+0x5a9>
     e10:	00 c0       	rjmp	.+0      	; 0xe12 <__stack+0x5b3>
     e12:	00 00       	nop
					_delay_ms(250);                                         //to avoid the duplication of the pressed key
					
					if (timeout_flag == TRUE)                              //if the user session is timeout
     e14:	90 91 a0 02 	lds	r25, 0x02A0
     e18:	91 30       	cpi	r25, 0x01	; 1
     e1a:	09 f4       	brne	.+2      	; 0xe1e <__stack+0x5bf>
     e1c:	46 c0       	rjmp	.+140    	; 0xeaa <__stack+0x64b>
					{
						break;                                            //break the loop that ask for temperature
					}
					if ((key_pressed <'0' || key_pressed >'9'))          //show wrong input message if the user entered non numeric value
     e1e:	08 2f       	mov	r16, r24
     e20:	00 53       	subi	r16, 0x30	; 48
     e22:	0a 30       	cpi	r16, 0x0A	; 10
     e24:	78 f0       	brcs	.+30     	; 0xe44 <__stack+0x5e5>
					{
						LCD_clearscreen();                              //remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     e26:	0e 94 6f 09 	call	0x12de	; 0x12de <LCD_clearscreen>
						LCD_vSend_string("Wrong input");               //print error message
     e2a:	c7 01       	movw	r24, r14
     e2c:	0e 94 60 09 	call	0x12c0	; 0x12c0 <LCD_vSend_string>
     e30:	8f ef       	ldi	r24, 0xFF	; 255
     e32:	94 e3       	ldi	r25, 0x34	; 52
     e34:	ac e0       	ldi	r26, 0x0C	; 12
     e36:	81 50       	subi	r24, 0x01	; 1
     e38:	90 40       	sbci	r25, 0x00	; 0
     e3a:	a0 40       	sbci	r26, 0x00	; 0
     e3c:	e1 f7       	brne	.-8      	; 0xe36 <__stack+0x5d7>
     e3e:	00 c0       	rjmp	.+0      	; 0xe40 <__stack+0x5e1>
     e40:	00 00       	nop
						_delay_ms(500);                               //Halt the system for the given time in (ms)
						continue;                                    //repeat the loop that ask for the temperature
     e42:	28 c0       	rjmp	.+80     	; 0xe94 <__stack+0x635>
					}  
					else                                            //if the value is valid
					{
						LCD_vSend_char(key_pressed);                       //print the value on the lcd
     e44:	0e 94 3d 09 	call	0x127a	; 0x127a <LCD_vSend_char>
						temp_ones = key_pressed-ASCII_ZERO;               //save the entered value
						key_pressed = NOT_PRESSED;                       //set the key pressed to the default value
					}
					temperature = temp_tens*10 + temp_ones;                         //set the value of the temperature from the given separated values
     e48:	11 0f       	add	r17, r17
     e4a:	81 2f       	mov	r24, r17
     e4c:	88 0f       	add	r24, r24
     e4e:	88 0f       	add	r24, r24
     e50:	18 0f       	add	r17, r24
     e52:	10 0f       	add	r17, r16
					SPI_ui8TransmitRecive(SET_TEMPERATURE);                        //Send the code of set temperature
     e54:	80 e4       	ldi	r24, 0x40	; 64
     e56:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <SPI_ui8TransmitRecive>
     e5a:	2f ef       	ldi	r18, 0xFF	; 255
     e5c:	31 ee       	ldi	r19, 0xE1	; 225
     e5e:	44 e0       	ldi	r20, 0x04	; 4
     e60:	21 50       	subi	r18, 0x01	; 1
     e62:	30 40       	sbci	r19, 0x00	; 0
     e64:	40 40       	sbci	r20, 0x00	; 0
     e66:	e1 f7       	brne	.-8      	; 0xe60 <__stack+0x601>
     e68:	00 c0       	rjmp	.+0      	; 0xe6a <__stack+0x60b>
     e6a:	00 00       	nop
					_delay_ms(200);                                               //Halt the system to prevent write collision
					SPI_ui8TransmitRecive(temperature);                          //send the entered temperature
     e6c:	81 2f       	mov	r24, r17
     e6e:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <SPI_ui8TransmitRecive>
					LCD_clearscreen();                                          //remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     e72:	0e 94 6f 09 	call	0x12de	; 0x12de <LCD_clearscreen>
					LCD_vSend_string("Temperature Sent");                      //show the message
     e76:	8f e7       	ldi	r24, 0x7F	; 127
     e78:	92 e0       	ldi	r25, 0x02	; 2
     e7a:	0e 94 60 09 	call	0x12c0	; 0x12c0 <LCD_vSend_string>
     e7e:	8f ef       	ldi	r24, 0xFF	; 255
     e80:	94 e3       	ldi	r25, 0x34	; 52
     e82:	ac e0       	ldi	r26, 0x0C	; 12
     e84:	81 50       	subi	r24, 0x01	; 1
     e86:	90 40       	sbci	r25, 0x00	; 0
     e88:	a0 40       	sbci	r26, 0x00	; 0
     e8a:	e1 f7       	brne	.-8      	; 0xe84 <__stack+0x625>
     e8c:	00 c0       	rjmp	.+0      	; 0xe8e <__stack+0x62f>
     e8e:	00 00       	nop
				show_menu = AIRCONDITIONING_MENU;                           //Set the next menu to be shown to air conditioning menu
				break;                                                     //End of air conditioning control menu case
				
				case TEMPERATURE_MENU:
				temperature = 0;                                           //clear the value of temperature
				while (temperature==0 && timeout_flag == FALSE)           //start the loop that asks for the temperature from the user in case of the time is not out
     e90:	11 23       	and	r17, r17
     e92:	69 f4       	brne	.+26     	; 0xeae <__stack+0x64f>
     e94:	80 91 a0 02 	lds	r24, 0x02A0
     e98:	88 23       	and	r24, r24
     e9a:	09 f4       	brne	.+2      	; 0xe9e <__stack+0x63f>
     e9c:	70 cf       	rjmp	.-288    	; 0xd7e <__stack+0x51f>
					SPI_ui8TransmitRecive(temperature);                          //send the entered temperature
					LCD_clearscreen();                                          //remove all previously printed characters on the LCD and move the cursor to the first column of the first row
					LCD_vSend_string("Temperature Sent");                      //show the message
					_delay_ms(500);                                           //Halt the system for the given time in (ms)
				}
				show_menu = AIRCONDITIONING_MENU;                           //Set the next menu to be shown to air conditioning menu
     e9e:	08 e0       	ldi	r16, 0x08	; 8
     ea0:	0b c0       	rjmp	.+22     	; 0xeb8 <__stack+0x659>
				{
					show_menu = MAIN_MENU;                                            //Set the next menu to be shown to main menu
				}
				else                                                                 //in case of admin is logged in
				{
					show_menu = MORE_MENU;                                          //Set the next menu to be shown to more menu
     ea2:	02 e0       	ldi	r16, 0x02	; 2
     ea4:	09 c0       	rjmp	.+18     	; 0xeb8 <__stack+0x659>
					SPI_ui8TransmitRecive(temperature);                          //send the entered temperature
					LCD_clearscreen();                                          //remove all previously printed characters on the LCD and move the cursor to the first column of the first row
					LCD_vSend_string("Temperature Sent");                      //show the message
					_delay_ms(500);                                           //Halt the system for the given time in (ms)
				}
				show_menu = AIRCONDITIONING_MENU;                           //Set the next menu to be shown to air conditioning menu
     ea6:	08 e0       	ldi	r16, 0x08	; 8
     ea8:	07 c0       	rjmp	.+14     	; 0xeb8 <__stack+0x659>
     eaa:	08 e0       	ldi	r16, 0x08	; 8
     eac:	05 c0       	rjmp	.+10     	; 0xeb8 <__stack+0x659>
     eae:	08 e0       	ldi	r16, 0x08	; 8
     eb0:	03 c0       	rjmp	.+6      	; 0xeb8 <__stack+0x659>
     eb2:	80 2f       	mov	r24, r16
     eb4:	0d 2d       	mov	r16, r13
     eb6:	d8 2e       	mov	r13, r24
		uint8 show_menu = MAIN_MENU; //-------------------------------------------------> set the show menu to the main menu either in admin or guest mode 
		
		
		
		
		while(timeout_flag!=TRUE)                                            //Show the menu in case of the time is not out
     eb8:	80 91 a0 02 	lds	r24, 0x02A0
     ebc:	81 30       	cpi	r24, 0x01	; 1
     ebe:	09 f4       	brne	.+2      	; 0xec2 <__stack+0x663>
     ec0:	10 cc       	rjmp	.-2016   	; 0x6e2 <main+0x338>
     ec2:	2a ce       	rjmp	.-940    	; 0xb18 <__stack+0x2b9>
		if ( timeout_flag==TRUE )                           //check for timeout
		{//if timeout flag was raised
			timer0_stop();                                                 //stop the timer that increase the session counter
			session_counter = 0;                                          //clear session counter
			timeout_flag=FALSE;                                          //clear time out flag
			login_mode=NO_MODE;                                         //log the user out
     ec4:	1f ef       	ldi	r17, 0xFF	; 255
     ec6:	39 cc       	rjmp	.-1934   	; 0x73a <main+0x390>
     ec8:	d0 2e       	mov	r13, r16
					key_pressed = u8GetKeyPressed(login_mode);                           //wait for the user till key is pressed or the time is out
					_delay_ms(100);                                                     //to avoid the duplication of the pressed key
					
					if (key_pressed == SELECT_ROOM1 )                                  //If key pressed is 1
					{
						show_menu = ROOM1_MENU;                                       //Set the next menu to be shown to room1 menu
     eca:	03 e0       	ldi	r16, 0x03	; 3
     ecc:	f5 cf       	rjmp	.-22     	; 0xeb8 <__stack+0x659>
     ece:	d0 2e       	mov	r13, r16
					}
					else if (key_pressed == SELECT_ROOM2)                            //If key pressed is 2
					{
						show_menu = ROOM2_MENU;                                     //Set the next menu to be shown to room2 menu
     ed0:	04 e0       	ldi	r16, 0x04	; 4
     ed2:	f2 cf       	rjmp	.-28     	; 0xeb8 <__stack+0x659>
     ed4:	d0 2e       	mov	r13, r16
					}
					else if (key_pressed == SELECT_TV)                          //If key pressed is 3
					{
						show_menu = TV_MENU;                                   //Set the next menu to be shown to room3 menu
     ed6:	05 e0       	ldi	r16, 0x05	; 5
     ed8:	ef cf       	rjmp	.-34     	; 0xeb8 <__stack+0x659>
     eda:	d0 2e       	mov	r13, r16
					}
					else if (key_pressed == SELECT_FAN && login_mode == GUEST) //If key pressed is 4 and the logged in user is guest
					{
						show_menu = FAN_MENU;                                 //Set the next menu to be shown to room4 menu
     edc:	06 e0       	ldi	r16, 0x06	; 6
     ede:	ec cf       	rjmp	.-40     	; 0xeb8 <__stack+0x659>
					key_pressed = u8GetKeyPressed(login_mode);                      //wait for the user till key is pressed or the time is out
					_delay_ms(100);                                                //to avoid the duplication of the pressed key
					
					if (key_pressed == SELECT_FAN_ADMIN)                       //If key pressed is 1
					{
						show_menu = FAN_MENU;                                //Set the next menu to be shown to room4 menu
     ee0:	06 e0       	ldi	r16, 0x06	; 6
     ee2:	ea cf       	rjmp	.-44     	; 0xeb8 <__stack+0x659>
					}
					else if (key_pressed == SELECT_GARAGE)                       //If key pressed is 2
					{
						show_menu = GARAGE_MENU;                               //Set the next menu to be shown to TV menu
     ee4:	07 e0       	ldi	r16, 0x07	; 7
     ee6:	e8 cf       	rjmp	.-48     	; 0xeb8 <__stack+0x659>
					}
					else if (key_pressed == SELECT_AIR_CONDITIONING)      //If key pressed is 3
					{ 
						show_menu = AIRCONDITIONING_MENU;               //Set the next menu to be shown to Air conditioning menu
     ee8:	08 e0       	ldi	r16, 0x08	; 8
     eea:	e6 cf       	rjmp	.-52     	; 0xeb8 <__stack+0x659>
					}
					else if (key_pressed == ADMIN_RET_OPTION)          //If key pressed is 4 (RET)
					{
						show_menu = MAIN_MENU;                       //Set the next menu to be shown to main menu
     eec:	01 e0       	ldi	r16, 0x01	; 1
     eee:	e4 cf       	rjmp	.-56     	; 0xeb8 <__stack+0x659>
					key_pressed = u8GetKeyPressed(login_mode);                                     //wait for the user till key is pressed or the time is out
					_delay_ms(100);                                                               //to avoid the duplication of the pressed key
					
					if (key_pressed == SELECT_SET_TEMPERATURE)                                  //If key pressed is 1
					{
						show_menu = TEMPERATURE_MENU;                                         //Set the next menu to be shown to set temperature menu
     ef0:	0a e0       	ldi	r16, 0x0A	; 10
     ef2:	e2 cf       	rjmp	.-60     	; 0xeb8 <__stack+0x659>
					}
					else if (key_pressed == SELECT_AIR_COND_CTRL)                           //If key pressed is 2
					{
						show_menu = AIRCOND_CTRL_MENU;                                    //Set the next menu to be shown to air conditioning control menu
     ef4:	09 e0       	ldi	r16, 0x09	; 9
     ef6:	e0 cf       	rjmp	.-64     	; 0xeb8 <__stack+0x659>
					} 
					else if (key_pressed == SELECT_AIR_COND_RET)                        //If key pressed is 0
					{
						show_menu = MORE_MENU;                                        //Set the next menu to be shown to more menu
     ef8:	02 e0       	ldi	r16, 0x02	; 2
     efa:	de cf       	rjmp	.-68     	; 0xeb8 <__stack+0x659>

00000efc <__vector_10>:




ISR(TIMER0_COMP_vect)
{
     efc:	1f 92       	push	r1
     efe:	0f 92       	push	r0
     f00:	0f b6       	in	r0, 0x3f	; 63
     f02:	0f 92       	push	r0
     f04:	11 24       	eor	r1, r1
     f06:	8f 93       	push	r24
     f08:	9f 93       	push	r25
	session_counter++;                                                       
     f0a:	80 91 a1 02 	lds	r24, 0x02A1
     f0e:	90 91 a2 02 	lds	r25, 0x02A2
     f12:	01 96       	adiw	r24, 0x01	; 1
     f14:	90 93 a2 02 	sts	0x02A2, r25
     f18:	80 93 a1 02 	sts	0x02A1, r24
     f1c:	9f 91       	pop	r25
     f1e:	8f 91       	pop	r24
     f20:	0f 90       	pop	r0
     f22:	0f be       	out	0x3f, r0	; 63
     f24:	0f 90       	pop	r0
     f26:	1f 90       	pop	r1
     f28:	18 95       	reti

00000f2a <EEPROM_vRead>:
     f2a:	1f 93       	push	r17
     f2c:	cf 93       	push	r28
     f2e:	df 93       	push	r29
     f30:	18 2f       	mov	r17, r24
     f32:	eb 01       	movw	r28, r22
     f34:	0e 94 84 0c 	call	0x1908	; 0x1908 <TWI_enStartCondition>
     f38:	80 ea       	ldi	r24, 0xA0	; 160
     f3a:	0e 94 ab 0c 	call	0x1956	; 0x1956 <TWI_enSetSlaveAddressWithWrite>
     f3e:	81 2f       	mov	r24, r17
     f40:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <TWI_enMasterWriteData>
     f44:	0e 94 97 0c 	call	0x192e	; 0x192e <TWI_enRepeateStart>
     f48:	80 ea       	ldi	r24, 0xA0	; 160
     f4a:	0e 94 c1 0c 	call	0x1982	; 0x1982 <TWI_enSetSlaveAddressWithRead>
     f4e:	ce 01       	movw	r24, r28
     f50:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <TWI_enMasterReadData>
     f54:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <TWI_vStopCondition>
     f58:	df 91       	pop	r29
     f5a:	cf 91       	pop	r28
     f5c:	1f 91       	pop	r17
     f5e:	08 95       	ret

00000f60 <EEPROM_vWrite>:
     f60:	cf 93       	push	r28
     f62:	df 93       	push	r29
     f64:	d8 2f       	mov	r29, r24
     f66:	c6 2f       	mov	r28, r22
     f68:	0e 94 84 0c 	call	0x1908	; 0x1908 <TWI_enStartCondition>
     f6c:	80 ea       	ldi	r24, 0xA0	; 160
     f6e:	0e 94 ab 0c 	call	0x1956	; 0x1956 <TWI_enSetSlaveAddressWithWrite>
     f72:	8d 2f       	mov	r24, r29
     f74:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <TWI_enMasterWriteData>
     f78:	8c 2f       	mov	r24, r28
     f7a:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <TWI_enMasterWriteData>
     f7e:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <TWI_vStopCondition>
     f82:	83 ec       	ldi	r24, 0xC3	; 195
     f84:	99 e0       	ldi	r25, 0x09	; 9
     f86:	01 97       	sbiw	r24, 0x01	; 1
     f88:	f1 f7       	brne	.-4      	; 0xf86 <EEPROM_vWrite+0x26>
     f8a:	00 c0       	rjmp	.+0      	; 0xf8c <EEPROM_vWrite+0x2c>
     f8c:	00 00       	nop
     f8e:	df 91       	pop	r29
     f90:	cf 91       	pop	r28
     f92:	08 95       	ret

00000f94 <EEPROM_vWritePage>:
     f94:	ff 92       	push	r15
     f96:	0f 93       	push	r16
     f98:	1f 93       	push	r17
     f9a:	cf 93       	push	r28
     f9c:	df 93       	push	r29
     f9e:	f8 2e       	mov	r15, r24
     fa0:	04 2f       	mov	r16, r20
     fa2:	44 23       	and	r20, r20
     fa4:	c1 f0       	breq	.+48     	; 0xfd6 <EEPROM_vWritePage+0x42>
     fa6:	c6 2f       	mov	r28, r22
     fa8:	d7 2f       	mov	r29, r23
     faa:	10 e0       	ldi	r17, 0x00	; 0
     fac:	0e 94 84 0c 	call	0x1908	; 0x1908 <TWI_enStartCondition>
     fb0:	80 ea       	ldi	r24, 0xA0	; 160
     fb2:	0e 94 ab 0c 	call	0x1956	; 0x1956 <TWI_enSetSlaveAddressWithWrite>
     fb6:	81 2f       	mov	r24, r17
     fb8:	8f 0d       	add	r24, r15
     fba:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <TWI_enMasterWriteData>
     fbe:	89 91       	ld	r24, Y+
     fc0:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <TWI_enMasterWriteData>
     fc4:	83 ec       	ldi	r24, 0xC3	; 195
     fc6:	99 e0       	ldi	r25, 0x09	; 9
     fc8:	01 97       	sbiw	r24, 0x01	; 1
     fca:	f1 f7       	brne	.-4      	; 0xfc8 <EEPROM_vWritePage+0x34>
     fcc:	00 c0       	rjmp	.+0      	; 0xfce <EEPROM_vWritePage+0x3a>
     fce:	00 00       	nop
     fd0:	1f 5f       	subi	r17, 0xFF	; 255
     fd2:	10 17       	cp	r17, r16
     fd4:	59 f7       	brne	.-42     	; 0xfac <EEPROM_vWritePage+0x18>
     fd6:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <TWI_vStopCondition>
     fda:	df 91       	pop	r29
     fdc:	cf 91       	pop	r28
     fde:	1f 91       	pop	r17
     fe0:	0f 91       	pop	r16
     fe2:	ff 90       	pop	r15
     fe4:	08 95       	ret

00000fe6 <EEPROM_vReadPage>:
     fe6:	ff 92       	push	r15
     fe8:	0f 93       	push	r16
     fea:	1f 93       	push	r17
     fec:	cf 93       	push	r28
     fee:	df 93       	push	r29
     ff0:	f8 2e       	mov	r15, r24
     ff2:	06 2f       	mov	r16, r22
     ff4:	66 23       	and	r22, r22
     ff6:	f1 f0       	breq	.+60     	; 0x1034 <EEPROM_vReadPage+0x4e>
     ff8:	c4 2f       	mov	r28, r20
     ffa:	d5 2f       	mov	r29, r21
     ffc:	10 e0       	ldi	r17, 0x00	; 0
     ffe:	0e 94 84 0c 	call	0x1908	; 0x1908 <TWI_enStartCondition>
    1002:	80 ea       	ldi	r24, 0xA0	; 160
    1004:	0e 94 ab 0c 	call	0x1956	; 0x1956 <TWI_enSetSlaveAddressWithWrite>
    1008:	81 2f       	mov	r24, r17
    100a:	8f 0d       	add	r24, r15
    100c:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <TWI_enMasterWriteData>
    1010:	0e 94 97 0c 	call	0x192e	; 0x192e <TWI_enRepeateStart>
    1014:	80 ea       	ldi	r24, 0xA0	; 160
    1016:	0e 94 c1 0c 	call	0x1982	; 0x1982 <TWI_enSetSlaveAddressWithRead>
    101a:	89 91       	ld	r24, Y+
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <TWI_enMasterReadData>
    1022:	83 ec       	ldi	r24, 0xC3	; 195
    1024:	99 e0       	ldi	r25, 0x09	; 9
    1026:	01 97       	sbiw	r24, 0x01	; 1
    1028:	f1 f7       	brne	.-4      	; 0x1026 <EEPROM_vReadPage+0x40>
    102a:	00 c0       	rjmp	.+0      	; 0x102c <EEPROM_vReadPage+0x46>
    102c:	00 00       	nop
    102e:	1f 5f       	subi	r17, 0xFF	; 255
    1030:	10 17       	cp	r17, r16
    1032:	29 f7       	brne	.-54     	; 0xffe <EEPROM_vReadPage+0x18>
    1034:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <TWI_vStopCondition>
    1038:	df 91       	pop	r29
    103a:	cf 91       	pop	r28
    103c:	1f 91       	pop	r17
    103e:	0f 91       	pop	r16
    1040:	ff 90       	pop	r15
    1042:	08 95       	ret

00001044 <keypad_vInit>:
    1044:	81 e4       	ldi	r24, 0x41	; 65
    1046:	60 e0       	ldi	r22, 0x00	; 0
    1048:	41 e0       	ldi	r20, 0x01	; 1
    104a:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <DIO_vsetPINDir>
    104e:	81 e4       	ldi	r24, 0x41	; 65
    1050:	61 e0       	ldi	r22, 0x01	; 1
    1052:	41 e0       	ldi	r20, 0x01	; 1
    1054:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <DIO_vsetPINDir>
    1058:	81 e4       	ldi	r24, 0x41	; 65
    105a:	62 e0       	ldi	r22, 0x02	; 2
    105c:	41 e0       	ldi	r20, 0x01	; 1
    105e:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <DIO_vsetPINDir>
    1062:	81 e4       	ldi	r24, 0x41	; 65
    1064:	63 e0       	ldi	r22, 0x03	; 3
    1066:	41 e0       	ldi	r20, 0x01	; 1
    1068:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <DIO_vsetPINDir>
    106c:	81 e4       	ldi	r24, 0x41	; 65
    106e:	64 e0       	ldi	r22, 0x04	; 4
    1070:	40 e0       	ldi	r20, 0x00	; 0
    1072:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <DIO_vsetPINDir>
    1076:	81 e4       	ldi	r24, 0x41	; 65
    1078:	65 e0       	ldi	r22, 0x05	; 5
    107a:	40 e0       	ldi	r20, 0x00	; 0
    107c:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <DIO_vsetPINDir>
    1080:	81 e4       	ldi	r24, 0x41	; 65
    1082:	66 e0       	ldi	r22, 0x06	; 6
    1084:	40 e0       	ldi	r20, 0x00	; 0
    1086:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <DIO_vsetPINDir>
    108a:	81 e4       	ldi	r24, 0x41	; 65
    108c:	67 e0       	ldi	r22, 0x07	; 7
    108e:	40 e0       	ldi	r20, 0x00	; 0
    1090:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <DIO_vsetPINDir>
    1094:	81 e4       	ldi	r24, 0x41	; 65
    1096:	64 e0       	ldi	r22, 0x04	; 4
    1098:	41 e0       	ldi	r20, 0x01	; 1
    109a:	0e 94 ce 0b 	call	0x179c	; 0x179c <DIO_vconnectpullup>
    109e:	81 e4       	ldi	r24, 0x41	; 65
    10a0:	65 e0       	ldi	r22, 0x05	; 5
    10a2:	41 e0       	ldi	r20, 0x01	; 1
    10a4:	0e 94 ce 0b 	call	0x179c	; 0x179c <DIO_vconnectpullup>
    10a8:	81 e4       	ldi	r24, 0x41	; 65
    10aa:	66 e0       	ldi	r22, 0x06	; 6
    10ac:	41 e0       	ldi	r20, 0x01	; 1
    10ae:	0e 94 ce 0b 	call	0x179c	; 0x179c <DIO_vconnectpullup>
    10b2:	81 e4       	ldi	r24, 0x41	; 65
    10b4:	67 e0       	ldi	r22, 0x07	; 7
    10b6:	41 e0       	ldi	r20, 0x01	; 1
    10b8:	0e 94 ce 0b 	call	0x179c	; 0x179c <DIO_vconnectpullup>
    10bc:	08 95       	ret

000010be <keypad_u8check_press>:
    10be:	ef 92       	push	r14
    10c0:	ff 92       	push	r15
    10c2:	0f 93       	push	r16
    10c4:	1f 93       	push	r17
    10c6:	cf 93       	push	r28
    10c8:	df 93       	push	r29
    10ca:	cd b7       	in	r28, 0x3d	; 61
    10cc:	de b7       	in	r29, 0x3e	; 62
    10ce:	60 97       	sbiw	r28, 0x10	; 16
    10d0:	0f b6       	in	r0, 0x3f	; 63
    10d2:	f8 94       	cli
    10d4:	de bf       	out	0x3e, r29	; 62
    10d6:	0f be       	out	0x3f, r0	; 63
    10d8:	cd bf       	out	0x3d, r28	; 61
    10da:	de 01       	movw	r26, r28
    10dc:	11 96       	adiw	r26, 0x01	; 1
    10de:	e0 e9       	ldi	r30, 0x90	; 144
    10e0:	f2 e0       	ldi	r31, 0x02	; 2
    10e2:	80 e1       	ldi	r24, 0x10	; 16
    10e4:	01 90       	ld	r0, Z+
    10e6:	0d 92       	st	X+, r0
    10e8:	81 50       	subi	r24, 0x01	; 1
    10ea:	e1 f7       	brne	.-8      	; 0x10e4 <keypad_u8check_press+0x26>
    10ec:	ee 24       	eor	r14, r14
    10ee:	ff 24       	eor	r15, r15
    10f0:	0f ef       	ldi	r16, 0xFF	; 255
    10f2:	81 e4       	ldi	r24, 0x41	; 65
    10f4:	60 e0       	ldi	r22, 0x00	; 0
    10f6:	41 e0       	ldi	r20, 0x01	; 1
    10f8:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <DIO_write>
    10fc:	81 e4       	ldi	r24, 0x41	; 65
    10fe:	61 e0       	ldi	r22, 0x01	; 1
    1100:	41 e0       	ldi	r20, 0x01	; 1
    1102:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <DIO_write>
    1106:	81 e4       	ldi	r24, 0x41	; 65
    1108:	62 e0       	ldi	r22, 0x02	; 2
    110a:	41 e0       	ldi	r20, 0x01	; 1
    110c:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <DIO_write>
    1110:	81 e4       	ldi	r24, 0x41	; 65
    1112:	63 e0       	ldi	r22, 0x03	; 3
    1114:	41 e0       	ldi	r20, 0x01	; 1
    1116:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <DIO_write>
    111a:	8f e3       	ldi	r24, 0x3F	; 63
    111c:	9c e9       	ldi	r25, 0x9C	; 156
    111e:	01 97       	sbiw	r24, 0x01	; 1
    1120:	f1 f7       	brne	.-4      	; 0x111e <keypad_u8check_press+0x60>
    1122:	00 c0       	rjmp	.+0      	; 0x1124 <keypad_u8check_press+0x66>
    1124:	00 00       	nop
    1126:	81 e4       	ldi	r24, 0x41	; 65
    1128:	6e 2d       	mov	r22, r14
    112a:	40 e0       	ldi	r20, 0x00	; 0
    112c:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <DIO_write>
    1130:	10 e0       	ldi	r17, 0x00	; 0
    1132:	61 2f       	mov	r22, r17
    1134:	6c 5f       	subi	r22, 0xFC	; 252
    1136:	81 e4       	ldi	r24, 0x41	; 65
    1138:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <DIO_u8read>
    113c:	88 23       	and	r24, r24
    113e:	79 f4       	brne	.+30     	; 0x115e <keypad_u8check_press+0xa0>
    1140:	f7 01       	movw	r30, r14
    1142:	ee 0f       	add	r30, r30
    1144:	ff 1f       	adc	r31, r31
    1146:	ee 0f       	add	r30, r30
    1148:	ff 1f       	adc	r31, r31
    114a:	e1 0f       	add	r30, r17
    114c:	f1 1d       	adc	r31, r1
    114e:	81 e0       	ldi	r24, 0x01	; 1
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	8c 0f       	add	r24, r28
    1154:	9d 1f       	adc	r25, r29
    1156:	e8 0f       	add	r30, r24
    1158:	f9 1f       	adc	r31, r25
    115a:	00 81       	ld	r16, Z
    115c:	03 c0       	rjmp	.+6      	; 0x1164 <keypad_u8check_press+0xa6>
    115e:	1f 5f       	subi	r17, 0xFF	; 255
    1160:	14 30       	cpi	r17, 0x04	; 4
    1162:	39 f7       	brne	.-50     	; 0x1132 <keypad_u8check_press+0x74>
    1164:	08 94       	sec
    1166:	e1 1c       	adc	r14, r1
    1168:	f1 1c       	adc	r15, r1
    116a:	94 e0       	ldi	r25, 0x04	; 4
    116c:	e9 16       	cp	r14, r25
    116e:	f1 04       	cpc	r15, r1
    1170:	09 f0       	breq	.+2      	; 0x1174 <keypad_u8check_press+0xb6>
    1172:	bf cf       	rjmp	.-130    	; 0x10f2 <keypad_u8check_press+0x34>
    1174:	80 2f       	mov	r24, r16
    1176:	60 96       	adiw	r28, 0x10	; 16
    1178:	0f b6       	in	r0, 0x3f	; 63
    117a:	f8 94       	cli
    117c:	de bf       	out	0x3e, r29	; 62
    117e:	0f be       	out	0x3f, r0	; 63
    1180:	cd bf       	out	0x3d, r28	; 61
    1182:	df 91       	pop	r29
    1184:	cf 91       	pop	r28
    1186:	1f 91       	pop	r17
    1188:	0f 91       	pop	r16
    118a:	ff 90       	pop	r15
    118c:	ef 90       	pop	r14
    118e:	08 95       	ret

00001190 <send_falling_edge>:
    1190:	82 e4       	ldi	r24, 0x42	; 66
    1192:	60 e0       	ldi	r22, 0x00	; 0
    1194:	41 e0       	ldi	r20, 0x01	; 1
    1196:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <DIO_write>
    119a:	8f e9       	ldi	r24, 0x9F	; 159
    119c:	9f e0       	ldi	r25, 0x0F	; 15
    119e:	01 97       	sbiw	r24, 0x01	; 1
    11a0:	f1 f7       	brne	.-4      	; 0x119e <send_falling_edge+0xe>
    11a2:	00 c0       	rjmp	.+0      	; 0x11a4 <send_falling_edge+0x14>
    11a4:	00 00       	nop
    11a6:	82 e4       	ldi	r24, 0x42	; 66
    11a8:	60 e0       	ldi	r22, 0x00	; 0
    11aa:	40 e0       	ldi	r20, 0x00	; 0
    11ac:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <DIO_write>
    11b0:	8f e9       	ldi	r24, 0x9F	; 159
    11b2:	9f e0       	ldi	r25, 0x0F	; 15
    11b4:	01 97       	sbiw	r24, 0x01	; 1
    11b6:	f1 f7       	brne	.-4      	; 0x11b4 <send_falling_edge+0x24>
    11b8:	00 c0       	rjmp	.+0      	; 0x11ba <send_falling_edge+0x2a>
    11ba:	00 00       	nop
    11bc:	08 95       	ret

000011be <LCD_vSend_cmd>:
    11be:	cf 93       	push	r28
    11c0:	c8 2f       	mov	r28, r24
    11c2:	84 e4       	ldi	r24, 0x44	; 68
    11c4:	0e 94 b2 0b 	call	0x1764	; 0x1764 <clear_high_nibble>
    11c8:	6c 2f       	mov	r22, r28
    11ca:	60 7f       	andi	r22, 0xF0	; 240
    11cc:	84 e4       	ldi	r24, 0x44	; 68
    11ce:	0e 94 92 0b 	call	0x1724	; 0x1724 <dio_write_highnibble>
    11d2:	82 e4       	ldi	r24, 0x42	; 66
    11d4:	61 e0       	ldi	r22, 0x01	; 1
    11d6:	40 e0       	ldi	r20, 0x00	; 0
    11d8:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <DIO_write>
    11dc:	0e 94 c8 08 	call	0x1190	; 0x1190 <send_falling_edge>
    11e0:	84 e4       	ldi	r24, 0x44	; 68
    11e2:	0e 94 b2 0b 	call	0x1764	; 0x1764 <clear_high_nibble>
    11e6:	6c 2f       	mov	r22, r28
    11e8:	62 95       	swap	r22
    11ea:	60 7f       	andi	r22, 0xF0	; 240
    11ec:	84 e4       	ldi	r24, 0x44	; 68
    11ee:	0e 94 92 0b 	call	0x1724	; 0x1724 <dio_write_highnibble>
    11f2:	82 e4       	ldi	r24, 0x42	; 66
    11f4:	61 e0       	ldi	r22, 0x01	; 1
    11f6:	40 e0       	ldi	r20, 0x00	; 0
    11f8:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <DIO_write>
    11fc:	0e 94 c8 08 	call	0x1190	; 0x1190 <send_falling_edge>
    1200:	cf 91       	pop	r28
    1202:	08 95       	ret

00001204 <LCD_vInit>:
    1204:	84 e4       	ldi	r24, 0x44	; 68
    1206:	64 e0       	ldi	r22, 0x04	; 4
    1208:	41 e0       	ldi	r20, 0x01	; 1
    120a:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <DIO_vsetPINDir>
    120e:	84 e4       	ldi	r24, 0x44	; 68
    1210:	65 e0       	ldi	r22, 0x05	; 5
    1212:	41 e0       	ldi	r20, 0x01	; 1
    1214:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <DIO_vsetPINDir>
    1218:	84 e4       	ldi	r24, 0x44	; 68
    121a:	66 e0       	ldi	r22, 0x06	; 6
    121c:	41 e0       	ldi	r20, 0x01	; 1
    121e:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <DIO_vsetPINDir>
    1222:	84 e4       	ldi	r24, 0x44	; 68
    1224:	67 e0       	ldi	r22, 0x07	; 7
    1226:	41 e0       	ldi	r20, 0x01	; 1
    1228:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <DIO_vsetPINDir>
    122c:	82 e4       	ldi	r24, 0x42	; 66
    122e:	60 e0       	ldi	r22, 0x00	; 0
    1230:	41 e0       	ldi	r20, 0x01	; 1
    1232:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <DIO_vsetPINDir>
    1236:	82 e4       	ldi	r24, 0x42	; 66
    1238:	62 e0       	ldi	r22, 0x02	; 2
    123a:	41 e0       	ldi	r20, 0x01	; 1
    123c:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <DIO_vsetPINDir>
    1240:	82 e4       	ldi	r24, 0x42	; 66
    1242:	61 e0       	ldi	r22, 0x01	; 1
    1244:	41 e0       	ldi	r20, 0x01	; 1
    1246:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <DIO_vsetPINDir>
    124a:	82 e4       	ldi	r24, 0x42	; 66
    124c:	62 e0       	ldi	r22, 0x02	; 2
    124e:	40 e0       	ldi	r20, 0x00	; 0
    1250:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <DIO_write>
    1254:	82 e0       	ldi	r24, 0x02	; 2
    1256:	0e 94 df 08 	call	0x11be	; 0x11be <LCD_vSend_cmd>
    125a:	88 e2       	ldi	r24, 0x28	; 40
    125c:	0e 94 df 08 	call	0x11be	; 0x11be <LCD_vSend_cmd>
    1260:	81 e0       	ldi	r24, 0x01	; 1
    1262:	0e 94 df 08 	call	0x11be	; 0x11be <LCD_vSend_cmd>
    1266:	8e e0       	ldi	r24, 0x0E	; 14
    1268:	0e 94 df 08 	call	0x11be	; 0x11be <LCD_vSend_cmd>
    126c:	8f e1       	ldi	r24, 0x1F	; 31
    126e:	9e e4       	ldi	r25, 0x4E	; 78
    1270:	01 97       	sbiw	r24, 0x01	; 1
    1272:	f1 f7       	brne	.-4      	; 0x1270 <LCD_vInit+0x6c>
    1274:	00 c0       	rjmp	.+0      	; 0x1276 <LCD_vInit+0x72>
    1276:	00 00       	nop
    1278:	08 95       	ret

0000127a <LCD_vSend_char>:
    127a:	cf 93       	push	r28
    127c:	c8 2f       	mov	r28, r24
    127e:	84 e4       	ldi	r24, 0x44	; 68
    1280:	0e 94 b2 0b 	call	0x1764	; 0x1764 <clear_high_nibble>
    1284:	6c 2f       	mov	r22, r28
    1286:	60 7f       	andi	r22, 0xF0	; 240
    1288:	84 e4       	ldi	r24, 0x44	; 68
    128a:	0e 94 92 0b 	call	0x1724	; 0x1724 <dio_write_highnibble>
    128e:	82 e4       	ldi	r24, 0x42	; 66
    1290:	61 e0       	ldi	r22, 0x01	; 1
    1292:	41 e0       	ldi	r20, 0x01	; 1
    1294:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <DIO_write>
    1298:	0e 94 c8 08 	call	0x1190	; 0x1190 <send_falling_edge>
    129c:	84 e4       	ldi	r24, 0x44	; 68
    129e:	0e 94 b2 0b 	call	0x1764	; 0x1764 <clear_high_nibble>
    12a2:	6c 2f       	mov	r22, r28
    12a4:	62 95       	swap	r22
    12a6:	60 7f       	andi	r22, 0xF0	; 240
    12a8:	84 e4       	ldi	r24, 0x44	; 68
    12aa:	0e 94 92 0b 	call	0x1724	; 0x1724 <dio_write_highnibble>
    12ae:	82 e4       	ldi	r24, 0x42	; 66
    12b0:	61 e0       	ldi	r22, 0x01	; 1
    12b2:	41 e0       	ldi	r20, 0x01	; 1
    12b4:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <DIO_write>
    12b8:	0e 94 c8 08 	call	0x1190	; 0x1190 <send_falling_edge>
    12bc:	cf 91       	pop	r28
    12be:	08 95       	ret

000012c0 <LCD_vSend_string>:
    12c0:	cf 93       	push	r28
    12c2:	df 93       	push	r29
    12c4:	ec 01       	movw	r28, r24
    12c6:	88 81       	ld	r24, Y
    12c8:	88 23       	and	r24, r24
    12ca:	31 f0       	breq	.+12     	; 0x12d8 <LCD_vSend_string+0x18>
    12cc:	21 96       	adiw	r28, 0x01	; 1
    12ce:	0e 94 3d 09 	call	0x127a	; 0x127a <LCD_vSend_char>
    12d2:	89 91       	ld	r24, Y+
    12d4:	88 23       	and	r24, r24
    12d6:	d9 f7       	brne	.-10     	; 0x12ce <LCD_vSend_string+0xe>
    12d8:	df 91       	pop	r29
    12da:	cf 91       	pop	r28
    12dc:	08 95       	ret

000012de <LCD_clearscreen>:
    12de:	81 e0       	ldi	r24, 0x01	; 1
    12e0:	0e 94 df 08 	call	0x11be	; 0x11be <LCD_vSend_cmd>
    12e4:	08 95       	ret

000012e6 <LCD_movecursor>:
    12e6:	81 30       	cpi	r24, 0x01	; 1
    12e8:	19 f4       	brne	.+6      	; 0x12f0 <LCD_movecursor+0xa>
    12ea:	86 2f       	mov	r24, r22
    12ec:	81 58       	subi	r24, 0x81	; 129
    12ee:	06 c0       	rjmp	.+12     	; 0x12fc <LCD_movecursor+0x16>
    12f0:	82 30       	cpi	r24, 0x02	; 2
    12f2:	19 f4       	brne	.+6      	; 0x12fa <LCD_movecursor+0x14>
    12f4:	86 2f       	mov	r24, r22
    12f6:	81 54       	subi	r24, 0x41	; 65
    12f8:	01 c0       	rjmp	.+2      	; 0x12fc <LCD_movecursor+0x16>
    12fa:	80 e8       	ldi	r24, 0x80	; 128
    12fc:	0e 94 df 08 	call	0x11be	; 0x11be <LCD_vSend_cmd>
    1300:	08 95       	ret

00001302 <LCD_PrintNumber>:
    1302:	ef 92       	push	r14
    1304:	ff 92       	push	r15
    1306:	0f 93       	push	r16
    1308:	1f 93       	push	r17
    130a:	cf 93       	push	r28
    130c:	df 93       	push	r29
    130e:	cd b7       	in	r28, 0x3d	; 61
    1310:	de b7       	in	r29, 0x3e	; 62
    1312:	64 97       	sbiw	r28, 0x14	; 20
    1314:	0f b6       	in	r0, 0x3f	; 63
    1316:	f8 94       	cli
    1318:	de bf       	out	0x3e, r29	; 62
    131a:	0f be       	out	0x3f, r0	; 63
    131c:	cd bf       	out	0x3d, r28	; 61
    131e:	fe 01       	movw	r30, r28
    1320:	31 96       	adiw	r30, 0x01	; 1
    1322:	94 e1       	ldi	r25, 0x14	; 20
    1324:	df 01       	movw	r26, r30
    1326:	1d 92       	st	X+, r1
    1328:	9a 95       	dec	r25
    132a:	e9 f7       	brne	.-6      	; 0x1326 <LCD_PrintNumber+0x24>
    132c:	88 23       	and	r24, r24
    132e:	49 f1       	breq	.+82     	; 0x1382 <LCD_PrintNumber+0x80>
    1330:	fe 01       	movw	r30, r28
    1332:	31 96       	adiw	r30, 0x01	; 1
    1334:	20 e0       	ldi	r18, 0x00	; 0
    1336:	30 e0       	ldi	r19, 0x00	; 0
    1338:	4a e0       	ldi	r20, 0x0A	; 10
    133a:	64 2f       	mov	r22, r20
    133c:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <__udivmodqi4>
    1340:	90 83       	st	Z, r25
    1342:	11 82       	std	Z+1, r1	; 0x01
    1344:	32 96       	adiw	r30, 0x02	; 2
    1346:	2f 5f       	subi	r18, 0xFF	; 255
    1348:	3f 4f       	sbci	r19, 0xFF	; 255
    134a:	88 23       	and	r24, r24
    134c:	b1 f7       	brne	.-20     	; 0x133a <LCD_PrintNumber+0x38>
    134e:	89 01       	movw	r16, r18
    1350:	01 50       	subi	r16, 0x01	; 1
    1352:	10 40       	sbci	r17, 0x00	; 0
    1354:	b2 f0       	brmi	.+44     	; 0x1382 <LCD_PrintNumber+0x80>
    1356:	79 01       	movw	r14, r18
    1358:	ee 0c       	add	r14, r14
    135a:	ff 1c       	adc	r15, r15
    135c:	e1 e0       	ldi	r30, 0x01	; 1
    135e:	f0 e0       	ldi	r31, 0x00	; 0
    1360:	ec 0f       	add	r30, r28
    1362:	fd 1f       	adc	r31, r29
    1364:	ee 0e       	add	r14, r30
    1366:	ff 1e       	adc	r15, r31
    1368:	d7 01       	movw	r26, r14
    136a:	9e 91       	ld	r25, -X
    136c:	8e 91       	ld	r24, -X
    136e:	7d 01       	movw	r14, r26
    1370:	80 5d       	subi	r24, 0xD0	; 208
    1372:	0e 94 3d 09 	call	0x127a	; 0x127a <LCD_vSend_char>
    1376:	01 50       	subi	r16, 0x01	; 1
    1378:	10 40       	sbci	r17, 0x00	; 0
    137a:	bf ef       	ldi	r27, 0xFF	; 255
    137c:	0f 3f       	cpi	r16, 0xFF	; 255
    137e:	1b 07       	cpc	r17, r27
    1380:	99 f7       	brne	.-26     	; 0x1368 <LCD_PrintNumber+0x66>
    1382:	64 96       	adiw	r28, 0x14	; 20
    1384:	0f b6       	in	r0, 0x3f	; 63
    1386:	f8 94       	cli
    1388:	de bf       	out	0x3e, r29	; 62
    138a:	0f be       	out	0x3f, r0	; 63
    138c:	cd bf       	out	0x3d, r28	; 61
    138e:	df 91       	pop	r29
    1390:	cf 91       	pop	r28
    1392:	1f 91       	pop	r17
    1394:	0f 91       	pop	r16
    1396:	ff 90       	pop	r15
    1398:	ef 90       	pop	r14
    139a:	08 95       	ret

0000139c <LED_vInit>:
    139c:	41 e0       	ldi	r20, 0x01	; 1
    139e:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <DIO_vsetPINDir>
    13a2:	08 95       	ret

000013a4 <LED_vTurnOn>:
    13a4:	41 e0       	ldi	r20, 0x01	; 1
    13a6:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <DIO_write>
    13aa:	08 95       	ret

000013ac <LED_vTurnOff>:
    13ac:	40 e0       	ldi	r20, 0x00	; 0
    13ae:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <DIO_write>
    13b2:	08 95       	ret

000013b4 <LED_vToggle>:
    13b4:	0e 94 3e 0b 	call	0x167c	; 0x167c <DIO_toggle>
    13b8:	08 95       	ret

000013ba <LED_u8ReadStatus>:
    13ba:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <DIO_u8read>
    13be:	08 95       	ret

000013c0 <DIO_vsetPINDir>:
    13c0:	82 34       	cpi	r24, 0x42	; 66
    13c2:	51 f1       	breq	.+84     	; 0x1418 <DIO_vsetPINDir+0x58>
    13c4:	83 34       	cpi	r24, 0x43	; 67
    13c6:	20 f4       	brcc	.+8      	; 0x13d0 <DIO_vsetPINDir+0x10>
    13c8:	81 34       	cpi	r24, 0x41	; 65
    13ca:	09 f0       	breq	.+2      	; 0x13ce <DIO_vsetPINDir+0xe>
    13cc:	7b c0       	rjmp	.+246    	; 0x14c4 <DIO_vsetPINDir+0x104>
    13ce:	07 c0       	rjmp	.+14     	; 0x13de <DIO_vsetPINDir+0x1e>
    13d0:	83 34       	cpi	r24, 0x43	; 67
    13d2:	09 f4       	brne	.+2      	; 0x13d6 <DIO_vsetPINDir+0x16>
    13d4:	3e c0       	rjmp	.+124    	; 0x1452 <DIO_vsetPINDir+0x92>
    13d6:	84 34       	cpi	r24, 0x44	; 68
    13d8:	09 f0       	breq	.+2      	; 0x13dc <DIO_vsetPINDir+0x1c>
    13da:	74 c0       	rjmp	.+232    	; 0x14c4 <DIO_vsetPINDir+0x104>
    13dc:	57 c0       	rjmp	.+174    	; 0x148c <DIO_vsetPINDir+0xcc>
    13de:	41 30       	cpi	r20, 0x01	; 1
    13e0:	69 f4       	brne	.+26     	; 0x13fc <DIO_vsetPINDir+0x3c>
    13e2:	2a b3       	in	r18, 0x1a	; 26
    13e4:	81 e0       	ldi	r24, 0x01	; 1
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	ac 01       	movw	r20, r24
    13ea:	02 c0       	rjmp	.+4      	; 0x13f0 <DIO_vsetPINDir+0x30>
    13ec:	44 0f       	add	r20, r20
    13ee:	55 1f       	adc	r21, r21
    13f0:	6a 95       	dec	r22
    13f2:	e2 f7       	brpl	.-8      	; 0x13ec <DIO_vsetPINDir+0x2c>
    13f4:	ba 01       	movw	r22, r20
    13f6:	62 2b       	or	r22, r18
    13f8:	6a bb       	out	0x1a, r22	; 26
    13fa:	08 95       	ret
    13fc:	2a b3       	in	r18, 0x1a	; 26
    13fe:	81 e0       	ldi	r24, 0x01	; 1
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	ac 01       	movw	r20, r24
    1404:	02 c0       	rjmp	.+4      	; 0x140a <DIO_vsetPINDir+0x4a>
    1406:	44 0f       	add	r20, r20
    1408:	55 1f       	adc	r21, r21
    140a:	6a 95       	dec	r22
    140c:	e2 f7       	brpl	.-8      	; 0x1406 <DIO_vsetPINDir+0x46>
    140e:	ba 01       	movw	r22, r20
    1410:	60 95       	com	r22
    1412:	62 23       	and	r22, r18
    1414:	6a bb       	out	0x1a, r22	; 26
    1416:	08 95       	ret
    1418:	41 30       	cpi	r20, 0x01	; 1
    141a:	69 f4       	brne	.+26     	; 0x1436 <DIO_vsetPINDir+0x76>
    141c:	27 b3       	in	r18, 0x17	; 23
    141e:	81 e0       	ldi	r24, 0x01	; 1
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	ac 01       	movw	r20, r24
    1424:	02 c0       	rjmp	.+4      	; 0x142a <DIO_vsetPINDir+0x6a>
    1426:	44 0f       	add	r20, r20
    1428:	55 1f       	adc	r21, r21
    142a:	6a 95       	dec	r22
    142c:	e2 f7       	brpl	.-8      	; 0x1426 <DIO_vsetPINDir+0x66>
    142e:	ba 01       	movw	r22, r20
    1430:	62 2b       	or	r22, r18
    1432:	67 bb       	out	0x17, r22	; 23
    1434:	08 95       	ret
    1436:	27 b3       	in	r18, 0x17	; 23
    1438:	81 e0       	ldi	r24, 0x01	; 1
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	ac 01       	movw	r20, r24
    143e:	02 c0       	rjmp	.+4      	; 0x1444 <DIO_vsetPINDir+0x84>
    1440:	44 0f       	add	r20, r20
    1442:	55 1f       	adc	r21, r21
    1444:	6a 95       	dec	r22
    1446:	e2 f7       	brpl	.-8      	; 0x1440 <DIO_vsetPINDir+0x80>
    1448:	ba 01       	movw	r22, r20
    144a:	60 95       	com	r22
    144c:	62 23       	and	r22, r18
    144e:	67 bb       	out	0x17, r22	; 23
    1450:	08 95       	ret
    1452:	41 30       	cpi	r20, 0x01	; 1
    1454:	69 f4       	brne	.+26     	; 0x1470 <DIO_vsetPINDir+0xb0>
    1456:	24 b3       	in	r18, 0x14	; 20
    1458:	81 e0       	ldi	r24, 0x01	; 1
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	ac 01       	movw	r20, r24
    145e:	02 c0       	rjmp	.+4      	; 0x1464 <DIO_vsetPINDir+0xa4>
    1460:	44 0f       	add	r20, r20
    1462:	55 1f       	adc	r21, r21
    1464:	6a 95       	dec	r22
    1466:	e2 f7       	brpl	.-8      	; 0x1460 <DIO_vsetPINDir+0xa0>
    1468:	ba 01       	movw	r22, r20
    146a:	62 2b       	or	r22, r18
    146c:	64 bb       	out	0x14, r22	; 20
    146e:	08 95       	ret
    1470:	24 b3       	in	r18, 0x14	; 20
    1472:	81 e0       	ldi	r24, 0x01	; 1
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	ac 01       	movw	r20, r24
    1478:	02 c0       	rjmp	.+4      	; 0x147e <DIO_vsetPINDir+0xbe>
    147a:	44 0f       	add	r20, r20
    147c:	55 1f       	adc	r21, r21
    147e:	6a 95       	dec	r22
    1480:	e2 f7       	brpl	.-8      	; 0x147a <DIO_vsetPINDir+0xba>
    1482:	ba 01       	movw	r22, r20
    1484:	60 95       	com	r22
    1486:	62 23       	and	r22, r18
    1488:	64 bb       	out	0x14, r22	; 20
    148a:	08 95       	ret
    148c:	41 30       	cpi	r20, 0x01	; 1
    148e:	69 f4       	brne	.+26     	; 0x14aa <DIO_vsetPINDir+0xea>
    1490:	21 b3       	in	r18, 0x11	; 17
    1492:	81 e0       	ldi	r24, 0x01	; 1
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	ac 01       	movw	r20, r24
    1498:	02 c0       	rjmp	.+4      	; 0x149e <DIO_vsetPINDir+0xde>
    149a:	44 0f       	add	r20, r20
    149c:	55 1f       	adc	r21, r21
    149e:	6a 95       	dec	r22
    14a0:	e2 f7       	brpl	.-8      	; 0x149a <DIO_vsetPINDir+0xda>
    14a2:	ba 01       	movw	r22, r20
    14a4:	62 2b       	or	r22, r18
    14a6:	61 bb       	out	0x11, r22	; 17
    14a8:	08 95       	ret
    14aa:	21 b3       	in	r18, 0x11	; 17
    14ac:	81 e0       	ldi	r24, 0x01	; 1
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	ac 01       	movw	r20, r24
    14b2:	02 c0       	rjmp	.+4      	; 0x14b8 <DIO_vsetPINDir+0xf8>
    14b4:	44 0f       	add	r20, r20
    14b6:	55 1f       	adc	r21, r21
    14b8:	6a 95       	dec	r22
    14ba:	e2 f7       	brpl	.-8      	; 0x14b4 <DIO_vsetPINDir+0xf4>
    14bc:	ba 01       	movw	r22, r20
    14be:	60 95       	com	r22
    14c0:	62 23       	and	r22, r18
    14c2:	61 bb       	out	0x11, r22	; 17
    14c4:	08 95       	ret

000014c6 <DIO_write>:
    14c6:	82 34       	cpi	r24, 0x42	; 66
    14c8:	51 f1       	breq	.+84     	; 0x151e <DIO_write+0x58>
    14ca:	83 34       	cpi	r24, 0x43	; 67
    14cc:	20 f4       	brcc	.+8      	; 0x14d6 <DIO_write+0x10>
    14ce:	81 34       	cpi	r24, 0x41	; 65
    14d0:	09 f0       	breq	.+2      	; 0x14d4 <DIO_write+0xe>
    14d2:	7b c0       	rjmp	.+246    	; 0x15ca <DIO_write+0x104>
    14d4:	07 c0       	rjmp	.+14     	; 0x14e4 <DIO_write+0x1e>
    14d6:	83 34       	cpi	r24, 0x43	; 67
    14d8:	09 f4       	brne	.+2      	; 0x14dc <DIO_write+0x16>
    14da:	3e c0       	rjmp	.+124    	; 0x1558 <DIO_write+0x92>
    14dc:	84 34       	cpi	r24, 0x44	; 68
    14de:	09 f0       	breq	.+2      	; 0x14e2 <DIO_write+0x1c>
    14e0:	74 c0       	rjmp	.+232    	; 0x15ca <DIO_write+0x104>
    14e2:	57 c0       	rjmp	.+174    	; 0x1592 <DIO_write+0xcc>
    14e4:	41 30       	cpi	r20, 0x01	; 1
    14e6:	69 f4       	brne	.+26     	; 0x1502 <DIO_write+0x3c>
    14e8:	2b b3       	in	r18, 0x1b	; 27
    14ea:	81 e0       	ldi	r24, 0x01	; 1
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	ac 01       	movw	r20, r24
    14f0:	02 c0       	rjmp	.+4      	; 0x14f6 <DIO_write+0x30>
    14f2:	44 0f       	add	r20, r20
    14f4:	55 1f       	adc	r21, r21
    14f6:	6a 95       	dec	r22
    14f8:	e2 f7       	brpl	.-8      	; 0x14f2 <DIO_write+0x2c>
    14fa:	ba 01       	movw	r22, r20
    14fc:	62 2b       	or	r22, r18
    14fe:	6b bb       	out	0x1b, r22	; 27
    1500:	08 95       	ret
    1502:	2b b3       	in	r18, 0x1b	; 27
    1504:	81 e0       	ldi	r24, 0x01	; 1
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	ac 01       	movw	r20, r24
    150a:	02 c0       	rjmp	.+4      	; 0x1510 <DIO_write+0x4a>
    150c:	44 0f       	add	r20, r20
    150e:	55 1f       	adc	r21, r21
    1510:	6a 95       	dec	r22
    1512:	e2 f7       	brpl	.-8      	; 0x150c <DIO_write+0x46>
    1514:	ba 01       	movw	r22, r20
    1516:	60 95       	com	r22
    1518:	62 23       	and	r22, r18
    151a:	6b bb       	out	0x1b, r22	; 27
    151c:	08 95       	ret
    151e:	41 30       	cpi	r20, 0x01	; 1
    1520:	69 f4       	brne	.+26     	; 0x153c <DIO_write+0x76>
    1522:	28 b3       	in	r18, 0x18	; 24
    1524:	81 e0       	ldi	r24, 0x01	; 1
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	ac 01       	movw	r20, r24
    152a:	02 c0       	rjmp	.+4      	; 0x1530 <DIO_write+0x6a>
    152c:	44 0f       	add	r20, r20
    152e:	55 1f       	adc	r21, r21
    1530:	6a 95       	dec	r22
    1532:	e2 f7       	brpl	.-8      	; 0x152c <DIO_write+0x66>
    1534:	ba 01       	movw	r22, r20
    1536:	62 2b       	or	r22, r18
    1538:	68 bb       	out	0x18, r22	; 24
    153a:	08 95       	ret
    153c:	28 b3       	in	r18, 0x18	; 24
    153e:	81 e0       	ldi	r24, 0x01	; 1
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	ac 01       	movw	r20, r24
    1544:	02 c0       	rjmp	.+4      	; 0x154a <DIO_write+0x84>
    1546:	44 0f       	add	r20, r20
    1548:	55 1f       	adc	r21, r21
    154a:	6a 95       	dec	r22
    154c:	e2 f7       	brpl	.-8      	; 0x1546 <DIO_write+0x80>
    154e:	ba 01       	movw	r22, r20
    1550:	60 95       	com	r22
    1552:	62 23       	and	r22, r18
    1554:	68 bb       	out	0x18, r22	; 24
    1556:	08 95       	ret
    1558:	41 30       	cpi	r20, 0x01	; 1
    155a:	69 f4       	brne	.+26     	; 0x1576 <DIO_write+0xb0>
    155c:	25 b3       	in	r18, 0x15	; 21
    155e:	81 e0       	ldi	r24, 0x01	; 1
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	ac 01       	movw	r20, r24
    1564:	02 c0       	rjmp	.+4      	; 0x156a <DIO_write+0xa4>
    1566:	44 0f       	add	r20, r20
    1568:	55 1f       	adc	r21, r21
    156a:	6a 95       	dec	r22
    156c:	e2 f7       	brpl	.-8      	; 0x1566 <DIO_write+0xa0>
    156e:	ba 01       	movw	r22, r20
    1570:	62 2b       	or	r22, r18
    1572:	65 bb       	out	0x15, r22	; 21
    1574:	08 95       	ret
    1576:	25 b3       	in	r18, 0x15	; 21
    1578:	81 e0       	ldi	r24, 0x01	; 1
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	ac 01       	movw	r20, r24
    157e:	02 c0       	rjmp	.+4      	; 0x1584 <DIO_write+0xbe>
    1580:	44 0f       	add	r20, r20
    1582:	55 1f       	adc	r21, r21
    1584:	6a 95       	dec	r22
    1586:	e2 f7       	brpl	.-8      	; 0x1580 <DIO_write+0xba>
    1588:	ba 01       	movw	r22, r20
    158a:	60 95       	com	r22
    158c:	62 23       	and	r22, r18
    158e:	65 bb       	out	0x15, r22	; 21
    1590:	08 95       	ret
    1592:	41 30       	cpi	r20, 0x01	; 1
    1594:	69 f4       	brne	.+26     	; 0x15b0 <DIO_write+0xea>
    1596:	22 b3       	in	r18, 0x12	; 18
    1598:	81 e0       	ldi	r24, 0x01	; 1
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	ac 01       	movw	r20, r24
    159e:	02 c0       	rjmp	.+4      	; 0x15a4 <DIO_write+0xde>
    15a0:	44 0f       	add	r20, r20
    15a2:	55 1f       	adc	r21, r21
    15a4:	6a 95       	dec	r22
    15a6:	e2 f7       	brpl	.-8      	; 0x15a0 <DIO_write+0xda>
    15a8:	ba 01       	movw	r22, r20
    15aa:	62 2b       	or	r22, r18
    15ac:	62 bb       	out	0x12, r22	; 18
    15ae:	08 95       	ret
    15b0:	22 b3       	in	r18, 0x12	; 18
    15b2:	81 e0       	ldi	r24, 0x01	; 1
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	ac 01       	movw	r20, r24
    15b8:	02 c0       	rjmp	.+4      	; 0x15be <DIO_write+0xf8>
    15ba:	44 0f       	add	r20, r20
    15bc:	55 1f       	adc	r21, r21
    15be:	6a 95       	dec	r22
    15c0:	e2 f7       	brpl	.-8      	; 0x15ba <DIO_write+0xf4>
    15c2:	ba 01       	movw	r22, r20
    15c4:	60 95       	com	r22
    15c6:	62 23       	and	r22, r18
    15c8:	62 bb       	out	0x12, r22	; 18
    15ca:	08 95       	ret

000015cc <DIO_u8read>:
    15cc:	82 34       	cpi	r24, 0x42	; 66
    15ce:	f1 f0       	breq	.+60     	; 0x160c <DIO_u8read+0x40>
    15d0:	83 34       	cpi	r24, 0x43	; 67
    15d2:	20 f4       	brcc	.+8      	; 0x15dc <DIO_u8read+0x10>
    15d4:	81 34       	cpi	r24, 0x41	; 65
    15d6:	09 f0       	breq	.+2      	; 0x15da <DIO_u8read+0xe>
    15d8:	4f c0       	rjmp	.+158    	; 0x1678 <DIO_u8read+0xac>
    15da:	06 c0       	rjmp	.+12     	; 0x15e8 <DIO_u8read+0x1c>
    15dc:	83 34       	cpi	r24, 0x43	; 67
    15de:	41 f1       	breq	.+80     	; 0x1630 <DIO_u8read+0x64>
    15e0:	84 34       	cpi	r24, 0x44	; 68
    15e2:	09 f0       	breq	.+2      	; 0x15e6 <DIO_u8read+0x1a>
    15e4:	49 c0       	rjmp	.+146    	; 0x1678 <DIO_u8read+0xac>
    15e6:	36 c0       	rjmp	.+108    	; 0x1654 <DIO_u8read+0x88>
    15e8:	29 b3       	in	r18, 0x19	; 25
    15ea:	81 e0       	ldi	r24, 0x01	; 1
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	06 2e       	mov	r0, r22
    15f0:	02 c0       	rjmp	.+4      	; 0x15f6 <DIO_u8read+0x2a>
    15f2:	88 0f       	add	r24, r24
    15f4:	99 1f       	adc	r25, r25
    15f6:	0a 94       	dec	r0
    15f8:	e2 f7       	brpl	.-8      	; 0x15f2 <DIO_u8read+0x26>
    15fa:	30 e0       	ldi	r19, 0x00	; 0
    15fc:	82 23       	and	r24, r18
    15fe:	93 23       	and	r25, r19
    1600:	02 c0       	rjmp	.+4      	; 0x1606 <DIO_u8read+0x3a>
    1602:	95 95       	asr	r25
    1604:	87 95       	ror	r24
    1606:	6a 95       	dec	r22
    1608:	e2 f7       	brpl	.-8      	; 0x1602 <DIO_u8read+0x36>
    160a:	08 95       	ret
    160c:	26 b3       	in	r18, 0x16	; 22
    160e:	81 e0       	ldi	r24, 0x01	; 1
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	06 2e       	mov	r0, r22
    1614:	02 c0       	rjmp	.+4      	; 0x161a <DIO_u8read+0x4e>
    1616:	88 0f       	add	r24, r24
    1618:	99 1f       	adc	r25, r25
    161a:	0a 94       	dec	r0
    161c:	e2 f7       	brpl	.-8      	; 0x1616 <DIO_u8read+0x4a>
    161e:	30 e0       	ldi	r19, 0x00	; 0
    1620:	82 23       	and	r24, r18
    1622:	93 23       	and	r25, r19
    1624:	02 c0       	rjmp	.+4      	; 0x162a <DIO_u8read+0x5e>
    1626:	95 95       	asr	r25
    1628:	87 95       	ror	r24
    162a:	6a 95       	dec	r22
    162c:	e2 f7       	brpl	.-8      	; 0x1626 <DIO_u8read+0x5a>
    162e:	08 95       	ret
    1630:	23 b3       	in	r18, 0x13	; 19
    1632:	81 e0       	ldi	r24, 0x01	; 1
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	06 2e       	mov	r0, r22
    1638:	02 c0       	rjmp	.+4      	; 0x163e <DIO_u8read+0x72>
    163a:	88 0f       	add	r24, r24
    163c:	99 1f       	adc	r25, r25
    163e:	0a 94       	dec	r0
    1640:	e2 f7       	brpl	.-8      	; 0x163a <DIO_u8read+0x6e>
    1642:	30 e0       	ldi	r19, 0x00	; 0
    1644:	82 23       	and	r24, r18
    1646:	93 23       	and	r25, r19
    1648:	02 c0       	rjmp	.+4      	; 0x164e <DIO_u8read+0x82>
    164a:	95 95       	asr	r25
    164c:	87 95       	ror	r24
    164e:	6a 95       	dec	r22
    1650:	e2 f7       	brpl	.-8      	; 0x164a <DIO_u8read+0x7e>
    1652:	08 95       	ret
    1654:	20 b3       	in	r18, 0x10	; 16
    1656:	81 e0       	ldi	r24, 0x01	; 1
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	06 2e       	mov	r0, r22
    165c:	02 c0       	rjmp	.+4      	; 0x1662 <DIO_u8read+0x96>
    165e:	88 0f       	add	r24, r24
    1660:	99 1f       	adc	r25, r25
    1662:	0a 94       	dec	r0
    1664:	e2 f7       	brpl	.-8      	; 0x165e <DIO_u8read+0x92>
    1666:	30 e0       	ldi	r19, 0x00	; 0
    1668:	82 23       	and	r24, r18
    166a:	93 23       	and	r25, r19
    166c:	02 c0       	rjmp	.+4      	; 0x1672 <DIO_u8read+0xa6>
    166e:	95 95       	asr	r25
    1670:	87 95       	ror	r24
    1672:	6a 95       	dec	r22
    1674:	e2 f7       	brpl	.-8      	; 0x166e <DIO_u8read+0xa2>
    1676:	08 95       	ret
    1678:	80 e0       	ldi	r24, 0x00	; 0
    167a:	08 95       	ret

0000167c <DIO_toggle>:
    167c:	82 34       	cpi	r24, 0x42	; 66
    167e:	b9 f0       	breq	.+46     	; 0x16ae <DIO_toggle+0x32>
    1680:	83 34       	cpi	r24, 0x43	; 67
    1682:	18 f4       	brcc	.+6      	; 0x168a <DIO_toggle+0xe>
    1684:	81 34       	cpi	r24, 0x41	; 65
    1686:	c9 f5       	brne	.+114    	; 0x16fa <DIO_toggle+0x7e>
    1688:	05 c0       	rjmp	.+10     	; 0x1694 <DIO_toggle+0x18>
    168a:	83 34       	cpi	r24, 0x43	; 67
    168c:	e9 f0       	breq	.+58     	; 0x16c8 <DIO_toggle+0x4c>
    168e:	84 34       	cpi	r24, 0x44	; 68
    1690:	a1 f5       	brne	.+104    	; 0x16fa <DIO_toggle+0x7e>
    1692:	27 c0       	rjmp	.+78     	; 0x16e2 <DIO_toggle+0x66>
    1694:	2b b3       	in	r18, 0x1b	; 27
    1696:	81 e0       	ldi	r24, 0x01	; 1
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	ac 01       	movw	r20, r24
    169c:	02 c0       	rjmp	.+4      	; 0x16a2 <DIO_toggle+0x26>
    169e:	44 0f       	add	r20, r20
    16a0:	55 1f       	adc	r21, r21
    16a2:	6a 95       	dec	r22
    16a4:	e2 f7       	brpl	.-8      	; 0x169e <DIO_toggle+0x22>
    16a6:	ba 01       	movw	r22, r20
    16a8:	62 27       	eor	r22, r18
    16aa:	6b bb       	out	0x1b, r22	; 27
    16ac:	08 95       	ret
    16ae:	28 b3       	in	r18, 0x18	; 24
    16b0:	81 e0       	ldi	r24, 0x01	; 1
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	ac 01       	movw	r20, r24
    16b6:	02 c0       	rjmp	.+4      	; 0x16bc <DIO_toggle+0x40>
    16b8:	44 0f       	add	r20, r20
    16ba:	55 1f       	adc	r21, r21
    16bc:	6a 95       	dec	r22
    16be:	e2 f7       	brpl	.-8      	; 0x16b8 <DIO_toggle+0x3c>
    16c0:	ba 01       	movw	r22, r20
    16c2:	62 27       	eor	r22, r18
    16c4:	68 bb       	out	0x18, r22	; 24
    16c6:	08 95       	ret
    16c8:	25 b3       	in	r18, 0x15	; 21
    16ca:	81 e0       	ldi	r24, 0x01	; 1
    16cc:	90 e0       	ldi	r25, 0x00	; 0
    16ce:	ac 01       	movw	r20, r24
    16d0:	02 c0       	rjmp	.+4      	; 0x16d6 <DIO_toggle+0x5a>
    16d2:	44 0f       	add	r20, r20
    16d4:	55 1f       	adc	r21, r21
    16d6:	6a 95       	dec	r22
    16d8:	e2 f7       	brpl	.-8      	; 0x16d2 <DIO_toggle+0x56>
    16da:	ba 01       	movw	r22, r20
    16dc:	62 27       	eor	r22, r18
    16de:	65 bb       	out	0x15, r22	; 21
    16e0:	08 95       	ret
    16e2:	22 b3       	in	r18, 0x12	; 18
    16e4:	81 e0       	ldi	r24, 0x01	; 1
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	ac 01       	movw	r20, r24
    16ea:	02 c0       	rjmp	.+4      	; 0x16f0 <DIO_toggle+0x74>
    16ec:	44 0f       	add	r20, r20
    16ee:	55 1f       	adc	r21, r21
    16f0:	6a 95       	dec	r22
    16f2:	e2 f7       	brpl	.-8      	; 0x16ec <DIO_toggle+0x70>
    16f4:	ba 01       	movw	r22, r20
    16f6:	62 27       	eor	r22, r18
    16f8:	62 bb       	out	0x12, r22	; 18
    16fa:	08 95       	ret

000016fc <DIO_write_port>:
    16fc:	82 34       	cpi	r24, 0x42	; 66
    16fe:	61 f0       	breq	.+24     	; 0x1718 <DIO_write_port+0x1c>
    1700:	83 34       	cpi	r24, 0x43	; 67
    1702:	18 f4       	brcc	.+6      	; 0x170a <DIO_write_port+0xe>
    1704:	81 34       	cpi	r24, 0x41	; 65
    1706:	69 f4       	brne	.+26     	; 0x1722 <DIO_write_port+0x26>
    1708:	05 c0       	rjmp	.+10     	; 0x1714 <DIO_write_port+0x18>
    170a:	83 34       	cpi	r24, 0x43	; 67
    170c:	39 f0       	breq	.+14     	; 0x171c <DIO_write_port+0x20>
    170e:	84 34       	cpi	r24, 0x44	; 68
    1710:	41 f4       	brne	.+16     	; 0x1722 <DIO_write_port+0x26>
    1712:	06 c0       	rjmp	.+12     	; 0x1720 <DIO_write_port+0x24>
    1714:	6b bb       	out	0x1b, r22	; 27
    1716:	08 95       	ret
    1718:	68 bb       	out	0x18, r22	; 24
    171a:	08 95       	ret
    171c:	65 bb       	out	0x15, r22	; 21
    171e:	08 95       	ret
    1720:	62 bb       	out	0x12, r22	; 18
    1722:	08 95       	ret

00001724 <dio_write_highnibble>:
    1724:	82 34       	cpi	r24, 0x42	; 66
    1726:	79 f0       	breq	.+30     	; 0x1746 <dio_write_highnibble+0x22>
    1728:	83 34       	cpi	r24, 0x43	; 67
    172a:	18 f4       	brcc	.+6      	; 0x1732 <dio_write_highnibble+0xe>
    172c:	81 34       	cpi	r24, 0x41	; 65
    172e:	c9 f4       	brne	.+50     	; 0x1762 <dio_write_highnibble+0x3e>
    1730:	05 c0       	rjmp	.+10     	; 0x173c <dio_write_highnibble+0x18>
    1732:	83 34       	cpi	r24, 0x43	; 67
    1734:	69 f0       	breq	.+26     	; 0x1750 <dio_write_highnibble+0x2c>
    1736:	84 34       	cpi	r24, 0x44	; 68
    1738:	a1 f4       	brne	.+40     	; 0x1762 <dio_write_highnibble+0x3e>
    173a:	0f c0       	rjmp	.+30     	; 0x175a <dio_write_highnibble+0x36>
    173c:	8b b3       	in	r24, 0x1b	; 27
    173e:	60 7f       	andi	r22, 0xF0	; 240
    1740:	68 2b       	or	r22, r24
    1742:	6b bb       	out	0x1b, r22	; 27
    1744:	08 95       	ret
    1746:	88 b3       	in	r24, 0x18	; 24
    1748:	60 7f       	andi	r22, 0xF0	; 240
    174a:	68 2b       	or	r22, r24
    174c:	68 bb       	out	0x18, r22	; 24
    174e:	08 95       	ret
    1750:	85 b3       	in	r24, 0x15	; 21
    1752:	60 7f       	andi	r22, 0xF0	; 240
    1754:	68 2b       	or	r22, r24
    1756:	65 bb       	out	0x15, r22	; 21
    1758:	08 95       	ret
    175a:	82 b3       	in	r24, 0x12	; 18
    175c:	60 7f       	andi	r22, 0xF0	; 240
    175e:	68 2b       	or	r22, r24
    1760:	62 bb       	out	0x12, r22	; 18
    1762:	08 95       	ret

00001764 <clear_high_nibble>:
    1764:	82 34       	cpi	r24, 0x42	; 66
    1766:	71 f0       	breq	.+28     	; 0x1784 <clear_high_nibble+0x20>
    1768:	83 34       	cpi	r24, 0x43	; 67
    176a:	18 f4       	brcc	.+6      	; 0x1772 <clear_high_nibble+0xe>
    176c:	81 34       	cpi	r24, 0x41	; 65
    176e:	a9 f4       	brne	.+42     	; 0x179a <clear_high_nibble+0x36>
    1770:	05 c0       	rjmp	.+10     	; 0x177c <clear_high_nibble+0x18>
    1772:	83 34       	cpi	r24, 0x43	; 67
    1774:	59 f0       	breq	.+22     	; 0x178c <clear_high_nibble+0x28>
    1776:	84 34       	cpi	r24, 0x44	; 68
    1778:	81 f4       	brne	.+32     	; 0x179a <clear_high_nibble+0x36>
    177a:	0c c0       	rjmp	.+24     	; 0x1794 <clear_high_nibble+0x30>
    177c:	8b b3       	in	r24, 0x1b	; 27
    177e:	8f 70       	andi	r24, 0x0F	; 15
    1780:	8b bb       	out	0x1b, r24	; 27
    1782:	08 95       	ret
    1784:	88 b3       	in	r24, 0x18	; 24
    1786:	8f 70       	andi	r24, 0x0F	; 15
    1788:	88 bb       	out	0x18, r24	; 24
    178a:	08 95       	ret
    178c:	85 b3       	in	r24, 0x15	; 21
    178e:	8f 70       	andi	r24, 0x0F	; 15
    1790:	85 bb       	out	0x15, r24	; 21
    1792:	08 95       	ret
    1794:	82 b3       	in	r24, 0x12	; 18
    1796:	8f 70       	andi	r24, 0x0F	; 15
    1798:	82 bb       	out	0x12, r24	; 18
    179a:	08 95       	ret

0000179c <DIO_vconnectpullup>:
    179c:	82 34       	cpi	r24, 0x42	; 66
    179e:	91 f1       	breq	.+100    	; 0x1804 <DIO_vconnectpullup+0x68>
    17a0:	83 34       	cpi	r24, 0x43	; 67
    17a2:	20 f4       	brcc	.+8      	; 0x17ac <DIO_vconnectpullup+0x10>
    17a4:	81 34       	cpi	r24, 0x41	; 65
    17a6:	09 f0       	breq	.+2      	; 0x17aa <DIO_vconnectpullup+0xe>
    17a8:	9b c0       	rjmp	.+310    	; 0x18e0 <DIO_vconnectpullup+0x144>
    17aa:	07 c0       	rjmp	.+14     	; 0x17ba <DIO_vconnectpullup+0x1e>
    17ac:	83 34       	cpi	r24, 0x43	; 67
    17ae:	09 f4       	brne	.+2      	; 0x17b2 <DIO_vconnectpullup+0x16>
    17b0:	4e c0       	rjmp	.+156    	; 0x184e <DIO_vconnectpullup+0xb2>
    17b2:	84 34       	cpi	r24, 0x44	; 68
    17b4:	09 f0       	breq	.+2      	; 0x17b8 <DIO_vconnectpullup+0x1c>
    17b6:	94 c0       	rjmp	.+296    	; 0x18e0 <DIO_vconnectpullup+0x144>
    17b8:	6f c0       	rjmp	.+222    	; 0x1898 <DIO_vconnectpullup+0xfc>
    17ba:	41 30       	cpi	r20, 0x01	; 1
    17bc:	a9 f4       	brne	.+42     	; 0x17e8 <DIO_vconnectpullup+0x4c>
    17be:	80 b7       	in	r24, 0x30	; 48
    17c0:	8b 7f       	andi	r24, 0xFB	; 251
    17c2:	80 bf       	out	0x30, r24	; 48
    17c4:	2a b3       	in	r18, 0x1a	; 26
    17c6:	81 e0       	ldi	r24, 0x01	; 1
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	ac 01       	movw	r20, r24
    17cc:	02 c0       	rjmp	.+4      	; 0x17d2 <DIO_vconnectpullup+0x36>
    17ce:	44 0f       	add	r20, r20
    17d0:	55 1f       	adc	r21, r21
    17d2:	6a 95       	dec	r22
    17d4:	e2 f7       	brpl	.-8      	; 0x17ce <DIO_vconnectpullup+0x32>
    17d6:	ba 01       	movw	r22, r20
    17d8:	84 2f       	mov	r24, r20
    17da:	80 95       	com	r24
    17dc:	82 23       	and	r24, r18
    17de:	8a bb       	out	0x1a, r24	; 26
    17e0:	8b b3       	in	r24, 0x1b	; 27
    17e2:	68 2b       	or	r22, r24
    17e4:	6b bb       	out	0x1b, r22	; 27
    17e6:	08 95       	ret
    17e8:	2b b3       	in	r18, 0x1b	; 27
    17ea:	81 e0       	ldi	r24, 0x01	; 1
    17ec:	90 e0       	ldi	r25, 0x00	; 0
    17ee:	ac 01       	movw	r20, r24
    17f0:	02 c0       	rjmp	.+4      	; 0x17f6 <DIO_vconnectpullup+0x5a>
    17f2:	44 0f       	add	r20, r20
    17f4:	55 1f       	adc	r21, r21
    17f6:	6a 95       	dec	r22
    17f8:	e2 f7       	brpl	.-8      	; 0x17f2 <DIO_vconnectpullup+0x56>
    17fa:	ba 01       	movw	r22, r20
    17fc:	60 95       	com	r22
    17fe:	62 23       	and	r22, r18
    1800:	6b bb       	out	0x1b, r22	; 27
    1802:	08 95       	ret
    1804:	41 30       	cpi	r20, 0x01	; 1
    1806:	a9 f4       	brne	.+42     	; 0x1832 <DIO_vconnectpullup+0x96>
    1808:	80 b7       	in	r24, 0x30	; 48
    180a:	8b 7f       	andi	r24, 0xFB	; 251
    180c:	80 bf       	out	0x30, r24	; 48
    180e:	27 b3       	in	r18, 0x17	; 23
    1810:	81 e0       	ldi	r24, 0x01	; 1
    1812:	90 e0       	ldi	r25, 0x00	; 0
    1814:	ac 01       	movw	r20, r24
    1816:	02 c0       	rjmp	.+4      	; 0x181c <DIO_vconnectpullup+0x80>
    1818:	44 0f       	add	r20, r20
    181a:	55 1f       	adc	r21, r21
    181c:	6a 95       	dec	r22
    181e:	e2 f7       	brpl	.-8      	; 0x1818 <DIO_vconnectpullup+0x7c>
    1820:	ba 01       	movw	r22, r20
    1822:	84 2f       	mov	r24, r20
    1824:	80 95       	com	r24
    1826:	82 23       	and	r24, r18
    1828:	87 bb       	out	0x17, r24	; 23
    182a:	88 b3       	in	r24, 0x18	; 24
    182c:	68 2b       	or	r22, r24
    182e:	68 bb       	out	0x18, r22	; 24
    1830:	08 95       	ret
    1832:	28 b3       	in	r18, 0x18	; 24
    1834:	81 e0       	ldi	r24, 0x01	; 1
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	ac 01       	movw	r20, r24
    183a:	02 c0       	rjmp	.+4      	; 0x1840 <DIO_vconnectpullup+0xa4>
    183c:	44 0f       	add	r20, r20
    183e:	55 1f       	adc	r21, r21
    1840:	6a 95       	dec	r22
    1842:	e2 f7       	brpl	.-8      	; 0x183c <DIO_vconnectpullup+0xa0>
    1844:	ba 01       	movw	r22, r20
    1846:	60 95       	com	r22
    1848:	62 23       	and	r22, r18
    184a:	68 bb       	out	0x18, r22	; 24
    184c:	08 95       	ret
    184e:	41 30       	cpi	r20, 0x01	; 1
    1850:	a9 f4       	brne	.+42     	; 0x187c <DIO_vconnectpullup+0xe0>
    1852:	80 b7       	in	r24, 0x30	; 48
    1854:	8b 7f       	andi	r24, 0xFB	; 251
    1856:	80 bf       	out	0x30, r24	; 48
    1858:	24 b3       	in	r18, 0x14	; 20
    185a:	81 e0       	ldi	r24, 0x01	; 1
    185c:	90 e0       	ldi	r25, 0x00	; 0
    185e:	ac 01       	movw	r20, r24
    1860:	02 c0       	rjmp	.+4      	; 0x1866 <DIO_vconnectpullup+0xca>
    1862:	44 0f       	add	r20, r20
    1864:	55 1f       	adc	r21, r21
    1866:	6a 95       	dec	r22
    1868:	e2 f7       	brpl	.-8      	; 0x1862 <DIO_vconnectpullup+0xc6>
    186a:	ba 01       	movw	r22, r20
    186c:	84 2f       	mov	r24, r20
    186e:	80 95       	com	r24
    1870:	82 23       	and	r24, r18
    1872:	84 bb       	out	0x14, r24	; 20
    1874:	85 b3       	in	r24, 0x15	; 21
    1876:	68 2b       	or	r22, r24
    1878:	65 bb       	out	0x15, r22	; 21
    187a:	08 95       	ret
    187c:	25 b3       	in	r18, 0x15	; 21
    187e:	81 e0       	ldi	r24, 0x01	; 1
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	ac 01       	movw	r20, r24
    1884:	02 c0       	rjmp	.+4      	; 0x188a <DIO_vconnectpullup+0xee>
    1886:	44 0f       	add	r20, r20
    1888:	55 1f       	adc	r21, r21
    188a:	6a 95       	dec	r22
    188c:	e2 f7       	brpl	.-8      	; 0x1886 <DIO_vconnectpullup+0xea>
    188e:	ba 01       	movw	r22, r20
    1890:	60 95       	com	r22
    1892:	62 23       	and	r22, r18
    1894:	65 bb       	out	0x15, r22	; 21
    1896:	08 95       	ret
    1898:	41 30       	cpi	r20, 0x01	; 1
    189a:	a9 f4       	brne	.+42     	; 0x18c6 <DIO_vconnectpullup+0x12a>
    189c:	80 b7       	in	r24, 0x30	; 48
    189e:	8b 7f       	andi	r24, 0xFB	; 251
    18a0:	80 bf       	out	0x30, r24	; 48
    18a2:	21 b3       	in	r18, 0x11	; 17
    18a4:	81 e0       	ldi	r24, 0x01	; 1
    18a6:	90 e0       	ldi	r25, 0x00	; 0
    18a8:	ac 01       	movw	r20, r24
    18aa:	02 c0       	rjmp	.+4      	; 0x18b0 <DIO_vconnectpullup+0x114>
    18ac:	44 0f       	add	r20, r20
    18ae:	55 1f       	adc	r21, r21
    18b0:	6a 95       	dec	r22
    18b2:	e2 f7       	brpl	.-8      	; 0x18ac <DIO_vconnectpullup+0x110>
    18b4:	ba 01       	movw	r22, r20
    18b6:	84 2f       	mov	r24, r20
    18b8:	80 95       	com	r24
    18ba:	82 23       	and	r24, r18
    18bc:	81 bb       	out	0x11, r24	; 17
    18be:	82 b3       	in	r24, 0x12	; 18
    18c0:	68 2b       	or	r22, r24
    18c2:	62 bb       	out	0x12, r22	; 18
    18c4:	08 95       	ret
    18c6:	22 b3       	in	r18, 0x12	; 18
    18c8:	81 e0       	ldi	r24, 0x01	; 1
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	ac 01       	movw	r20, r24
    18ce:	02 c0       	rjmp	.+4      	; 0x18d4 <DIO_vconnectpullup+0x138>
    18d0:	44 0f       	add	r20, r20
    18d2:	55 1f       	adc	r21, r21
    18d4:	6a 95       	dec	r22
    18d6:	e2 f7       	brpl	.-8      	; 0x18d0 <DIO_vconnectpullup+0x134>
    18d8:	ba 01       	movw	r22, r20
    18da:	60 95       	com	r22
    18dc:	62 23       	and	r22, r18
    18de:	62 bb       	out	0x12, r22	; 18
    18e0:	08 95       	ret

000018e2 <TWI_vMasterInit>:
    18e2:	82 e0       	ldi	r24, 0x02	; 2
    18e4:	80 b9       	out	0x00, r24	; 0
    18e6:	08 98       	cbi	0x01, 0	; 1
    18e8:	09 98       	cbi	0x01, 1	; 1
    18ea:	84 e6       	ldi	r24, 0x64	; 100
    18ec:	82 b9       	out	0x02, r24	; 2
    18ee:	86 b7       	in	r24, 0x36	; 54
    18f0:	84 60       	ori	r24, 0x04	; 4
    18f2:	86 bf       	out	0x36, r24	; 54
    18f4:	08 95       	ret

000018f6 <TWI_vSlaveInit>:
    18f6:	86 b7       	in	r24, 0x36	; 54
    18f8:	80 64       	ori	r24, 0x40	; 64
    18fa:	86 bf       	out	0x36, r24	; 54
    18fc:	88 e2       	ldi	r24, 0x28	; 40
    18fe:	82 b9       	out	0x02, r24	; 2
    1900:	86 b7       	in	r24, 0x36	; 54
    1902:	84 60       	ori	r24, 0x04	; 4
    1904:	86 bf       	out	0x36, r24	; 54
    1906:	08 95       	ret

00001908 <TWI_enStartCondition>:
    1908:	86 b7       	in	r24, 0x36	; 54
    190a:	80 62       	ori	r24, 0x20	; 32
    190c:	86 bf       	out	0x36, r24	; 54
    190e:	86 b7       	in	r24, 0x36	; 54
    1910:	80 68       	ori	r24, 0x80	; 128
    1912:	86 bf       	out	0x36, r24	; 54
    1914:	86 b7       	in	r24, 0x36	; 54
    1916:	84 60       	ori	r24, 0x04	; 4
    1918:	86 bf       	out	0x36, r24	; 54
    191a:	06 b6       	in	r0, 0x36	; 54
    191c:	07 fe       	sbrs	r0, 7
    191e:	fd cf       	rjmp	.-6      	; 0x191a <TWI_enStartCondition+0x12>
    1920:	91 b1       	in	r25, 0x01	; 1
    1922:	98 7f       	andi	r25, 0xF8	; 248
    1924:	81 e0       	ldi	r24, 0x01	; 1
    1926:	98 30       	cpi	r25, 0x08	; 8
    1928:	09 f4       	brne	.+2      	; 0x192c <TWI_enStartCondition+0x24>
    192a:	80 e0       	ldi	r24, 0x00	; 0
    192c:	08 95       	ret

0000192e <TWI_enRepeateStart>:
    192e:	86 b7       	in	r24, 0x36	; 54
    1930:	80 62       	ori	r24, 0x20	; 32
    1932:	86 bf       	out	0x36, r24	; 54
    1934:	86 b7       	in	r24, 0x36	; 54
    1936:	80 68       	ori	r24, 0x80	; 128
    1938:	86 bf       	out	0x36, r24	; 54
    193a:	86 b7       	in	r24, 0x36	; 54
    193c:	84 60       	ori	r24, 0x04	; 4
    193e:	86 bf       	out	0x36, r24	; 54
    1940:	06 b6       	in	r0, 0x36	; 54
    1942:	07 fe       	sbrs	r0, 7
    1944:	fd cf       	rjmp	.-6      	; 0x1940 <TWI_enRepeateStart+0x12>
    1946:	81 b1       	in	r24, 0x01	; 1
    1948:	88 7f       	andi	r24, 0xF8	; 248
    194a:	80 31       	cpi	r24, 0x10	; 16
    194c:	11 f4       	brne	.+4      	; 0x1952 <TWI_enRepeateStart+0x24>
    194e:	80 e0       	ldi	r24, 0x00	; 0
    1950:	08 95       	ret
    1952:	82 e0       	ldi	r24, 0x02	; 2
    1954:	08 95       	ret

00001956 <TWI_enSetSlaveAddressWithWrite>:
    1956:	83 b9       	out	0x03, r24	; 3
    1958:	86 b7       	in	r24, 0x36	; 54
    195a:	8f 7d       	andi	r24, 0xDF	; 223
    195c:	86 bf       	out	0x36, r24	; 54
    195e:	18 98       	cbi	0x03, 0	; 3
    1960:	86 b7       	in	r24, 0x36	; 54
    1962:	80 68       	ori	r24, 0x80	; 128
    1964:	86 bf       	out	0x36, r24	; 54
    1966:	86 b7       	in	r24, 0x36	; 54
    1968:	84 60       	ori	r24, 0x04	; 4
    196a:	86 bf       	out	0x36, r24	; 54
    196c:	06 b6       	in	r0, 0x36	; 54
    196e:	07 fe       	sbrs	r0, 7
    1970:	fd cf       	rjmp	.-6      	; 0x196c <TWI_enSetSlaveAddressWithWrite+0x16>
    1972:	81 b1       	in	r24, 0x01	; 1
    1974:	88 7f       	andi	r24, 0xF8	; 248
    1976:	80 32       	cpi	r24, 0x20	; 32
    1978:	11 f0       	breq	.+4      	; 0x197e <TWI_enSetSlaveAddressWithWrite+0x28>
    197a:	80 e0       	ldi	r24, 0x00	; 0
    197c:	08 95       	ret
    197e:	83 e0       	ldi	r24, 0x03	; 3
    1980:	08 95       	ret

00001982 <TWI_enSetSlaveAddressWithRead>:
    1982:	81 60       	ori	r24, 0x01	; 1
    1984:	83 b9       	out	0x03, r24	; 3
    1986:	86 b7       	in	r24, 0x36	; 54
    1988:	8f 7d       	andi	r24, 0xDF	; 223
    198a:	86 bf       	out	0x36, r24	; 54
    198c:	18 9a       	sbi	0x03, 0	; 3
    198e:	86 b7       	in	r24, 0x36	; 54
    1990:	80 68       	ori	r24, 0x80	; 128
    1992:	86 bf       	out	0x36, r24	; 54
    1994:	86 b7       	in	r24, 0x36	; 54
    1996:	84 60       	ori	r24, 0x04	; 4
    1998:	86 bf       	out	0x36, r24	; 54
    199a:	06 b6       	in	r0, 0x36	; 54
    199c:	07 fe       	sbrs	r0, 7
    199e:	fd cf       	rjmp	.-6      	; 0x199a <TWI_enSetSlaveAddressWithRead+0x18>
    19a0:	81 b1       	in	r24, 0x01	; 1
    19a2:	88 7f       	andi	r24, 0xF8	; 248
    19a4:	88 33       	cpi	r24, 0x38	; 56
    19a6:	11 f0       	breq	.+4      	; 0x19ac <TWI_enSetSlaveAddressWithRead+0x2a>
    19a8:	80 e0       	ldi	r24, 0x00	; 0
    19aa:	08 95       	ret
    19ac:	84 e0       	ldi	r24, 0x04	; 4
    19ae:	08 95       	ret

000019b0 <TWI_enMasterWriteData>:
    19b0:	83 b9       	out	0x03, r24	; 3
    19b2:	86 b7       	in	r24, 0x36	; 54
    19b4:	80 68       	ori	r24, 0x80	; 128
    19b6:	86 bf       	out	0x36, r24	; 54
    19b8:	86 b7       	in	r24, 0x36	; 54
    19ba:	84 60       	ori	r24, 0x04	; 4
    19bc:	86 bf       	out	0x36, r24	; 54
    19be:	06 b6       	in	r0, 0x36	; 54
    19c0:	07 fe       	sbrs	r0, 7
    19c2:	fd cf       	rjmp	.-6      	; 0x19be <TWI_enMasterWriteData+0xe>
    19c4:	81 b1       	in	r24, 0x01	; 1
    19c6:	88 7f       	andi	r24, 0xF8	; 248
    19c8:	80 33       	cpi	r24, 0x30	; 48
    19ca:	11 f0       	breq	.+4      	; 0x19d0 <TWI_enMasterWriteData+0x20>
    19cc:	80 e0       	ldi	r24, 0x00	; 0
    19ce:	08 95       	ret
    19d0:	85 e0       	ldi	r24, 0x05	; 5
    19d2:	08 95       	ret

000019d4 <TWI_enMasterReadData>:
    19d4:	fc 01       	movw	r30, r24
    19d6:	86 b7       	in	r24, 0x36	; 54
    19d8:	84 60       	ori	r24, 0x04	; 4
    19da:	86 bf       	out	0x36, r24	; 54
    19dc:	86 b7       	in	r24, 0x36	; 54
    19de:	80 68       	ori	r24, 0x80	; 128
    19e0:	86 bf       	out	0x36, r24	; 54
    19e2:	06 b6       	in	r0, 0x36	; 54
    19e4:	07 fe       	sbrs	r0, 7
    19e6:	fd cf       	rjmp	.-6      	; 0x19e2 <TWI_enMasterReadData+0xe>
    19e8:	81 b1       	in	r24, 0x01	; 1
    19ea:	88 7f       	andi	r24, 0xF8	; 248
    19ec:	88 35       	cpi	r24, 0x58	; 88
    19ee:	11 f0       	breq	.+4      	; 0x19f4 <TWI_enMasterReadData+0x20>
    19f0:	80 e0       	ldi	r24, 0x00	; 0
    19f2:	01 c0       	rjmp	.+2      	; 0x19f6 <TWI_enMasterReadData+0x22>
    19f4:	86 e0       	ldi	r24, 0x06	; 6
    19f6:	93 b1       	in	r25, 0x03	; 3
    19f8:	90 83       	st	Z, r25
    19fa:	08 95       	ret

000019fc <TWI_vStopCondition>:
    19fc:	86 b7       	in	r24, 0x36	; 54
    19fe:	80 61       	ori	r24, 0x10	; 16
    1a00:	86 bf       	out	0x36, r24	; 54
    1a02:	86 b7       	in	r24, 0x36	; 54
    1a04:	80 68       	ori	r24, 0x80	; 128
    1a06:	86 bf       	out	0x36, r24	; 54
    1a08:	86 b7       	in	r24, 0x36	; 54
    1a0a:	84 60       	ori	r24, 0x04	; 4
    1a0c:	86 bf       	out	0x36, r24	; 54
    1a0e:	08 95       	ret

00001a10 <SPI_vInitMaster>:



void SPI_vInitMaster (void)
{
	DDRB |=(1<<SPI_MOSI) |(1<<SPI_SS)|(1<<SPI_SCK);//Set the port B mosi(master out slave in ) ,port B ss(slave select),sck(spi clock)  pins as output
    1a10:	87 b3       	in	r24, 0x17	; 23
    1a12:	80 6b       	ori	r24, 0xB0	; 176
    1a14:	87 bb       	out	0x17, r24	; 23
	SPCR |= (1<<SPE)|(1<<MSTR)|(1<<SPR0);//Enable the SPI,master mode ,Set the clock speed to F/16
    1a16:	8d b1       	in	r24, 0x0d	; 13
    1a18:	81 65       	ori	r24, 0x51	; 81
    1a1a:	8d b9       	out	0x0d, r24	; 13
}
    1a1c:	08 95       	ret

00001a1e <SPI_vInitSlave>:

void SPI_vInitSlave (void)
{
	DDRB |= (1<<SPI_MISO) ;//Set the port B miso(master in slave out ) pin as output
    1a1e:	be 9a       	sbi	0x17, 6	; 23
	SPCR |= (1<<SPE);//Enable the SPI
    1a20:	6e 9a       	sbi	0x0d, 6	; 13
}
    1a22:	08 95       	ret

00001a24 <SPI_ui8TransmitRecive>:

uint8 SPI_ui8TransmitRecive (uint8 data)
{
	SPDR = data;//move the given data to SPI Data register
    1a24:	8f b9       	out	0x0f, r24	; 15
	
	//in case of master send data and wait till the data are fully transmitted
	//in case of slave wait the data to be transmitted by the master
	while (((SPSR&(1<<SPIF))>>SPIF)==0)	//wait till the transmitting is done
    1a26:	77 9b       	sbis	0x0e, 7	; 14
    1a28:	fe cf       	rjmp	.-4      	; 0x1a26 <SPI_ui8TransmitRecive+0x2>
	;									//SPI flag is set to one if the transmission is done
	
	return SPDR;//return the value of SPI Data register after the transmission or receiving is done
    1a2a:	8f b1       	in	r24, 0x0f	; 15
    1a2c:	08 95       	ret

00001a2e <timer0_initializeCTC>:
    1a2e:	8e e4       	ldi	r24, 0x4E	; 78
    1a30:	8c bf       	out	0x3c, r24	; 60
    1a32:	83 b7       	in	r24, 0x33	; 51
    1a34:	88 60       	ori	r24, 0x08	; 8
    1a36:	83 bf       	out	0x33, r24	; 51
    1a38:	83 b7       	in	r24, 0x33	; 51
    1a3a:	8f 7b       	andi	r24, 0xBF	; 191
    1a3c:	83 bf       	out	0x33, r24	; 51
    1a3e:	83 b7       	in	r24, 0x33	; 51
    1a40:	81 60       	ori	r24, 0x01	; 1
    1a42:	83 bf       	out	0x33, r24	; 51
    1a44:	83 b7       	in	r24, 0x33	; 51
    1a46:	8d 7f       	andi	r24, 0xFD	; 253
    1a48:	83 bf       	out	0x33, r24	; 51
    1a4a:	83 b7       	in	r24, 0x33	; 51
    1a4c:	84 60       	ori	r24, 0x04	; 4
    1a4e:	83 bf       	out	0x33, r24	; 51
    1a50:	78 94       	sei
    1a52:	89 b7       	in	r24, 0x39	; 57
    1a54:	82 60       	ori	r24, 0x02	; 2
    1a56:	89 bf       	out	0x39, r24	; 57
    1a58:	08 95       	ret

00001a5a <timer0_stop>:
    1a5a:	83 b7       	in	r24, 0x33	; 51
    1a5c:	8e 7f       	andi	r24, 0xFE	; 254
    1a5e:	83 bf       	out	0x33, r24	; 51
    1a60:	83 b7       	in	r24, 0x33	; 51
    1a62:	8d 7f       	andi	r24, 0xFD	; 253
    1a64:	83 bf       	out	0x33, r24	; 51
    1a66:	83 b7       	in	r24, 0x33	; 51
    1a68:	8b 7f       	andi	r24, 0xFB	; 251
    1a6a:	83 bf       	out	0x33, r24	; 51
    1a6c:	08 95       	ret

00001a6e <timer_initializefastpwm>:
    1a6e:	80 e8       	ldi	r24, 0x80	; 128
    1a70:	8c bf       	out	0x3c, r24	; 60
    1a72:	83 b7       	in	r24, 0x33	; 51
    1a74:	80 64       	ori	r24, 0x40	; 64
    1a76:	83 bf       	out	0x33, r24	; 51
    1a78:	83 b7       	in	r24, 0x33	; 51
    1a7a:	88 60       	ori	r24, 0x08	; 8
    1a7c:	83 bf       	out	0x33, r24	; 51
    1a7e:	78 94       	sei
    1a80:	83 b7       	in	r24, 0x33	; 51
    1a82:	80 62       	ori	r24, 0x20	; 32
    1a84:	83 bf       	out	0x33, r24	; 51
    1a86:	89 b7       	in	r24, 0x39	; 57
    1a88:	81 60       	ori	r24, 0x01	; 1
    1a8a:	89 bf       	out	0x39, r24	; 57
    1a8c:	83 b7       	in	r24, 0x33	; 51
    1a8e:	81 60       	ori	r24, 0x01	; 1
    1a90:	83 bf       	out	0x33, r24	; 51
    1a92:	83 b7       	in	r24, 0x33	; 51
    1a94:	8d 7f       	andi	r24, 0xFD	; 253
    1a96:	83 bf       	out	0x33, r24	; 51
    1a98:	83 b7       	in	r24, 0x33	; 51
    1a9a:	84 60       	ori	r24, 0x04	; 4
    1a9c:	83 bf       	out	0x33, r24	; 51
    1a9e:	08 95       	ret

00001aa0 <change_dutycycle>:
    1aa0:	20 e0       	ldi	r18, 0x00	; 0
    1aa2:	30 e0       	ldi	r19, 0x00	; 0
    1aa4:	48 ec       	ldi	r20, 0xC8	; 200
    1aa6:	52 e4       	ldi	r21, 0x42	; 66
    1aa8:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <__divsf3>
    1aac:	20 e0       	ldi	r18, 0x00	; 0
    1aae:	30 e0       	ldi	r19, 0x00	; 0
    1ab0:	40 e8       	ldi	r20, 0x80	; 128
    1ab2:	53 e4       	ldi	r21, 0x43	; 67
    1ab4:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <__mulsf3>
    1ab8:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <__fixunssfsi>
    1abc:	6c bf       	out	0x3c, r22	; 60
    1abe:	08 95       	ret

00001ac0 <UART_VoidInit>:
    1ac0:	57 9a       	sbi	0x0a, 7	; 10
    1ac2:	55 9a       	sbi	0x0a, 5	; 10
    1ac4:	52 98       	cbi	0x0a, 2	; 10
    1ac6:	86 e8       	ldi	r24, 0x86	; 134
    1ac8:	80 bd       	out	0x20, r24	; 32
    1aca:	83 e3       	ldi	r24, 0x33	; 51
    1acc:	89 b9       	out	0x09, r24	; 9
    1ace:	54 9a       	sbi	0x0a, 4	; 10
    1ad0:	53 9a       	sbi	0x0a, 3	; 10
    1ad2:	08 95       	ret

00001ad4 <UART_vDisableEmptyInterrupt>:
    1ad4:	55 98       	cbi	0x0a, 5	; 10
    1ad6:	08 95       	ret

00001ad8 <UART_vEnableEmptyInterrupt>:
    1ad8:	55 9a       	sbi	0x0a, 5	; 10
    1ada:	08 95       	ret

00001adc <UART_VoidSendData>:
    1adc:	8c b9       	out	0x0c, r24	; 12
    1ade:	08 95       	ret

00001ae0 <UART_U8ReceiveData>:
    1ae0:	8c b1       	in	r24, 0x0c	; 12
    1ae2:	08 95       	ret

00001ae4 <__vector_13>:
    1ae4:	1f 92       	push	r1
    1ae6:	0f 92       	push	r0
    1ae8:	0f b6       	in	r0, 0x3f	; 63
    1aea:	0f 92       	push	r0
    1aec:	11 24       	eor	r1, r1
    1aee:	2f 93       	push	r18
    1af0:	3f 93       	push	r19
    1af2:	4f 93       	push	r20
    1af4:	5f 93       	push	r21
    1af6:	6f 93       	push	r22
    1af8:	7f 93       	push	r23
    1afa:	8f 93       	push	r24
    1afc:	9f 93       	push	r25
    1afe:	af 93       	push	r26
    1b00:	bf 93       	push	r27
    1b02:	ef 93       	push	r30
    1b04:	ff 93       	push	r31
    1b06:	e0 91 a6 02 	lds	r30, 0x02A6
    1b0a:	f0 91 a7 02 	lds	r31, 0x02A7
    1b0e:	09 95       	icall
    1b10:	ff 91       	pop	r31
    1b12:	ef 91       	pop	r30
    1b14:	bf 91       	pop	r27
    1b16:	af 91       	pop	r26
    1b18:	9f 91       	pop	r25
    1b1a:	8f 91       	pop	r24
    1b1c:	7f 91       	pop	r23
    1b1e:	6f 91       	pop	r22
    1b20:	5f 91       	pop	r21
    1b22:	4f 91       	pop	r20
    1b24:	3f 91       	pop	r19
    1b26:	2f 91       	pop	r18
    1b28:	0f 90       	pop	r0
    1b2a:	0f be       	out	0x3f, r0	; 63
    1b2c:	0f 90       	pop	r0
    1b2e:	1f 90       	pop	r1
    1b30:	18 95       	reti

00001b32 <__vector_14>:
    1b32:	1f 92       	push	r1
    1b34:	0f 92       	push	r0
    1b36:	0f b6       	in	r0, 0x3f	; 63
    1b38:	0f 92       	push	r0
    1b3a:	11 24       	eor	r1, r1
    1b3c:	2f 93       	push	r18
    1b3e:	3f 93       	push	r19
    1b40:	4f 93       	push	r20
    1b42:	5f 93       	push	r21
    1b44:	6f 93       	push	r22
    1b46:	7f 93       	push	r23
    1b48:	8f 93       	push	r24
    1b4a:	9f 93       	push	r25
    1b4c:	af 93       	push	r26
    1b4e:	bf 93       	push	r27
    1b50:	ef 93       	push	r30
    1b52:	ff 93       	push	r31
    1b54:	e0 91 a8 02 	lds	r30, 0x02A8
    1b58:	f0 91 a9 02 	lds	r31, 0x02A9
    1b5c:	09 95       	icall
    1b5e:	ff 91       	pop	r31
    1b60:	ef 91       	pop	r30
    1b62:	bf 91       	pop	r27
    1b64:	af 91       	pop	r26
    1b66:	9f 91       	pop	r25
    1b68:	8f 91       	pop	r24
    1b6a:	7f 91       	pop	r23
    1b6c:	6f 91       	pop	r22
    1b6e:	5f 91       	pop	r21
    1b70:	4f 91       	pop	r20
    1b72:	3f 91       	pop	r19
    1b74:	2f 91       	pop	r18
    1b76:	0f 90       	pop	r0
    1b78:	0f be       	out	0x3f, r0	; 63
    1b7a:	0f 90       	pop	r0
    1b7c:	1f 90       	pop	r1
    1b7e:	18 95       	reti

00001b80 <SendCallBack>:
    1b80:	90 93 a9 02 	sts	0x02A9, r25
    1b84:	80 93 a8 02 	sts	0x02A8, r24
    1b88:	08 95       	ret

00001b8a <ReceiveCallBack>:
    1b8a:	90 93 a7 02 	sts	0x02A7, r25
    1b8e:	80 93 a6 02 	sts	0x02A6, r24
    1b92:	08 95       	ret

00001b94 <__divsf3>:
    1b94:	0c d0       	rcall	.+24     	; 0x1bae <__divsf3x>
    1b96:	a9 c0       	rjmp	.+338    	; 0x1cea <__fp_round>
    1b98:	a1 d0       	rcall	.+322    	; 0x1cdc <__fp_pscB>
    1b9a:	40 f0       	brcs	.+16     	; 0x1bac <__divsf3+0x18>
    1b9c:	98 d0       	rcall	.+304    	; 0x1cce <__fp_pscA>
    1b9e:	30 f0       	brcs	.+12     	; 0x1bac <__divsf3+0x18>
    1ba0:	21 f4       	brne	.+8      	; 0x1baa <__divsf3+0x16>
    1ba2:	5f 3f       	cpi	r21, 0xFF	; 255
    1ba4:	19 f0       	breq	.+6      	; 0x1bac <__divsf3+0x18>
    1ba6:	8a c0       	rjmp	.+276    	; 0x1cbc <__fp_inf>
    1ba8:	51 11       	cpse	r21, r1
    1baa:	d3 c0       	rjmp	.+422    	; 0x1d52 <__fp_szero>
    1bac:	8d c0       	rjmp	.+282    	; 0x1cc8 <__fp_nan>

00001bae <__divsf3x>:
    1bae:	ae d0       	rcall	.+348    	; 0x1d0c <__fp_split3>
    1bb0:	98 f3       	brcs	.-26     	; 0x1b98 <__divsf3+0x4>

00001bb2 <__divsf3_pse>:
    1bb2:	99 23       	and	r25, r25
    1bb4:	c9 f3       	breq	.-14     	; 0x1ba8 <__divsf3+0x14>
    1bb6:	55 23       	and	r21, r21
    1bb8:	b1 f3       	breq	.-20     	; 0x1ba6 <__divsf3+0x12>
    1bba:	95 1b       	sub	r25, r21
    1bbc:	55 0b       	sbc	r21, r21
    1bbe:	bb 27       	eor	r27, r27
    1bc0:	aa 27       	eor	r26, r26
    1bc2:	62 17       	cp	r22, r18
    1bc4:	73 07       	cpc	r23, r19
    1bc6:	84 07       	cpc	r24, r20
    1bc8:	38 f0       	brcs	.+14     	; 0x1bd8 <__divsf3_pse+0x26>
    1bca:	9f 5f       	subi	r25, 0xFF	; 255
    1bcc:	5f 4f       	sbci	r21, 0xFF	; 255
    1bce:	22 0f       	add	r18, r18
    1bd0:	33 1f       	adc	r19, r19
    1bd2:	44 1f       	adc	r20, r20
    1bd4:	aa 1f       	adc	r26, r26
    1bd6:	a9 f3       	breq	.-22     	; 0x1bc2 <__divsf3_pse+0x10>
    1bd8:	33 d0       	rcall	.+102    	; 0x1c40 <__divsf3_pse+0x8e>
    1bda:	0e 2e       	mov	r0, r30
    1bdc:	3a f0       	brmi	.+14     	; 0x1bec <__divsf3_pse+0x3a>
    1bde:	e0 e8       	ldi	r30, 0x80	; 128
    1be0:	30 d0       	rcall	.+96     	; 0x1c42 <__divsf3_pse+0x90>
    1be2:	91 50       	subi	r25, 0x01	; 1
    1be4:	50 40       	sbci	r21, 0x00	; 0
    1be6:	e6 95       	lsr	r30
    1be8:	00 1c       	adc	r0, r0
    1bea:	ca f7       	brpl	.-14     	; 0x1bde <__divsf3_pse+0x2c>
    1bec:	29 d0       	rcall	.+82     	; 0x1c40 <__divsf3_pse+0x8e>
    1bee:	fe 2f       	mov	r31, r30
    1bf0:	27 d0       	rcall	.+78     	; 0x1c40 <__divsf3_pse+0x8e>
    1bf2:	66 0f       	add	r22, r22
    1bf4:	77 1f       	adc	r23, r23
    1bf6:	88 1f       	adc	r24, r24
    1bf8:	bb 1f       	adc	r27, r27
    1bfa:	26 17       	cp	r18, r22
    1bfc:	37 07       	cpc	r19, r23
    1bfe:	48 07       	cpc	r20, r24
    1c00:	ab 07       	cpc	r26, r27
    1c02:	b0 e8       	ldi	r27, 0x80	; 128
    1c04:	09 f0       	breq	.+2      	; 0x1c08 <__divsf3_pse+0x56>
    1c06:	bb 0b       	sbc	r27, r27
    1c08:	80 2d       	mov	r24, r0
    1c0a:	bf 01       	movw	r22, r30
    1c0c:	ff 27       	eor	r31, r31
    1c0e:	93 58       	subi	r25, 0x83	; 131
    1c10:	5f 4f       	sbci	r21, 0xFF	; 255
    1c12:	2a f0       	brmi	.+10     	; 0x1c1e <__divsf3_pse+0x6c>
    1c14:	9e 3f       	cpi	r25, 0xFE	; 254
    1c16:	51 05       	cpc	r21, r1
    1c18:	68 f0       	brcs	.+26     	; 0x1c34 <__divsf3_pse+0x82>
    1c1a:	50 c0       	rjmp	.+160    	; 0x1cbc <__fp_inf>
    1c1c:	9a c0       	rjmp	.+308    	; 0x1d52 <__fp_szero>
    1c1e:	5f 3f       	cpi	r21, 0xFF	; 255
    1c20:	ec f3       	brlt	.-6      	; 0x1c1c <__divsf3_pse+0x6a>
    1c22:	98 3e       	cpi	r25, 0xE8	; 232
    1c24:	dc f3       	brlt	.-10     	; 0x1c1c <__divsf3_pse+0x6a>
    1c26:	86 95       	lsr	r24
    1c28:	77 95       	ror	r23
    1c2a:	67 95       	ror	r22
    1c2c:	b7 95       	ror	r27
    1c2e:	f7 95       	ror	r31
    1c30:	9f 5f       	subi	r25, 0xFF	; 255
    1c32:	c9 f7       	brne	.-14     	; 0x1c26 <__divsf3_pse+0x74>
    1c34:	88 0f       	add	r24, r24
    1c36:	91 1d       	adc	r25, r1
    1c38:	96 95       	lsr	r25
    1c3a:	87 95       	ror	r24
    1c3c:	97 f9       	bld	r25, 7
    1c3e:	08 95       	ret
    1c40:	e1 e0       	ldi	r30, 0x01	; 1
    1c42:	66 0f       	add	r22, r22
    1c44:	77 1f       	adc	r23, r23
    1c46:	88 1f       	adc	r24, r24
    1c48:	bb 1f       	adc	r27, r27
    1c4a:	62 17       	cp	r22, r18
    1c4c:	73 07       	cpc	r23, r19
    1c4e:	84 07       	cpc	r24, r20
    1c50:	ba 07       	cpc	r27, r26
    1c52:	20 f0       	brcs	.+8      	; 0x1c5c <__divsf3_pse+0xaa>
    1c54:	62 1b       	sub	r22, r18
    1c56:	73 0b       	sbc	r23, r19
    1c58:	84 0b       	sbc	r24, r20
    1c5a:	ba 0b       	sbc	r27, r26
    1c5c:	ee 1f       	adc	r30, r30
    1c5e:	88 f7       	brcc	.-30     	; 0x1c42 <__divsf3_pse+0x90>
    1c60:	e0 95       	com	r30
    1c62:	08 95       	ret

00001c64 <__fixunssfsi>:
    1c64:	5b d0       	rcall	.+182    	; 0x1d1c <__fp_splitA>
    1c66:	88 f0       	brcs	.+34     	; 0x1c8a <__fixunssfsi+0x26>
    1c68:	9f 57       	subi	r25, 0x7F	; 127
    1c6a:	90 f0       	brcs	.+36     	; 0x1c90 <__fixunssfsi+0x2c>
    1c6c:	b9 2f       	mov	r27, r25
    1c6e:	99 27       	eor	r25, r25
    1c70:	b7 51       	subi	r27, 0x17	; 23
    1c72:	a0 f0       	brcs	.+40     	; 0x1c9c <__fixunssfsi+0x38>
    1c74:	d1 f0       	breq	.+52     	; 0x1caa <__fixunssfsi+0x46>
    1c76:	66 0f       	add	r22, r22
    1c78:	77 1f       	adc	r23, r23
    1c7a:	88 1f       	adc	r24, r24
    1c7c:	99 1f       	adc	r25, r25
    1c7e:	1a f0       	brmi	.+6      	; 0x1c86 <__fixunssfsi+0x22>
    1c80:	ba 95       	dec	r27
    1c82:	c9 f7       	brne	.-14     	; 0x1c76 <__fixunssfsi+0x12>
    1c84:	12 c0       	rjmp	.+36     	; 0x1caa <__fixunssfsi+0x46>
    1c86:	b1 30       	cpi	r27, 0x01	; 1
    1c88:	81 f0       	breq	.+32     	; 0x1caa <__fixunssfsi+0x46>
    1c8a:	62 d0       	rcall	.+196    	; 0x1d50 <__fp_zero>
    1c8c:	b1 e0       	ldi	r27, 0x01	; 1
    1c8e:	08 95       	ret
    1c90:	5f c0       	rjmp	.+190    	; 0x1d50 <__fp_zero>
    1c92:	67 2f       	mov	r22, r23
    1c94:	78 2f       	mov	r23, r24
    1c96:	88 27       	eor	r24, r24
    1c98:	b8 5f       	subi	r27, 0xF8	; 248
    1c9a:	39 f0       	breq	.+14     	; 0x1caa <__fixunssfsi+0x46>
    1c9c:	b9 3f       	cpi	r27, 0xF9	; 249
    1c9e:	cc f3       	brlt	.-14     	; 0x1c92 <__fixunssfsi+0x2e>
    1ca0:	86 95       	lsr	r24
    1ca2:	77 95       	ror	r23
    1ca4:	67 95       	ror	r22
    1ca6:	b3 95       	inc	r27
    1ca8:	d9 f7       	brne	.-10     	; 0x1ca0 <__fixunssfsi+0x3c>
    1caa:	3e f4       	brtc	.+14     	; 0x1cba <__fixunssfsi+0x56>
    1cac:	90 95       	com	r25
    1cae:	80 95       	com	r24
    1cb0:	70 95       	com	r23
    1cb2:	61 95       	neg	r22
    1cb4:	7f 4f       	sbci	r23, 0xFF	; 255
    1cb6:	8f 4f       	sbci	r24, 0xFF	; 255
    1cb8:	9f 4f       	sbci	r25, 0xFF	; 255
    1cba:	08 95       	ret

00001cbc <__fp_inf>:
    1cbc:	97 f9       	bld	r25, 7
    1cbe:	9f 67       	ori	r25, 0x7F	; 127
    1cc0:	80 e8       	ldi	r24, 0x80	; 128
    1cc2:	70 e0       	ldi	r23, 0x00	; 0
    1cc4:	60 e0       	ldi	r22, 0x00	; 0
    1cc6:	08 95       	ret

00001cc8 <__fp_nan>:
    1cc8:	9f ef       	ldi	r25, 0xFF	; 255
    1cca:	80 ec       	ldi	r24, 0xC0	; 192
    1ccc:	08 95       	ret

00001cce <__fp_pscA>:
    1cce:	00 24       	eor	r0, r0
    1cd0:	0a 94       	dec	r0
    1cd2:	16 16       	cp	r1, r22
    1cd4:	17 06       	cpc	r1, r23
    1cd6:	18 06       	cpc	r1, r24
    1cd8:	09 06       	cpc	r0, r25
    1cda:	08 95       	ret

00001cdc <__fp_pscB>:
    1cdc:	00 24       	eor	r0, r0
    1cde:	0a 94       	dec	r0
    1ce0:	12 16       	cp	r1, r18
    1ce2:	13 06       	cpc	r1, r19
    1ce4:	14 06       	cpc	r1, r20
    1ce6:	05 06       	cpc	r0, r21
    1ce8:	08 95       	ret

00001cea <__fp_round>:
    1cea:	09 2e       	mov	r0, r25
    1cec:	03 94       	inc	r0
    1cee:	00 0c       	add	r0, r0
    1cf0:	11 f4       	brne	.+4      	; 0x1cf6 <__fp_round+0xc>
    1cf2:	88 23       	and	r24, r24
    1cf4:	52 f0       	brmi	.+20     	; 0x1d0a <__fp_round+0x20>
    1cf6:	bb 0f       	add	r27, r27
    1cf8:	40 f4       	brcc	.+16     	; 0x1d0a <__fp_round+0x20>
    1cfa:	bf 2b       	or	r27, r31
    1cfc:	11 f4       	brne	.+4      	; 0x1d02 <__fp_round+0x18>
    1cfe:	60 ff       	sbrs	r22, 0
    1d00:	04 c0       	rjmp	.+8      	; 0x1d0a <__fp_round+0x20>
    1d02:	6f 5f       	subi	r22, 0xFF	; 255
    1d04:	7f 4f       	sbci	r23, 0xFF	; 255
    1d06:	8f 4f       	sbci	r24, 0xFF	; 255
    1d08:	9f 4f       	sbci	r25, 0xFF	; 255
    1d0a:	08 95       	ret

00001d0c <__fp_split3>:
    1d0c:	57 fd       	sbrc	r21, 7
    1d0e:	90 58       	subi	r25, 0x80	; 128
    1d10:	44 0f       	add	r20, r20
    1d12:	55 1f       	adc	r21, r21
    1d14:	59 f0       	breq	.+22     	; 0x1d2c <__fp_splitA+0x10>
    1d16:	5f 3f       	cpi	r21, 0xFF	; 255
    1d18:	71 f0       	breq	.+28     	; 0x1d36 <__fp_splitA+0x1a>
    1d1a:	47 95       	ror	r20

00001d1c <__fp_splitA>:
    1d1c:	88 0f       	add	r24, r24
    1d1e:	97 fb       	bst	r25, 7
    1d20:	99 1f       	adc	r25, r25
    1d22:	61 f0       	breq	.+24     	; 0x1d3c <__fp_splitA+0x20>
    1d24:	9f 3f       	cpi	r25, 0xFF	; 255
    1d26:	79 f0       	breq	.+30     	; 0x1d46 <__fp_splitA+0x2a>
    1d28:	87 95       	ror	r24
    1d2a:	08 95       	ret
    1d2c:	12 16       	cp	r1, r18
    1d2e:	13 06       	cpc	r1, r19
    1d30:	14 06       	cpc	r1, r20
    1d32:	55 1f       	adc	r21, r21
    1d34:	f2 cf       	rjmp	.-28     	; 0x1d1a <__fp_split3+0xe>
    1d36:	46 95       	lsr	r20
    1d38:	f1 df       	rcall	.-30     	; 0x1d1c <__fp_splitA>
    1d3a:	08 c0       	rjmp	.+16     	; 0x1d4c <__fp_splitA+0x30>
    1d3c:	16 16       	cp	r1, r22
    1d3e:	17 06       	cpc	r1, r23
    1d40:	18 06       	cpc	r1, r24
    1d42:	99 1f       	adc	r25, r25
    1d44:	f1 cf       	rjmp	.-30     	; 0x1d28 <__fp_splitA+0xc>
    1d46:	86 95       	lsr	r24
    1d48:	71 05       	cpc	r23, r1
    1d4a:	61 05       	cpc	r22, r1
    1d4c:	08 94       	sec
    1d4e:	08 95       	ret

00001d50 <__fp_zero>:
    1d50:	e8 94       	clt

00001d52 <__fp_szero>:
    1d52:	bb 27       	eor	r27, r27
    1d54:	66 27       	eor	r22, r22
    1d56:	77 27       	eor	r23, r23
    1d58:	cb 01       	movw	r24, r22
    1d5a:	97 f9       	bld	r25, 7
    1d5c:	08 95       	ret

00001d5e <__mulsf3>:
    1d5e:	0b d0       	rcall	.+22     	; 0x1d76 <__mulsf3x>
    1d60:	c4 cf       	rjmp	.-120    	; 0x1cea <__fp_round>
    1d62:	b5 df       	rcall	.-150    	; 0x1cce <__fp_pscA>
    1d64:	28 f0       	brcs	.+10     	; 0x1d70 <__mulsf3+0x12>
    1d66:	ba df       	rcall	.-140    	; 0x1cdc <__fp_pscB>
    1d68:	18 f0       	brcs	.+6      	; 0x1d70 <__mulsf3+0x12>
    1d6a:	95 23       	and	r25, r21
    1d6c:	09 f0       	breq	.+2      	; 0x1d70 <__mulsf3+0x12>
    1d6e:	a6 cf       	rjmp	.-180    	; 0x1cbc <__fp_inf>
    1d70:	ab cf       	rjmp	.-170    	; 0x1cc8 <__fp_nan>
    1d72:	11 24       	eor	r1, r1
    1d74:	ee cf       	rjmp	.-36     	; 0x1d52 <__fp_szero>

00001d76 <__mulsf3x>:
    1d76:	ca df       	rcall	.-108    	; 0x1d0c <__fp_split3>
    1d78:	a0 f3       	brcs	.-24     	; 0x1d62 <__mulsf3+0x4>

00001d7a <__mulsf3_pse>:
    1d7a:	95 9f       	mul	r25, r21
    1d7c:	d1 f3       	breq	.-12     	; 0x1d72 <__mulsf3+0x14>
    1d7e:	95 0f       	add	r25, r21
    1d80:	50 e0       	ldi	r21, 0x00	; 0
    1d82:	55 1f       	adc	r21, r21
    1d84:	62 9f       	mul	r22, r18
    1d86:	f0 01       	movw	r30, r0
    1d88:	72 9f       	mul	r23, r18
    1d8a:	bb 27       	eor	r27, r27
    1d8c:	f0 0d       	add	r31, r0
    1d8e:	b1 1d       	adc	r27, r1
    1d90:	63 9f       	mul	r22, r19
    1d92:	aa 27       	eor	r26, r26
    1d94:	f0 0d       	add	r31, r0
    1d96:	b1 1d       	adc	r27, r1
    1d98:	aa 1f       	adc	r26, r26
    1d9a:	64 9f       	mul	r22, r20
    1d9c:	66 27       	eor	r22, r22
    1d9e:	b0 0d       	add	r27, r0
    1da0:	a1 1d       	adc	r26, r1
    1da2:	66 1f       	adc	r22, r22
    1da4:	82 9f       	mul	r24, r18
    1da6:	22 27       	eor	r18, r18
    1da8:	b0 0d       	add	r27, r0
    1daa:	a1 1d       	adc	r26, r1
    1dac:	62 1f       	adc	r22, r18
    1dae:	73 9f       	mul	r23, r19
    1db0:	b0 0d       	add	r27, r0
    1db2:	a1 1d       	adc	r26, r1
    1db4:	62 1f       	adc	r22, r18
    1db6:	83 9f       	mul	r24, r19
    1db8:	a0 0d       	add	r26, r0
    1dba:	61 1d       	adc	r22, r1
    1dbc:	22 1f       	adc	r18, r18
    1dbe:	74 9f       	mul	r23, r20
    1dc0:	33 27       	eor	r19, r19
    1dc2:	a0 0d       	add	r26, r0
    1dc4:	61 1d       	adc	r22, r1
    1dc6:	23 1f       	adc	r18, r19
    1dc8:	84 9f       	mul	r24, r20
    1dca:	60 0d       	add	r22, r0
    1dcc:	21 1d       	adc	r18, r1
    1dce:	82 2f       	mov	r24, r18
    1dd0:	76 2f       	mov	r23, r22
    1dd2:	6a 2f       	mov	r22, r26
    1dd4:	11 24       	eor	r1, r1
    1dd6:	9f 57       	subi	r25, 0x7F	; 127
    1dd8:	50 40       	sbci	r21, 0x00	; 0
    1dda:	8a f0       	brmi	.+34     	; 0x1dfe <__mulsf3_pse+0x84>
    1ddc:	e1 f0       	breq	.+56     	; 0x1e16 <__mulsf3_pse+0x9c>
    1dde:	88 23       	and	r24, r24
    1de0:	4a f0       	brmi	.+18     	; 0x1df4 <__mulsf3_pse+0x7a>
    1de2:	ee 0f       	add	r30, r30
    1de4:	ff 1f       	adc	r31, r31
    1de6:	bb 1f       	adc	r27, r27
    1de8:	66 1f       	adc	r22, r22
    1dea:	77 1f       	adc	r23, r23
    1dec:	88 1f       	adc	r24, r24
    1dee:	91 50       	subi	r25, 0x01	; 1
    1df0:	50 40       	sbci	r21, 0x00	; 0
    1df2:	a9 f7       	brne	.-22     	; 0x1dde <__mulsf3_pse+0x64>
    1df4:	9e 3f       	cpi	r25, 0xFE	; 254
    1df6:	51 05       	cpc	r21, r1
    1df8:	70 f0       	brcs	.+28     	; 0x1e16 <__mulsf3_pse+0x9c>
    1dfa:	60 cf       	rjmp	.-320    	; 0x1cbc <__fp_inf>
    1dfc:	aa cf       	rjmp	.-172    	; 0x1d52 <__fp_szero>
    1dfe:	5f 3f       	cpi	r21, 0xFF	; 255
    1e00:	ec f3       	brlt	.-6      	; 0x1dfc <__mulsf3_pse+0x82>
    1e02:	98 3e       	cpi	r25, 0xE8	; 232
    1e04:	dc f3       	brlt	.-10     	; 0x1dfc <__mulsf3_pse+0x82>
    1e06:	86 95       	lsr	r24
    1e08:	77 95       	ror	r23
    1e0a:	67 95       	ror	r22
    1e0c:	b7 95       	ror	r27
    1e0e:	f7 95       	ror	r31
    1e10:	e7 95       	ror	r30
    1e12:	9f 5f       	subi	r25, 0xFF	; 255
    1e14:	c1 f7       	brne	.-16     	; 0x1e06 <__mulsf3_pse+0x8c>
    1e16:	fe 2b       	or	r31, r30
    1e18:	88 0f       	add	r24, r24
    1e1a:	91 1d       	adc	r25, r1
    1e1c:	96 95       	lsr	r25
    1e1e:	87 95       	ror	r24
    1e20:	97 f9       	bld	r25, 7
    1e22:	08 95       	ret

00001e24 <__udivmodqi4>:
    1e24:	99 1b       	sub	r25, r25
    1e26:	79 e0       	ldi	r23, 0x09	; 9
    1e28:	04 c0       	rjmp	.+8      	; 0x1e32 <__udivmodqi4_ep>

00001e2a <__udivmodqi4_loop>:
    1e2a:	99 1f       	adc	r25, r25
    1e2c:	96 17       	cp	r25, r22
    1e2e:	08 f0       	brcs	.+2      	; 0x1e32 <__udivmodqi4_ep>
    1e30:	96 1b       	sub	r25, r22

00001e32 <__udivmodqi4_ep>:
    1e32:	88 1f       	adc	r24, r24
    1e34:	7a 95       	dec	r23
    1e36:	c9 f7       	brne	.-14     	; 0x1e2a <__udivmodqi4_loop>
    1e38:	80 95       	com	r24
    1e3a:	08 95       	ret

00001e3c <_exit>:
    1e3c:	f8 94       	cli

00001e3e <__stop_program>:
    1e3e:	ff cf       	rjmp	.-2      	; 0x1e3e <__stop_program>
